domain Address$Adt$alloc$$std$$alloc$$Global  {
  
  function deref_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(base: Address$Adt$alloc$$std$$alloc$$Global,
  version: Version): MemorySnapshot$Adt$alloc$$std$$alloc$$Global 
  
  function id_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$$int$(base: Address$Adt$alloc$$std$$alloc$$Global,
  version: Version): Int 
}

domain Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(base: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  version: Version): MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function id_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(base: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  version: Version): Int 
  
  function get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(base: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): Address$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(base: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): Address$Adt$alloc$$std$$alloc$$Global 
  
  function get_base_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(field_addr: Address$Adt$core$$std$$ptr$$Unique$1$I32): Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function get_base_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(field_addr: Address$Adt$alloc$$std$$alloc$$Global): Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  // The base address is determined by the address of field f$0
  axiom base_of_field_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$0 {
    (forall base_addr: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(base_addr) }
      base_addr ==
      get_base_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(base_addr)))
  }
  
  // The base address is determined by the address of field f$1
  axiom base_of_field_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$1 {
    (forall base_addr: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(base_addr) }
      base_addr ==
      get_base_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(base_addr)))
  }
}

domain Address$Adt$core$$std$$marker$$PhantomData$1$I32  {
  
  function deref_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(base: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  version: Version): MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 
  
  function id_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$int$(base: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  version: Version): Int 
}

domain Address$Adt$core$$std$$ptr$$NonNull$1$I32  {
  
  function deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(base: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  version: Version): MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function id_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$int$(base: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  version: Version): Int 
  
  function get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(base: Address$Adt$core$$std$$ptr$$NonNull$1$I32): Address$ConstPtr$I32 
  
  function get_base_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$ConstPtr$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(field_addr: Address$ConstPtr$I32): Address$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  // The base address is determined by the address of field f$pointer
  axiom base_of_field_of_Adt$core$$std$$ptr$$NonNull$1$I32_variant$0_field$0 {
    (forall base_addr: Address$Adt$core$$std$$ptr$$NonNull$1$I32 ::
      { get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(base_addr) }
      base_addr ==
      get_base_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$ConstPtr$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(base_addr)))
  }
}

domain Address$Adt$core$$std$$ptr$$Unique$1$I32  {
  
  function deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(base: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  version: Version): MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function id_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$int$(base: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  version: Version): Int 
  
  function get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(base: Address$Adt$core$$std$$ptr$$Unique$1$I32): Address$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(base: Address$Adt$core$$std$$ptr$$Unique$1$I32): Address$Adt$core$$std$$marker$$PhantomData$1$I32 
  
  function get_base_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$Adt$core$$std$$ptr$$Unique$1$I32(field_addr: Address$Adt$core$$std$$ptr$$NonNull$1$I32): Address$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function get_base_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Address$Adt$core$$std$$ptr$$Unique$1$I32(field_addr: Address$Adt$core$$std$$marker$$PhantomData$1$I32): Address$Adt$core$$std$$ptr$$Unique$1$I32 
  
  // The base address is determined by the address of field f$pointer
  axiom base_of_field_of_Adt$core$$std$$ptr$$Unique$1$I32_variant$0_field$0 {
    (forall base_addr: Address$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(base_addr) }
      base_addr ==
      get_base_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$Adt$core$$std$$ptr$$Unique$1$I32(get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(base_addr)))
  }
  
  // The base address is determined by the address of field f$_marker
  axiom base_of_field_of_Adt$core$$std$$ptr$$Unique$1$I32_variant$0_field$1 {
    (forall base_addr: Address$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(base_addr) }
      base_addr ==
      get_base_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Address$Adt$core$$std$$ptr$$Unique$1$I32(get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(base_addr)))
  }
}

domain Address$Bool  {
  
  function deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(base: Address$Bool,
  version: Version): MemorySnapshot$Bool 
  
  function id_Bool__$TY$__Address$Bool$Version$$int$(base: Address$Bool, version: Version): Int 
  
  function _dummy_base_to_field_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32  {
  
  function deref_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(base: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  version: Version): MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 
  
  function id_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(base: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  version: Version): Int 
}

domain Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32  {
  
  function deref_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(base: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  version: Version): MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 
  
  function id_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(base: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  version: Version): Int 
}

domain Address$ConstPtr$I32  {
  
  function deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(base: Address$ConstPtr$I32,
  version: Version): MemorySnapshot$ConstPtr$I32 
  
  function id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(base: Address$ConstPtr$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_ConstPtr$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_ConstPtr$I32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$I32  {
  
  function deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(base: Address$I32,
  version: Version): MemorySnapshot$I32 
  
  function id_I32__$TY$__Address$I32$Version$$int$(base: Address$I32, version: Version): Int 
  
  function _dummy_base_to_field_of_I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_I32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(base: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  version: Version): MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function id_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(base: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$MutRef$I32  {
  
  function deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(base: Address$MutRef$I32,
  version: Version): MemorySnapshot$MutRef$I32 
  
  function id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(base: Address$MutRef$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$MutRef$Tuple2$I32$I32  {
  
  function deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(base: Address$MutRef$Tuple2$I32$I32,
  version: Version): MemorySnapshot$MutRef$Tuple2$I32$I32 
  
  function id_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$$int$(base: Address$MutRef$Tuple2$I32$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Tuple2$I32$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Tuple2$I32$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Tuple2$I32$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Tuple2$I32$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Never  {
  
  function deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(base: Address$Never,
  version: Version): MemorySnapshot$Never 
  
  function id_Never__$TY$__Address$Never$Version$$int$(base: Address$Never,
  version: Version): Int 
}

domain Address$SharedRef$MutRef$I32  {
  
  function deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(base: Address$SharedRef$MutRef$I32,
  version: Version): MemorySnapshot$SharedRef$MutRef$I32 
  
  function id_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$$int$(base: Address$SharedRef$MutRef$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Tuple0  {
  
  function deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(base: Address$Tuple0,
  version: Version): MemorySnapshot$Tuple0 
  
  function id_Tuple0__$TY$__Address$Tuple0$Version$$int$(base: Address$Tuple0,
  version: Version): Int 
}

domain Address$Tuple2$I32$I32  {
  
  function deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(base: Address$Tuple2$I32$I32,
  version: Version): MemorySnapshot$Tuple2$I32$I32 
  
  function id_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$$int$(base: Address$Tuple2$I32$I32,
  version: Version): Int 
  
  function get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base: Address$Tuple2$I32$I32): Address$I32 
  
  function get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base: Address$Tuple2$I32$I32): Address$I32 
  
  function get_base_f$0_of_Tuple2$I32$I32__$TY$__Address$I32$Address$Tuple2$I32$I32(field_addr: Address$I32): Address$Tuple2$I32$I32 
  
  function get_base_f$1_of_Tuple2$I32$I32__$TY$__Address$I32$Address$Tuple2$I32$I32(field_addr: Address$I32): Address$Tuple2$I32$I32 
  
  // The base address is determined by the address of field f$0
  axiom base_of_field_of_Tuple2$I32$I32_variant$0_field$0 {
    (forall base_addr: Address$Tuple2$I32$I32 ::
      { get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base_addr) }
      base_addr ==
      get_base_f$0_of_Tuple2$I32$I32__$TY$__Address$I32$Address$Tuple2$I32$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base_addr)))
  }
  
  // The base address is determined by the address of field f$1
  axiom base_of_field_of_Tuple2$I32$I32_variant$0_field$1 {
    (forall base_addr: Address$Tuple2$I32$I32 ::
      { get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base_addr) }
      base_addr ==
      get_base_f$1_of_Tuple2$I32$I32__$TY$__Address$I32$Address$Tuple2$I32$I32(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base_addr)))
  }
}

domain MemorySnapshot$Adt$alloc$$std$$alloc$$Global  {
  
  
}

domain MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function new_memory_snap_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$0: MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32,
  f$1: MemorySnapshot$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function get_memory_field_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(snap: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function get_memory_field_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(snap: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$Adt$alloc$$std$$alloc$$Global 
}

domain MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32  {
  
  
}

domain MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32  {
  
  function new_memory_snap_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__MemorySnapshot$ConstPtr$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(f$pointer: MemorySnapshot$ConstPtr$I32): MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function get_memory_field_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$ConstPtr$I32(snap: MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32): MemorySnapshot$ConstPtr$I32 
}

domain MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32  {
  
  function new_memory_snap_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(f$pointer: MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32,
  f$_marker: MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32): MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function get_memory_field_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(snap: MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32): MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function get_memory_field_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(snap: MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32): MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 
}

domain MemorySnapshot$Bool  {
  
  function new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(value: Bool): MemorySnapshot$Bool 
  
  function get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(snap: MemorySnapshot$Bool): Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Bool_variant$0 {
    (forall self: MemorySnapshot$Bool ::
      { get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self) }
      self ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value) }
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32  {
  
  
}

domain MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32  {
  
  
}

domain MemorySnapshot$ConstPtr$I32  {
  
  function new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(target: Address$I32): MemorySnapshot$ConstPtr$I32 
  
  function get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(snap: MemorySnapshot$ConstPtr$I32): Address$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$I32_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$I32 ::
      { get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(self) }
      self ==
      new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target) }
      get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$I32  {
  
  function new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(value: Int): MemorySnapshot$I32 
  
  function get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(snap: MemorySnapshot$I32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_I32_variant$0 {
    (forall self: MemorySnapshot$I32 ::
      { get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self) }
      self ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value) }
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$MutPtr$I32  {
  
  function new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(target: Address$I32): MemorySnapshot$MutPtr$I32 
  
  function get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(snap: MemorySnapshot$MutPtr$I32): Address$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$I32_variant$0 {
    (forall self: MemorySnapshot$MutPtr$I32 ::
      { get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(self) }
      self ==
      new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target) }
      get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(target_address: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  target_snapshot: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(snap: MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(snap: MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0 {
    (forall self: MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(self) }
      { get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(self) }
      self ==
      new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(self),
      get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$1 {
    (forall f$target_address: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$MutRef$I32  {
  
  function new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(target_address: Address$I32,
  target_snapshot: MemorySnapshot$I32): MemorySnapshot$MutRef$I32 
  
  function get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(snap: MemorySnapshot$MutRef$I32): Address$I32 
  
  function get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(snap: MemorySnapshot$MutRef$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$I32_variant$0 {
    (forall self: MemorySnapshot$MutRef$I32 ::
      { get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(self) }
      { get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(self) }
      self ==
      new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(self),
      get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$I32_variant$0_field$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$I32_variant$0_field$1 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$MutRef$Tuple2$I32$I32  {
  
  function new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(target_address: Address$Tuple2$I32$I32,
  target_snapshot: MemorySnapshot$Tuple2$I32$I32): MemorySnapshot$MutRef$Tuple2$I32$I32 
  
  function get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(snap: MemorySnapshot$MutRef$Tuple2$I32$I32): Address$Tuple2$I32$I32 
  
  function get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(snap: MemorySnapshot$MutRef$Tuple2$I32$I32): MemorySnapshot$Tuple2$I32$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Tuple2$I32$I32_variant$0 {
    (forall self: MemorySnapshot$MutRef$Tuple2$I32$I32 ::
      { get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(self) }
      { get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(self) }
      self ==
      new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(self),
      get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Tuple2$I32$I32_variant$0_field$0 {
    (forall f$target_address: Address$Tuple2$I32$I32, f$target_snapshot: MemorySnapshot$Tuple2$I32$I32 ::
      { new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Tuple2$I32$I32_variant$0_field$1 {
    (forall f$target_address: Address$Tuple2$I32$I32, f$target_snapshot: MemorySnapshot$Tuple2$I32$I32 ::
      { new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Never  {
  
  
}

domain MemorySnapshot$SharedRef$MutRef$I32  {
  
  function new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(target_address: Address$MutRef$I32,
  target_snapshot: MemorySnapshot$MutRef$I32): MemorySnapshot$SharedRef$MutRef$I32 
  
  function get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(snap: MemorySnapshot$SharedRef$MutRef$I32): Address$MutRef$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(snap: MemorySnapshot$SharedRef$MutRef$I32): MemorySnapshot$MutRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$MutRef$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$MutRef$I32 ::
      { get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$MutRef$I32_variant$0_field$0 {
    (forall f$target_address: Address$MutRef$I32, f$target_snapshot: MemorySnapshot$MutRef$I32 ::
      { new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$MutRef$I32_variant$0_field$1 {
    (forall f$target_address: Address$MutRef$I32, f$target_snapshot: MemorySnapshot$MutRef$I32 ::
      { new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Tuple0  {
  
  function new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0(): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: MemorySnapshot$Tuple0 ::self ==
      new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0())
  }
}

domain MemorySnapshot$Tuple2$I32$I32  {
  
  function new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$0: MemorySnapshot$I32,
  f$1: MemorySnapshot$I32): MemorySnapshot$Tuple2$I32$I32 
  
  function get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(snap: MemorySnapshot$Tuple2$I32$I32): MemorySnapshot$I32 
  
  function get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(snap: MemorySnapshot$Tuple2$I32$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple2$I32$I32_variant$0 {
    (forall self: MemorySnapshot$Tuple2$I32$I32 ::
      { get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(self) }
      { get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(self) }
      self ==
      new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(self),
      get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(self)))
  }
  
  // Definition of destructor, field f$0
  axiom definition_of_Tuple2$I32$I32_variant$0_field$0 {
    (forall f$f$0: MemorySnapshot$I32, f$f$1: MemorySnapshot$I32 ::
      { new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1) }
      get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1)) ==
      f$f$0)
  }
  
  // Definition of destructor, field f$1
  axiom definition_of_Tuple2$I32$I32_variant$0_field$1 {
    (forall f$f$0: MemorySnapshot$I32, f$f$1: MemorySnapshot$I32 ::
      { new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1) }
      get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1)) ==
      f$f$1)
  }
}

domain Ownership$Adt$alloc$$std$$alloc$$Global  {
  
  function owns_as_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$alloc$$Global, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1: Address$Adt$alloc$$std$$alloc$$Global,
  v1: Version, a2: Address$Adt$alloc$$std$$alloc$$Global, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$alloc$$Global, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$alloc$$std$$alloc$$Global
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$alloc$$std$$alloc$$Global
  axiom framing_definition_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(a,
      v1) ==
      deref_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$alloc$$std$$alloc$$Global
  axiom same_id_shallow_definition_of_Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$alloc$$Global, v1: Version, v2: Version ::
      { same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$$int$(a,
      v1) ==
      id_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$alloc$$std$$alloc$$Global
  axiom moved_definition_of_Adt$alloc$$std$$alloc$$Global {
    (forall a1: Address$Adt$alloc$$std$$alloc$$Global, a2: Address$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { move__Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$$int$(a1,
      v1) ==
      id_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$$int$(a2,
      v2) &&
      deref_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(a1,
      v1) ==
      deref_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(a2,
      v2))
  }
}

domain Ownership$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, a2: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$0
  axiom agree_snap_addr_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(base_addr,
      v) }
      deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(base_addr),
      v) ==
      get_memory_field_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$1
  axiom agree_snap_addr_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$1 {
    (forall v: Version, base_addr: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(base_addr,
      v) }
      deref_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(base_addr),
      v) ==
      get_memory_field_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$0: Allocated ==> Allocated
  axiom ownership_of_field_f$0_from_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$0_from_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$0_from_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: Allocated ==> Allocated
  axiom ownership_of_field_f$1_from_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(a),
      v))
  }
  
  // Ownership across statement of field f$1: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$1_from_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$1_from_Allocated_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_definition_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v1) ==
      deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom same_id_shallow_definition_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a,
      v1) ==
      id_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom same_id_shallow_definition_of_variant_0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(a),
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(a),
      v1, v2))
  }
  
  // Move definition of Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom moved_definition_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a1: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    a2: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { move__Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a1,
      v1) ==
      id_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a2,
      v2) &&
      deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a1,
      v1) ==
      deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom moved_definition_of_variant_0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a1: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    a2: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { move__Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(a1),
      v1, get_addr_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$core$$std$$ptr$$Unique$1$I32(a2),
      v2) &&
      move__Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$alloc$$Global$Version$Address$Adt$alloc$$std$$alloc$$Global$Version$$bool$(get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(a1),
      v1, get_addr_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$alloc$$Global(a2),
      v2))
  }
}

domain Ownership$Adt$core$$std$$marker$$PhantomData$1$I32  {
  
  function owns_as_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(a1: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
  v1: Version, a2: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$marker$$PhantomData$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$marker$$PhantomData$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$marker$$PhantomData$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$marker$$PhantomData$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$core$$std$$marker$$PhantomData$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$core$$std$$marker$$PhantomData$1$I32
  axiom framing_definition_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(a,
      v1) ==
      deref_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$core$$std$$marker$$PhantomData$1$I32
  axiom same_id_shallow_definition_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a: Address$Adt$core$$std$$marker$$PhantomData$1$I32, v1: Version,
    v2: Version ::
      { same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$int$(a,
      v1) ==
      id_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$core$$std$$marker$$PhantomData$1$I32
  axiom moved_definition_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall a1: Address$Adt$core$$std$$marker$$PhantomData$1$I32, a2: Address$Adt$core$$std$$marker$$PhantomData$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$int$(a1,
      v1) ==
      id_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(a1,
      v1) ==
      deref_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(a2,
      v2))
  }
}

domain Ownership$Adt$core$$std$$ptr$$NonNull$1$I32  {
  
  function owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(a1: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
  v1: Version, a2: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$pointer
  axiom agree_snap_addr_of_Adt$core$$std$$ptr$$NonNull$1$I32_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$core$$std$$ptr$$NonNull$1$I32 ::
      { deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(base_addr,
      v) }
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(base_addr),
      v) ==
      get_memory_field_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$ConstPtr$I32(deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$pointer: Allocated ==> Allocated
  axiom ownership_of_field_f$pointer_from_Allocated_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version ::
      { owns_as_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(a),
      v))
  }
  
  // Ownership across statement of field f$pointer: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$pointer_from_Allocated_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$pointer: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$pointer_from_Allocated_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$ptr$$NonNull$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$ptr$$NonNull$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$ptr$$NonNull$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$ptr$$NonNull$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$core$$std$$ptr$$NonNull$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$core$$std$$ptr$$NonNull$1$I32
  axiom framing_definition_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(a,
      v1) ==
      deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$core$$std$$ptr$$NonNull$1$I32
  axiom same_id_shallow_definition_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$int$(a,
      v1) ==
      id_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$core$$std$$ptr$$NonNull$1$I32
  axiom same_id_shallow_definition_of_variant_0_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$NonNull$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(a),
      v1, v2))
  }
  
  // Move definition of Adt$core$$std$$ptr$$NonNull$1$I32
  axiom moved_definition_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a1: Address$Adt$core$$std$$ptr$$NonNull$1$I32, a2: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$int$(a1,
      v1) ==
      id_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(a1,
      v1) ==
      deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$core$$std$$ptr$$NonNull$1$I32
  axiom moved_definition_of_variant_0_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall a1: Address$Adt$core$$std$$ptr$$NonNull$1$I32, a2: Address$Adt$core$$std$$ptr$$NonNull$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(a1),
      v1, get_addr_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Address$ConstPtr$I32(a2),
      v2))
  }
}

domain Ownership$Adt$core$$std$$ptr$$Unique$1$I32  {
  
  function owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(a1: Address$Adt$core$$std$$ptr$$Unique$1$I32,
  v1: Version, a2: Address$Adt$core$$std$$ptr$$Unique$1$I32, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$pointer
  axiom agree_snap_addr_of_Adt$core$$std$$ptr$$Unique$1$I32_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(base_addr,
      v) }
      deref_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(base_addr),
      v) ==
      get_memory_field_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$_marker
  axiom agree_snap_addr_of_Adt$core$$std$$ptr$$Unique$1$I32_variant$0_field$1 {
    (forall v: Version, base_addr: Address$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(base_addr,
      v) }
      deref_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(base_addr),
      v) ==
      get_memory_field_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$pointer: Allocated ==> Allocated
  axiom ownership_of_field_f$pointer_from_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(r,
      get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(a),
      v))
  }
  
  // Ownership across statement of field f$pointer: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$pointer_from_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$pointer: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$pointer_from_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(a),
      v, v2))
  }
  
  // Ownership of field f$_marker: Allocated ==> Allocated
  axiom ownership_of_field_f$_marker_from_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version ::
      { owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__$int$$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__$int$$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(r,
      get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(a),
      v))
  }
  
  // Ownership across statement of field f$_marker: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$_marker_from_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$_marker: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$_marker_from_Allocated_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$ptr$$Unique$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$ptr$$Unique$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$ptr$$Unique$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$ptr$$Unique$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$core$$std$$ptr$$Unique$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$core$$std$$ptr$$Unique$1$I32
  axiom framing_definition_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(a,
      v1) ==
      deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$core$$std$$ptr$$Unique$1$I32
  axiom same_id_shallow_definition_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$int$(a,
      v1) ==
      id_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$core$$std$$ptr$$Unique$1$I32
  axiom same_id_shallow_definition_of_variant_0_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a: Address$Adt$core$$std$$ptr$$Unique$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(a),
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Version$$bool$(get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(a),
      v1, v2))
  }
  
  // Move definition of Adt$core$$std$$ptr$$Unique$1$I32
  axiom moved_definition_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a1: Address$Adt$core$$std$$ptr$$Unique$1$I32, a2: Address$Adt$core$$std$$ptr$$Unique$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$int$(a1,
      v1) ==
      id_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(a1,
      v1) ==
      deref_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$core$$std$$ptr$$Unique$1$I32
  axiom moved_definition_of_variant_0_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall a1: Address$Adt$core$$std$$ptr$$Unique$1$I32, a2: Address$Adt$core$$std$$ptr$$Unique$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$Address$Adt$core$$std$$ptr$$Unique$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$Address$Adt$core$$std$$ptr$$NonNull$1$I32$Version$$bool$(get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(a1),
      v1, get_addr_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$ptr$$NonNull$1$I32(a2),
      v2) &&
      move__Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$Address$Adt$core$$std$$marker$$PhantomData$1$I32$Version$$bool$(get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(a1),
      v1, get_addr_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__Address$Adt$core$$std$$ptr$$Unique$1$I32$Address$Adt$core$$std$$marker$$PhantomData$1$I32(a2),
      v2))
  }
}

domain Ownership$Bool  {
  
  function owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1: Address$Bool,
  v1: Version, a2: Address$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v),
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) &&
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Bool
  axiom framing_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) }
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) ==>
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v2))
  }
  
  // Shallow id framing definition of Bool
  axiom same_id_shallow_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Bool
  axiom same_id_shallow_definition_of_variant_0_of_Bool {
    true
  }
  
  // Move definition of Bool
  axiom moved_definition_of_Bool {
    (forall a1: Address$Bool, a2: Address$Bool, v1: Version, v2: Version ::
      { move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a1, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a2, v2) &&
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a1, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a2, v2))
  }
  
  // Move definition of variant 0 of Bool
  axiom moved_definition_of_variant_0_of_Bool {
    true
  }
}

domain Ownership$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32  {
  
  function owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(a1: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, a2: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_definition_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a,
      v1) ==
      deref_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom same_id_shallow_definition_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a,
      v1) ==
      id_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom moved_definition_of_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a1: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    a2: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { move__Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a1,
      v1) ==
      id_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a2,
      v2) &&
      deref_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a1,
      v1) ==
      deref_Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a2,
      v2))
  }
}

domain Ownership$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32  {
  
  function owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(a1: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v1: Version, a2: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v: Version ::
      { owns_as_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__$int$$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom framing_definition_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a,
      v1) ==
      deref_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom same_id_shallow_definition_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a,
      v1) ==
      id_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  axiom moved_definition_of_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32 {
    (forall a1: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    a2: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { move__Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a1,
      v1) ==
      id_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$$int$(a2,
      v2) &&
      deref_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a1,
      v1) ==
      deref_Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32__$TY$__Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32$Version$MemorySnapshot$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32(a2,
      v2))
  }
}

domain Ownership$ConstPtr$I32  {
  
  function owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(a1: Address$ConstPtr$I32,
  v1: Version, a2: Address$ConstPtr$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> ConstPtr$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of ConstPtr$I32
  axiom framing_definition_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a,
      v1) ==
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a,
      v2))
  }
  
  // Shallow id framing definition of ConstPtr$I32
  axiom same_id_shallow_definition_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a, v1) ==
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of ConstPtr$I32
  axiom same_id_shallow_definition_of_variant_0_of_ConstPtr$I32 {
    true
  }
  
  // Move definition of ConstPtr$I32
  axiom moved_definition_of_ConstPtr$I32 {
    (forall a1: Address$ConstPtr$I32, a2: Address$ConstPtr$I32, v1: Version,
    v2: Version ::
      { move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a1, v1) ==
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a2, v2) &&
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a1,
      v1) ==
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of ConstPtr$I32
  axiom moved_definition_of_variant_0_of_ConstPtr$I32 {
    true
  }
}

domain Ownership$I32  {
  
  function owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1: Address$I32,
  v1: Version, a2: Address$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v),
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) &&
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of I32
  axiom framing_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) }
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v2))
  }
  
  // Shallow id framing definition of I32
  axiom same_id_shallow_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of I32
  axiom same_id_shallow_definition_of_variant_0_of_I32 {
    true
  }
  
  // Move definition of I32
  axiom moved_definition_of_I32 {
    (forall a1: Address$I32, a2: Address$I32, v1: Version, v2: Version ::
      { move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a1, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a2, v2) &&
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a1, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a2, v2))
  }
  
  // Move definition of variant 0 of I32
  axiom moved_definition_of_variant_0_of_I32 {
    true
  }
}

domain Ownership$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v1: Version, a2: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom framing_definition_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v1) ==
      deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom same_id_shallow_definition_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a,
      v1) ==
      id_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    true
  }
  
  // Move definition of MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom moved_definition_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a1: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    a2: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { move__MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a1,
      v1) ==
      id_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$int$(a2,
      v2) &&
      deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a1,
      v1) ==
      deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom moved_definition_of_variant_0_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    true
  }
  
  // Invariant of the owning type MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  axiom owning_type_invariant_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v: Version ::
      { owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(r,
      a, v) ==>
      deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall a: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(a,
      v2)))
  }
}

domain Ownership$MutRef$I32  {
  
  function owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(a1: Address$MutRef$I32,
  v1: Version, a2: Address$MutRef$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$I32
  axiom framing_definition_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v1) ==
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$I32
  axiom same_id_shallow_definition_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a, v1) ==
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$I32 {
    true
  }
  
  // Move definition of MutRef$I32
  axiom moved_definition_of_MutRef$I32 {
    (forall a1: Address$MutRef$I32, a2: Address$MutRef$I32, v1: Version, v2: Version ::
      { move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a1, v1) ==
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a2, v2) &&
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a1,
      v1) ==
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$I32
  axiom moved_definition_of_variant_0_of_MutRef$I32 {
    true
  }
  
  // Invariant of the owning type MutRef$I32
  axiom owning_type_invariant_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v2)))
  }
}

domain Ownership$MutRef$Tuple2$I32$I32  {
  
  function owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Tuple2$I32$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a: Address$MutRef$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Address$MutRef$Tuple2$I32$I32$Version$$bool$(a1: Address$MutRef$Tuple2$I32$I32,
  v1: Version, a2: Address$MutRef$Tuple2$I32$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Tuple2$I32$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Tuple2$I32$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Tuple2$I32$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Tuple2$I32$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Tuple2$I32$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Tuple2$I32$I32
  axiom framing_definition_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v1) ==
      deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Tuple2$I32$I32
  axiom same_id_shallow_definition_of_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$$int$(a,
      v1) ==
      id_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Tuple2$I32$I32
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Tuple2$I32$I32 {
    true
  }
  
  // Move definition of MutRef$Tuple2$I32$I32
  axiom moved_definition_of_MutRef$Tuple2$I32$I32 {
    (forall a1: Address$MutRef$Tuple2$I32$I32, a2: Address$MutRef$Tuple2$I32$I32,
    v1: Version, v2: Version ::
      { move__MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Address$MutRef$Tuple2$I32$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Address$MutRef$Tuple2$I32$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$$int$(a1,
      v1) ==
      id_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$$int$(a2,
      v2) &&
      deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a1,
      v1) ==
      deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Tuple2$I32$I32
  axiom moved_definition_of_variant_0_of_MutRef$Tuple2$I32$I32 {
    true
  }
  
  // Invariant of the owning type MutRef$Tuple2$I32$I32
  axiom owning_type_invariant_of_MutRef$Tuple2$I32$I32 {
    (forall r: Int, a: Address$MutRef$Tuple2$I32$I32, v: Version ::
      { owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Tuple2$I32$I32 {
    (forall a: Address$MutRef$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(a,
      v2)))
  }
}

domain Ownership$Never  {
  
  function owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1: Address$Never,
  v1: Version, a2: Address$Never, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Call_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Never
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Never
  axiom framing_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) }
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) ==>
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v2))
  }
  
  // Shallow id framing definition of Never
  axiom same_id_shallow_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a, v2))
  }
  
  // Move definition of Never
  axiom moved_definition_of_Never {
    (forall a1: Address$Never, a2: Address$Never, v1: Version, v2: Version ::
      { move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) }
      move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a1, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a2, v2) &&
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a1, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a2, v2))
  }
}

domain Ownership$SharedRef$MutRef$I32  {
  
  function owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$MutRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Address$SharedRef$MutRef$I32$Version$$bool$(a1: Address$SharedRef$MutRef$I32,
  v1: Version, a2: Address$SharedRef$MutRef$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_NoReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_NoWriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$MutRef$I32
  axiom framing_definition_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v1) ==
      deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$MutRef$I32
  axiom same_id_shallow_definition_of_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$$int$(a,
      v1) ==
      id_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$MutRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$MutRef$I32 {
    true
  }
  
  // Move definition of SharedRef$MutRef$I32
  axiom moved_definition_of_SharedRef$MutRef$I32 {
    (forall a1: Address$SharedRef$MutRef$I32, a2: Address$SharedRef$MutRef$I32,
    v1: Version, v2: Version ::
      { move__SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Address$SharedRef$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Address$SharedRef$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$$int$(a1,
      v1) ==
      id_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$$int$(a2,
      v2) &&
      deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a1,
      v1) ==
      deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$MutRef$I32
  axiom moved_definition_of_variant_0_of_SharedRef$MutRef$I32 {
    true
  }
  
  // Invariant of the owning type SharedRef$MutRef$I32
  axiom owning_type_invariant_of_SharedRef$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$MutRef$I32, v: Version ::
      { owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$MutRef$I32__$TY$__$int$$Address$SharedRef$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$MutRef$I32 {
    (forall a: Address$SharedRef$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$Address$MutRef$I32(deref_SharedRef$MutRef$I32__$TY$__Address$SharedRef$MutRef$I32$Version$MemorySnapshot$SharedRef$MutRef$I32(a,
      v2)))
  }
}

domain Ownership$Tuple0  {
  
  function owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1: Address$Tuple0,
  v1: Version, a2: Address$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple0
  axiom framing_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1,
      v2) }
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) ==>
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v2))
  }
  
  // Shallow id framing definition of Tuple0
  axiom same_id_shallow_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple0
  axiom same_id_shallow_definition_of_variant_0_of_Tuple0 {
    true
  }
  
  // Move definition of Tuple0
  axiom moved_definition_of_Tuple0 {
    (forall a1: Address$Tuple0, a2: Address$Tuple0, v1: Version, v2: Version ::
      { move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a1, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a2, v2) &&
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a1, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a2, v2))
  }
  
  // Move definition of variant 0 of Tuple0
  axiom moved_definition_of_variant_0_of_Tuple0 {
    true
  }
}

domain Ownership$Tuple2$I32$I32  {
  
  function owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r: Int,
  a: Address$Tuple2$I32$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a: Address$Tuple2$I32$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Address$Tuple2$I32$I32$Version$$bool$(a1: Address$Tuple2$I32$I32,
  v1: Version, a2: Address$Tuple2$I32$I32, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$0
  axiom agree_snap_addr_of_Tuple2$I32$I32_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Tuple2$I32$I32 ::
      { deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(base_addr,
      v) }
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base_addr),
      v) ==
      get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$1
  axiom agree_snap_addr_of_Tuple2$I32$I32_variant$0_field$1 {
    (forall v: Version, base_addr: Address$Tuple2$I32$I32 ::
      { deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(base_addr,
      v) }
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(base_addr),
      v) ==
      get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_NoReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Tuple2$I32$I32 {
    (forall r: Int, o: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_NoWriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$0: WriteRef ==> WriteRef
  axiom ownership_of_field_f$0_from_WriteRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_f$0_from_WriteRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_f$0_from_WriteRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$0: LocalRef ==> LocalRef
  axiom ownership_of_field_f$0_from_LocalRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_f$0_from_LocalRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_f$0_from_LocalRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$0: ReadRef ==> ReadRef
  axiom ownership_of_field_f$0_from_ReadRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_f$0_from_ReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_f$0_from_ReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$0: Write ==> Write
  axiom ownership_of_field_f$0_from_Write_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: Write ==> Write
  axiom ownership_across_stmt_of_field_f$0_from_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: Write ==> Write
  axiom ownership_across_call_of_field_f$0_from_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$0: Allocated ==> Allocated
  axiom ownership_of_field_f$0_from_Allocated_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$0_from_Allocated_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$0_from_Allocated_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$0: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_f$0_from_DeeplyUnreachable_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_f$0_from_DeeplyUnreachable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_f$0_from_DeeplyUnreachable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$0: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_of_field_f$0_from_ShallowlyOwned_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_ShallowlyOwned_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ShallowlyOwned_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ShallowlyOwned_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_across_stmt_of_field_f$0_from_ShallowlyOwned_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_across_call_of_field_f$0_from_ShallowlyOwned_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: WriteRef ==> WriteRef
  axiom ownership_of_field_f$1_from_WriteRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_f$1_from_WriteRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_f$1_from_WriteRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: LocalRef ==> LocalRef
  axiom ownership_of_field_f$1_from_LocalRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_f$1_from_LocalRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_f$1_from_LocalRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: ReadRef ==> ReadRef
  axiom ownership_of_field_f$1_from_ReadRef_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_f$1_from_ReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_f$1_from_ReadRef_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: Write ==> Write
  axiom ownership_of_field_f$1_from_Write_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: Write ==> Write
  axiom ownership_across_stmt_of_field_f$1_from_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: Write ==> Write
  axiom ownership_across_call_of_field_f$1_from_Write_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: Allocated ==> Allocated
  axiom ownership_of_field_f$1_from_Allocated_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$1_from_Allocated_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$1_from_Allocated_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_f$1_from_DeeplyUnreachable_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_f$1_from_DeeplyUnreachable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_f$1_from_DeeplyUnreachable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership of field f$1: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_of_field_f$1_from_ShallowlyOwned_of_Tuple2$I32$I32 {
    (forall r: Int, a: Address$Tuple2$I32$I32, v: Version ::
      { owns_as_ShallowlyOwned_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) }
      owns_as_ShallowlyOwned_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ShallowlyOwned_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$1: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_across_stmt_of_field_f$1_from_ShallowlyOwned_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$1: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_across_call_of_field_f$1_from_ShallowlyOwned_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ShallowlyOwned_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple2$I32$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple2$I32$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple2$I32$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple2$I32$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple2$I32$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple2$I32$I32
  axiom framing_definition_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(a,
      v1) ==
      deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Tuple2$I32$I32
  axiom same_id_shallow_definition_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$$int$(a, v1) ==
      id_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple2$I32$I32
  axiom same_id_shallow_definition_of_variant_0_of_Tuple2$I32$I32 {
    (forall a: Address$Tuple2$I32$I32, v1: Version, v2: Version ::
      { same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a),
      v1, v2))
  }
  
  // Move definition of Tuple2$I32$I32
  axiom moved_definition_of_Tuple2$I32$I32 {
    (forall a1: Address$Tuple2$I32$I32, a2: Address$Tuple2$I32$I32, v1: Version,
    v2: Version ::
      { move__Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Address$Tuple2$I32$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Address$Tuple2$I32$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$$int$(a1, v1) ==
      id_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$$int$(a2, v2) &&
      deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(a1,
      v1) ==
      deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of Tuple2$I32$I32
  axiom moved_definition_of_variant_0_of_Tuple2$I32$I32 {
    (forall a1: Address$Tuple2$I32$I32, a2: Address$Tuple2$I32$I32, v1: Version,
    v2: Version ::
      { move__Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Address$Tuple2$I32$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Address$Tuple2$I32$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a1),
      v1, get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a2),
      v2) &&
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a1),
      v1, get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(a2),
      v2))
  }
}

domain ValueSnapshot$Adt$alloc$$std$$alloc$$Global  {
  
  function convert_from_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(snap: MemorySnapshot$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$Adt$alloc$$std$$alloc$$Global 
  
  function convert_to_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(snap: ValueSnapshot$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$Adt$alloc$$std$$alloc$$Global 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$alloc$$std$$alloc$$Global {
    (forall value_snapshot: ValueSnapshot$Adt$alloc$$std$$alloc$$Global ::
      { convert_from_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(convert_to_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(value_snapshot)) }
      convert_from_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(convert_to_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$alloc$$std$$alloc$$Global {
    (forall memory_snapshot: MemorySnapshot$Adt$alloc$$std$$alloc$$Global ::
      { convert_to_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(convert_from_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(memory_snapshot)) }
      convert_to_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$alloc$$Global(convert_from_memory_of_Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function new_value_snap_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$0: ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32,
  f$1: ValueSnapshot$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function get_value_field_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(snap: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function get_value_field_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(snap: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$Adt$alloc$$std$$alloc$$Global 
  
  function convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(snap: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function convert_to_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(snap: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  // Definition of the existence of the constructor of variant Box
  axiom value_snapshot_existence_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0 {
    (forall self: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { get_value_field_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(self) }
      { get_value_field_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(self) }
      self ==
      new_value_snap_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(get_value_field_f$0_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(self),
      get_value_field_f$1_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$alloc$$Global(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall value_snapshot: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(convert_to_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(value_snapshot)) }
      convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(convert_to_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global {
    (forall memory_snapshot: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { convert_to_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(memory_snapshot)) }
      convert_to_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32  {
  
  function convert_from_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(snap: MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32): ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 
  
  function convert_to_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(snap: ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32): MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall value_snapshot: ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 ::
      { convert_from_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(convert_to_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(value_snapshot)) }
      convert_from_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(convert_to_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32 {
    (forall memory_snapshot: MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 ::
      { convert_to_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(convert_from_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(memory_snapshot)) }
      convert_to_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(convert_from_memory_of_Adt$core$$std$$marker$$PhantomData$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32  {
  
  function new_value_snap_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$ConstPtr$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(f$pointer: ValueSnapshot$ConstPtr$I32): ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function get_value_field_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$ConstPtr$I32(snap: ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32): ValueSnapshot$ConstPtr$I32 
  
  function convert_from_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(snap: MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32): ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function convert_to_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(snap: ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32): MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  // Definition of the existence of the constructor of variant NonNull
  axiom value_snapshot_existence_of_Adt$core$$std$$ptr$$NonNull$1$I32_variant$0 {
    (forall self: ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 ::
      { get_value_field_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$ConstPtr$I32(self) }
      self ==
      new_value_snap_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$ConstPtr$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(get_value_field_f$pointer_of_Adt$core$$std$$ptr$$NonNull$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$ConstPtr$I32(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall value_snapshot: ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 ::
      { convert_from_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(convert_to_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(value_snapshot)) }
      convert_from_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(convert_to_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32 {
    (forall memory_snapshot: MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 ::
      { convert_to_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(convert_from_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(memory_snapshot)) }
      convert_to_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(convert_from_memory_of_Adt$core$$std$$ptr$$NonNull$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32  {
  
  function new_value_snap_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(f$pointer: ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32,
  f$_marker: ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32): ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function get_value_field_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(snap: ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32): ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32 
  
  function get_value_field_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(snap: ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32): ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32 
  
  function convert_from_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(snap: MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32): ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  function convert_to_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(snap: ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32): MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32 
  
  // Definition of the existence of the constructor of variant Unique
  axiom value_snapshot_existence_of_Adt$core$$std$$ptr$$Unique$1$I32_variant$0 {
    (forall self: ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { get_value_field_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(self) }
      { get_value_field_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(self) }
      self ==
      new_value_snap_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(get_value_field_f$pointer_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$NonNull$1$I32(self),
      get_value_field_f$_marker_of_Adt$core$$std$$ptr$$Unique$1$I32_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$marker$$PhantomData$1$I32(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall value_snapshot: ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { convert_from_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(convert_to_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(value_snapshot)) }
      convert_from_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(convert_to_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$core$$std$$ptr$$Unique$1$I32 {
    (forall memory_snapshot: MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32 ::
      { convert_to_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(convert_from_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(memory_snapshot)) }
      convert_to_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32$MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32(convert_from_memory_of_Adt$core$$std$$ptr$$Unique$1$I32__$TY$__MemorySnapshot$Adt$core$$std$$ptr$$Unique$1$I32$ValueSnapshot$Adt$core$$std$$ptr$$Unique$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Bool  {
  
  function new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(value: Bool): ValueSnapshot$Bool 
  
  function get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(snap: ValueSnapshot$Bool): Bool 
  
  function convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(snap: MemorySnapshot$Bool): ValueSnapshot$Bool 
  
  function convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(snap: ValueSnapshot$Bool): MemorySnapshot$Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Bool_variant$0 {
    (forall self: ValueSnapshot$Bool ::
      { get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self) }
      self ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Bool_variant$0 {
    (forall f$value: Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) }
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Bool_variant$0 {
    (forall v$value: Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) }
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Bool {
    (forall value_snapshot: ValueSnapshot$Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Bool {
    (forall memory_snapshot: MemorySnapshot$Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$I32  {
  
  function new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(target: Address$I32): ValueSnapshot$ConstPtr$I32 
  
  function get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(snap: ValueSnapshot$ConstPtr$I32): Address$I32 
  
  function convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(snap: MemorySnapshot$ConstPtr$I32): ValueSnapshot$ConstPtr$I32 
  
  function convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(snap: ValueSnapshot$ConstPtr$I32): MemorySnapshot$ConstPtr$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$I32_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$I32 ::
      { get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(self) }
      self ==
      new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target) }
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$I32_variant$0 {
    (forall f$target: Address$I32 ::
      { convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target)) }
      { new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target) }
      convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target)) ==
      new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$I32_variant$0 {
    (forall v$target: Address$I32 ::
      { convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(v$target)) }
      { new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(v$target) }
      convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(v$target)) ==
      new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$I32 {
    (forall value_snapshot: ValueSnapshot$ConstPtr$I32 ::
      { convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(value_snapshot)) }
      convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$I32 {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$I32 ::
      { convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$I32  {
  
  function new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(value: Int): ValueSnapshot$I32 
  
  function get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(snap: ValueSnapshot$I32): Int 
  
  function convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(snap: MemorySnapshot$I32): ValueSnapshot$I32 
  
  function convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(snap: ValueSnapshot$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_I32_variant$0 {
    (forall self: ValueSnapshot$I32 ::
      { get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self) }
      self ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_I32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) }
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_I32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) }
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_I32 {
    (forall value_snapshot: ValueSnapshot$I32 ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_I32 {
    (forall memory_snapshot: MemorySnapshot$I32 ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$I32  {
  
  function new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(target: Address$I32): ValueSnapshot$MutPtr$I32 
  
  function get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(snap: ValueSnapshot$MutPtr$I32): Address$I32 
  
  function convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(snap: MemorySnapshot$MutPtr$I32): ValueSnapshot$MutPtr$I32 
  
  function convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(snap: ValueSnapshot$MutPtr$I32): MemorySnapshot$MutPtr$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$I32_variant$0 {
    (forall self: ValueSnapshot$MutPtr$I32 ::
      { get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(self) }
      self ==
      new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target) }
      get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$I32_variant$0 {
    (forall f$target: Address$I32 ::
      { convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target)) }
      { new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target) }
      convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target)) ==
      new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$I32_variant$0 {
    (forall v$target: Address$I32 ::
      { convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(v$target)) }
      { new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(v$target) }
      convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(v$target)) ==
      new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$I32 {
    (forall value_snapshot: ValueSnapshot$MutPtr$I32 ::
      { convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(value_snapshot)) }
      convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$I32 {
    (forall memory_snapshot: MemorySnapshot$MutPtr$I32 ::
      { convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(memory_snapshot)) }
      convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global  {
  
  function new_value_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(target_snapshot: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(snap: ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  function convert_from_memory_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(snap: MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global): ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0 {
    (forall self: ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(self) }
      self ==
      new_value_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { new_value_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(new_value_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global_variant$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global,
    f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global ::
      { convert_from_memory_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(convert_from_memory_of_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$ValueSnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(f$target_snapshot)))
  }
}

domain ValueSnapshot$MutRef$I32  {
  
  function new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(target_snapshot: ValueSnapshot$I32): ValueSnapshot$MutRef$I32 
  
  function get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(snap: ValueSnapshot$MutRef$I32): ValueSnapshot$I32 
  
  function convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(snap: MemorySnapshot$MutRef$I32): ValueSnapshot$MutRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$I32_variant$0 {
    (forall self: ValueSnapshot$MutRef$I32 ::
      { get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(self) }
      self ==
      new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$I32 ::
      { new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$I32_variant$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$target_snapshot)) }
      convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$MutRef$Tuple2$I32$I32  {
  
  function new_value_snap_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(target_snapshot: ValueSnapshot$Tuple2$I32$I32): ValueSnapshot$MutRef$Tuple2$I32$I32 
  
  function get_value_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(snap: ValueSnapshot$MutRef$Tuple2$I32$I32): ValueSnapshot$Tuple2$I32$I32 
  
  function convert_from_memory_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(snap: MemorySnapshot$MutRef$Tuple2$I32$I32): ValueSnapshot$MutRef$Tuple2$I32$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Tuple2$I32$I32_variant$0 {
    (forall self: ValueSnapshot$MutRef$Tuple2$I32$I32 ::
      { get_value_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(self) }
      self ==
      new_value_snap_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(get_value_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Tuple2$I32$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Tuple2$I32$I32 ::
      { new_value_snap_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(new_value_snap_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Tuple2$I32$I32_variant$0 {
    (forall f$target_address: Address$Tuple2$I32$I32, f$target_snapshot: MemorySnapshot$Tuple2$I32$I32 ::
      { convert_from_memory_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$MutRef$Tuple2$I32$I32(convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$MutRef$I32  {
  
  function new_value_snap_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(target_snapshot: ValueSnapshot$MutRef$I32): ValueSnapshot$SharedRef$MutRef$I32 
  
  function get_value_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$SharedRef$MutRef$I32$ValueSnapshot$MutRef$I32(snap: ValueSnapshot$SharedRef$MutRef$I32): ValueSnapshot$MutRef$I32 
  
  function convert_from_memory_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(snap: MemorySnapshot$SharedRef$MutRef$I32): ValueSnapshot$SharedRef$MutRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$MutRef$I32_variant$0 {
    (forall self: ValueSnapshot$SharedRef$MutRef$I32 ::
      { get_value_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$SharedRef$MutRef$I32$ValueSnapshot$MutRef$I32(self) }
      self ==
      new_value_snap_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(get_value_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$SharedRef$MutRef$I32$ValueSnapshot$MutRef$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$MutRef$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$MutRef$I32 ::
      { new_value_snap_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$SharedRef$MutRef$I32$ValueSnapshot$MutRef$I32(new_value_snap_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$MutRef$I32_variant$0 {
    (forall f$target_address: Address$MutRef$I32, f$target_snapshot: MemorySnapshot$MutRef$I32 ::
      { convert_from_memory_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$SharedRef$MutRef$I32(convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$Tuple0  {
  
  function new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0(): ValueSnapshot$Tuple0 
  
  function convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(snap: MemorySnapshot$Tuple0): ValueSnapshot$Tuple0 
  
  function convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(snap: ValueSnapshot$Tuple0): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: ValueSnapshot$Tuple0 ::self ==
      new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0())
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple0_variant$0 {
    convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()) ==
    new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple0_variant$0 {
    convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple0 {
    (forall value_snapshot: ValueSnapshot$Tuple0 ::
      { convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) }
      convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Tuple0 ::
      { convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Tuple2$I32$I32  {
  
  function new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(f$0: ValueSnapshot$I32,
  f$1: ValueSnapshot$I32): ValueSnapshot$Tuple2$I32$I32 
  
  function get_value_field_f$0_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(snap: ValueSnapshot$Tuple2$I32$I32): ValueSnapshot$I32 
  
  function get_value_field_f$1_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(snap: ValueSnapshot$Tuple2$I32$I32): ValueSnapshot$I32 
  
  function convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(snap: MemorySnapshot$Tuple2$I32$I32): ValueSnapshot$Tuple2$I32$I32 
  
  function convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(snap: ValueSnapshot$Tuple2$I32$I32): MemorySnapshot$Tuple2$I32$I32 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple2$I32$I32_variant$0 {
    (forall self: ValueSnapshot$Tuple2$I32$I32 ::
      { get_value_field_f$0_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(self) }
      { get_value_field_f$1_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(self) }
      self ==
      new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(get_value_field_f$0_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(self),
      get_value_field_f$1_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(self)))
  }
  
  // Definition of destructor, field f$0
  axiom value_snapshot_definition_of_Tuple2$I32$I32_variant$0_field$0 {
    (forall f$f$0: ValueSnapshot$I32, f$f$1: ValueSnapshot$I32 ::
      { new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1) }
      get_value_field_f$0_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1)) ==
      f$f$0)
  }
  
  // Definition of destructor, field f$1
  axiom value_snapshot_definition_of_Tuple2$I32$I32_variant$0_field$1 {
    (forall f$f$0: ValueSnapshot$I32, f$f$1: ValueSnapshot$I32 ::
      { new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1) }
      get_value_field_f$1_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$ValueSnapshot$I32(new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1)) ==
      f$f$1)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple2$I32$I32_variant$0 {
    (forall f$f$0: MemorySnapshot$I32, f$f$1: MemorySnapshot$I32 ::
      { convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1)) }
      { new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$f$0),
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$f$1)) }
      convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(f$f$0,
      f$f$1)) ==
      new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$f$0),
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$f$1)))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple2$I32$I32_variant$0 {
    (forall v$f$0: ValueSnapshot$I32, v$f$1: ValueSnapshot$I32 ::
      { convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(v$f$0,
      v$f$1)) }
      { new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(v$f$0),
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(v$f$1)) }
      convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_value_snap_of_Tuple2$I32$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$I32$ValueSnapshot$Tuple2$I32$I32(v$f$0,
      v$f$1)) ==
      new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(v$f$0),
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(v$f$1)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple2$I32$I32 {
    (forall value_snapshot: ValueSnapshot$Tuple2$I32$I32 ::
      { convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(value_snapshot)) }
      convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple2$I32$I32 {
    (forall memory_snapshot: MemorySnapshot$Tuple2$I32$I32 ::
      { convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(memory_snapshot)) }
      convert_to_memory_of_Tuple2$I32$I32__$TY$__ValueSnapshot$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(convert_from_memory_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$ValueSnapshot$Tuple2$I32$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain Version  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

function read$(): Perm
  ensures none < result
  ensures result < write


method m_set_42()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::set_42"
  
  // Library ownership axioms of 3 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] (*_1) = const 42_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)
  // Target of _1 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version))
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version)))) ==
    get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    pre_version)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
      version))) ==
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))))))))
  goto end_of_method
  label end_of_method
}

method m_main()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  
  label start
  // ========== start ==========
  // Def path: "pledges::main"
  
  // Library ownership axioms of 1 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$Tuple0
  var _5: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::test_2"
  
  // Library ownership axioms of 3 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] (*_1) = const 0_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0)
  // Target of _1 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version))
  // Framing facts
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = will_be_42(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
      old_version)))) ==
      get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
      version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _5 = move _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)
  // Place _2 has been moved
  inhale move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(_2,
    old_version, _5, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _4 = consume::<&mut i32>(move _5) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_5: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::will_be_42
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  // Applying pledges of function pledges::will_be_42
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_wrap_unsound_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$MutRef$I32
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::wrap_unsound_1"
  
  // Library ownership axioms of 2 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_4: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _3, version)
  
  // [mir] _4 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_4,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_4: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_4: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _3, version)
  
  // [mir] _3 = unsound(move _4) -> [return: bb1, unwind: bb2]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_4: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_4: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_4: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_4,
    old_version))
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _4, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_4)
  
  // [mir] FakeRead(ForLet(None), _3)
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = &mut (*_3)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version)))
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  
  // [mir] _0 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_0,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Applying pledges of function pledges::unsound
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  // Applying pledges of function pledges::unsound
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  // Framing facts
  // assume framing of WriteRef(_0: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_good2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Tuple2$I32$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$Tuple2$I32$I32
  var _4: Address$MutRef$Tuple2$I32$I32
  var _5: Address$Tuple0
  var _6: Address$MutRef$I32
  var _7: Address$Tuple0
  var _8: Address$Bool
  var _9: Address$Bool
  var _10: Address$Bool
  var _11: Address$I32
  var _12: Address$Bool
  var _13: Address$I32
  var _14: Address$Never
  var _15: Address$Tuple0
  var _16: Address$Bool
  var _17: Address$Never
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$Tuple2$I32$I32
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  
  label start
  // ========== start ==========
  // Def path: "pledges::good2"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = (const 123_i32, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    version) ==
    new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123),
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _4 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_1,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_4: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = &mut (*_4)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = get_mut_first(move _3) -> [return: bb1, unwind: bb10]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut (i32, i32))
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version)))) ==
    get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version)))))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))), get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut (i32, i32))
  inhale frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] (*_2) = const 42_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)
  // Target of _2 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version))
  // Framing facts
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_6: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  
  // [mir] _5 = expire(move _6) -> [return: bb2, unwind: bb10]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_6: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_6: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    old_version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _6, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_11: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _11,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  
  // [mir] _11 = (_1.0: i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_11, version) ==
    get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef((_1.1: i32): i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.0: i32): i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_11: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_11: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _11,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(8,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _9, version)
  
  // [mir] _10 = Eq(move _11, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_11,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_11)
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  
  // [mir] switchInt(move _10) -> [0: bb3, otherwise: bb4]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (!__t0) {
    goto l2
  }
  goto l1
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  
  // [mir] _9 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _9,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(8,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _9, version)
  
  // [mir] goto -> bb5
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_9: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  goto bb5
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_13: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _13,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(8,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _9, version)
  
  // [mir] _13 = (_1.1: i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_13, version) ==
    get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef((_1.0: i32): i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.1: i32): i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_13: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _13,
    version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _13,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(9,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _9, version)
  
  // [mir] _12 = Eq(move _13, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_13,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_13,
    old_version, version)
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _12,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(8,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _9, version)
  
  // [mir] _9 = move _12
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9, version) ==
    deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12, old_version)
  // Place _12 has been moved
  inhale move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(_12,
    old_version, _9, version)
  // Framing facts
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _12,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _9,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(9,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _9, version)
  
  // [mir] goto -> bb5
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_9: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  goto bb5
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_12)
  
  // [mir] StorageDead(_10)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _9,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  
  // [mir] _8 = Not(move _9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // Ownership facts
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _8,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  
  // [mir] switchInt(move _8) -> [0: bb7, otherwise: bb6]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l4
  }
  goto l3
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageLive(_14)
  
  // Ownership facts
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _8,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_14: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(3,
    _14, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  
  // [mir] _14 = core::panicking::panic(const "assertion failed: x.0 == 42 && x.1 == 42") -> bb10
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: x.0 == 42 && x.1 == 42"
  assert false
  // Framing facts
  // assume framing of WriteRef(_8: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb7
  // ========== bb7 ==========
  
  // Ownership facts
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _8,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  
  // [mir] _7 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_7,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_8: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageLive(_15)
  
  // [mir] StorageLive(_16)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _16, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _15, version)
  
  // [mir] _16 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _16,
    version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _16, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _15, version)
  
  // [mir] switchInt(move _16) -> [0: bb9, otherwise: bb8]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t2) {
    goto l6
  }
  goto l5
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageLive(_17)
  
  // Ownership facts
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _16,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_17: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(3,
    _17, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _16, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _15, version)
  
  // [mir] _17 = core::panicking::panic(const "assertion failed: false") -> bb10
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb9
  // ========== bb9 ==========
  
  // Ownership facts
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _16,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _16, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _15, version)
  
  // [mir] _15 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_15,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_16)
  
  // [mir] StorageDead(_15)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb2 --> bb4
  goto bb4
  
  label l2
  // ========== l2 ==========
  // MIR edge bb2 --> bb3
  goto bb3
  
  label l3
  // ========== l3 ==========
  // MIR edge bb5 --> bb7
  goto bb7
  
  label l4
  // ========== l4 ==========
  // MIR edge bb5 --> bb6
  goto bb6
  
  label l5
  // ========== l5 ==========
  // MIR edge bb7 --> bb9
  goto bb9
  
  label l6
  // ========== l6 ==========
  // MIR edge bb7 --> bb8
  goto bb8
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_unsound_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$Tuple0
  var _5: Address$Bool
  var _6: Address$Never
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "pledges::test_unsound_1"
  
  // Library ownership axioms of 5 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = assume_false_on_expiry(move _3) -> [return: bb1, unwind: bb4]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _4, version)
  
  // [mir] _5 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] switchInt(move _5) -> [0: bb3, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l2
  }
  goto l1
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_6: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = core::panicking::panic(const "assertion failed: false") -> bb4
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  goto end_of_method
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _4 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_4,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // Applying pledges of function pledges::assume_false_on_expiry
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  // Applying pledges of function pledges::assume_false_on_expiry
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  goto bb1
  
  label l1
  // ========== l1 ==========
  // MIR edge bb1 --> bb3
  goto bb3
  
  label l2
  // ========== l2 ==========
  // MIR edge bb1 --> bb2
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_4()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$Tuple0
  var _5: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::test_4"
  
  // Library ownership axioms of 3 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] (*_1) = const 0_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0)
  // Target of _1 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version))
  // Framing facts
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = will_be_0(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
      old_version)))) ==
      get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
      version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _5 = move _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)
  // Place _2 has been moved
  inhale move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(_2,
    old_version, _5, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _4 = consume::<&mut i32>(move _5) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_5: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::will_be_0
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  // Applying pledges of function pledges::will_be_0
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$Tuple0
  var _5: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::test_1"
  
  // Library ownership axioms of 3 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] (*_1) = const 0_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0)
  // Target of _1 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version))
  // Framing facts
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = will_be_42(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
      old_version)))) ==
      get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
      version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _5 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _4 = set_42(move _5) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_5: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
    version)))) ==
    get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
    old_version)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
      version))) ==
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::will_be_42
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  // Applying pledges of function pledges::will_be_42
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Tuple2$I32$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$Tuple2$I32$I32
  var _4: Address$MutRef$Tuple2$I32$I32
  var _5: Address$Tuple0
  var _6: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$Tuple2$I32$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::bad2"
  
  // Library ownership axioms of 5 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = (const 42_i32, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    version) ==
    new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42),
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _4 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_1,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_4: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = &mut (*_4)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = get_mut_first(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut (i32, i32))
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version)))) ==
    get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version)))))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))), get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut (i32, i32))
  inhale frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] (*_2) = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Target of _2 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version))
  // Framing facts
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_6: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  
  // [mir] _5 = expire(move _6) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_6: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_6: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    old_version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _6, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_expire()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::expire"
  
  // Library ownership axioms of 3 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    pre_version)))))))
  goto end_of_method
  label end_of_method
}

method m_test_before_expiry() returns (_0: Ref)
{
  
  label stub
  // ========== stub ==========
  // Def path: "pledges::test_before_expiry"
  // Span: tests/verify_safe_clients/fail/dev_tests/pledges.rs:11:1: 13:2 (#0)
  goto end_of_method
  label end_of_method
}

method m_good1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Tuple2$I32$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$Tuple2$I32$I32
  var _4: Address$MutRef$Tuple2$I32$I32
  var _5: Address$Tuple0
  var _6: Address$Bool
  var _7: Address$Closure$pledges$$good1$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  var _8: Address$SharedRef$MutRef$I32
  var _9: Address$Tuple0
  var _10: Address$MutRef$I32
  var _11: Address$Tuple0
  var _12: Address$Bool
  var _13: Address$Bool
  var _14: Address$Bool
  var _15: Address$I32
  var _16: Address$Bool
  var _17: Address$I32
  var _18: Address$Never
  var _19: Address$Tuple0
  var _20: Address$Bool
  var _21: Address$Never
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$Tuple2$I32$I32
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  
  label start
  // ========== start ==========
  // Def path: "pledges::good1"
  
  // Library ownership axioms of 9 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = (const 42_i32, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    version) ==
    new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42),
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _4 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_1,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_4: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = &mut (*_4)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = get_mut_first(move _3) -> [return: bb1, unwind: bb13]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut (i32, i32))
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version)))) ==
    get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version)))))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))), get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut (i32, i32))
  inhale frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_6, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  
  // [mir] switchInt(move _6) -> [0: bb3, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  // Encoding of Prusti specification block bb2
  // Source: prusti_assert!(*y == 42)
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(_2,
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb3
  
  label bb10
  // ========== bb10 ==========
  
  // Ownership facts
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _12,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _12, version)
  
  // [mir] _11 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_11,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_12)
  
  // [mir] StorageDead(_11)
  
  // [mir] StorageLive(_19)
  
  // [mir] StorageLive(_20)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _20, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_19: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  
  // [mir] _20 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_20, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_20: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _20,
    version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _20, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_19: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  
  // [mir] switchInt(move _20) -> [0: bb12, otherwise: bb11]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_20,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t2) {
    goto l6
  }
  goto l5
  
  label bb11
  // ========== bb11 ==========
  
  // [mir] StorageLive(_21)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_20: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _20,
    version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _20, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_19: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  // assume Allocated(_21: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _21, version)
  
  // [mir] _21 = core::panicking::panic(const "assertion failed: false") -> bb13
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_20: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_20,
    old_version, version)
  goto end_of_method
  
  label bb12
  // ========== bb12 ==========
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_20: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _20,
    version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _20, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_19: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  
  // [mir] _19 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_19,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_20: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_20,
    old_version, version)
  
  // [mir] StorageDead(_20)
  
  // [mir] StorageDead(_19)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  
  // [mir] _5 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_5,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_5: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _5, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _6, version)
  
  // [mir] goto -> bb4
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_5: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_5,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_10: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _10, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _9, version)
  
  // [mir] _10 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_10,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_10: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _10, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_10: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _10, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _9, version)
  
  // [mir] _9 = expire(move _10) -> [return: bb5, unwind: bb13]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_10: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_10,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_10: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _10, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_10: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _10, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _9, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_10,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_10,
    old_version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _10, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_10,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // [mir] StorageLive(_14)
  
  // [mir] StorageLive(_15)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  // assume Allocated(_15: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _15,
    version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _12, version)
  
  // [mir] _15 = (_1.0: i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_15, version) ==
    get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef((_1.1: i32): i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.0: i32): i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _15,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  // assume Allocated(_15: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _15,
    version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _12, version)
  
  // [mir] _14 = Eq(move _15, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_14, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_15,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_15)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _14,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _12, version)
  
  // [mir] switchInt(move _14) -> [0: bb6, otherwise: bb7]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_14,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (!__t0) {
    goto l2
  }
  goto l1
  
  label bb6
  // ========== bb6 ==========
  
  // Ownership facts
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _14,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(7,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _12, version)
  
  // [mir] _13 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_13, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_13: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _13,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _14,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(8,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _12, version)
  
  // [mir] goto -> bb8
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_13: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_13,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  goto bb8
  
  label bb7
  // ========== bb7 ==========
  
  // [mir] StorageLive(_16)
  
  // [mir] StorageLive(_17)
  
  // Ownership facts
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _14,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_17: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _17,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(9,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  
  // [mir] _17 = (_1.1: i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_17, version) ==
    get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef((_1.0: i32): i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.1: i32): i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$1_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(_1),
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_17: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _17,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _14,
    version)
  // assume Allocated(_17: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _17,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(10,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _12, version)
  
  // [mir] _16 = Eq(move _17, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_17,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  
  // [mir] StorageDead(_17)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _16,
    version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _14,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(9,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  
  // [mir] _13 = move _16
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_13, version) ==
    deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16, old_version)
  // Place _16 has been moved
  inhale move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(_16,
    old_version, _13, version)
  // Framing facts
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _16,
    version)
  // assume WriteRef(_13: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _13,
    version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _14,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(10,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _12, version)
  
  // [mir] goto -> bb8
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_13: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_13,
    old_version, version)
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageDead(_16)
  
  // [mir] StorageDead(_14)
  
  // Ownership facts
  // assume WriteRef(_13: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _13,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(6,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _12, version)
  
  // [mir] _12 = Not(move _13)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_13,
    old_version)))
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_13,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _12,
    version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _12, version)
  
  // [mir] switchInt(move _12) -> [0: bb10, otherwise: bb9]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l4
  }
  goto l3
  
  label bb9
  // ========== bb9 ==========
  
  // [mir] StorageLive(_18)
  
  // Ownership facts
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _12,
    version)
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _11, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(5,
    _1, version)
  // assume Allocated(_18: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _18, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _12, version)
  
  // [mir] _18 = core::panicking::panic(const "assertion failed: x.0 == 42 && x.1 == 42") -> bb13
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: x.0 == 42 && x.1 == 42"
  assert false
  // Framing facts
  // assume framing of WriteRef(_12: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_call_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label l0
  // ========== l0 ==========
  // MIR edge bb4 --> bb5
  // Expire borrows
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  goto bb5
  
  label l1
  // ========== l1 ==========
  // MIR edge bb5 --> bb7
  goto bb7
  
  label l2
  // ========== l2 ==========
  // MIR edge bb5 --> bb6
  goto bb6
  
  label l3
  // ========== l3 ==========
  // MIR edge bb8 --> bb10
  goto bb10
  
  label l4
  // ========== l4 ==========
  // MIR edge bb8 --> bb9
  goto bb9
  
  label l5
  // ========== l5 ==========
  // MIR edge bb10 --> bb12
  goto bb12
  
  label l6
  // ========== l6 ==========
  // MIR edge bb10 --> bb11
  goto bb11
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_3()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$Tuple0
  var _5: Address$Bool
  var _6: Address$Closure$pledges$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$MutRef$I32
  var _7: Address$SharedRef$MutRef$I32
  var _8: Address$Tuple0
  var _9: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::test_3"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] (*_1) = const 0_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0)
  // Target of _1 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    version))
  // Framing facts
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = will_be_0(move _3) -> [return: bb1, unwind: bb6]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
      old_version)))) ==
      get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
      version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _2, version)
  
  // [mir] _5 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  
  // [mir] switchInt(move _5) -> [0: bb3, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  // Encoding of Prusti specification block bb2
  // Source: prusti_assert!(*y == 0)
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_SharedRef$MutRef$I32__$TY$__MemorySnapshot$SharedRef$MutRef$I32$MemorySnapshot$MutRef$I32(new_memory_snap_of_SharedRef$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$MutRef$I32$MemorySnapshot$SharedRef$MutRef$I32(_2,
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0))))
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb3
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _2, version)
  
  // [mir] _4 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_4,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _2, version)
  
  // [mir] goto -> bb4
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_4: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_9: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _9, version)
  
  // [mir] _9 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_9,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_9: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _9, version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_9: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _9, version)
  
  // [mir] _8 = set_42(move _9) -> [return: bb5, unwind: bb6]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_9: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_9,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_9: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _9, version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _8, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_9: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _9, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_9,
    version)))) ==
    get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_9,
    old_version)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_9,
      version))) ==
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _9, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_8)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb4 --> bb5
  // Expire borrows
  // Applying pledges of function pledges::will_be_0
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  // Applying pledges of function pledges::will_be_0
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_call_0_blocked_address_0,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_call_0_blocked_address_0,
    version)))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(0))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true))))))
  goto bb5
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_wrap_unsound_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$MutRef$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$I32
  var _4: Address$Tuple0
  var _5: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::wrap_unsound_2"
  
  // Library ownership axioms of 3 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = unsound(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_3,
    old_version))
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _5 = move _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_5,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)
  // Place _2 has been moved
  inhale move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(_2,
    old_version, _5, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _4 = consume::<&mut i32>(move _5) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_5: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_5: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _5, version)
  // assume Allocated(_5: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::unsound
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  // Applying pledges of function pledges::unsound
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Tuple2$I32$I32
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$Tuple2$I32$I32
  var _4: Address$MutRef$Tuple2$I32$I32
  var _5: Address$Tuple0
  var _6: Address$MutRef$I32
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$Tuple2$I32$I32
  
  label start
  // ========== start ==========
  // Def path: "pledges::bad1"
  
  // Library ownership axioms of 5 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = (const 123_i32, const 42_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    version) ==
    new_memory_snap_of_Tuple2$I32$I32__$TY$__MemorySnapshot$I32$MemorySnapshot$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123),
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _4 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_1,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_4: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = &mut (*_4)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version) ==
    new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = get_mut_first(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut (i32, i32))
  inhale frame_across_stmt_WriteRef_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut (i32, i32))
  inhale owns_as_WriteRef_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_3: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(5,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version)))) ==
    get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    version)))))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_addr_f$0_of_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Address$I32(get_memory_field_target_address_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$Address$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))), get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(deref_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$MemorySnapshot$MutRef$Tuple2$I32$I32(_3,
    old_version))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut (i32, i32))
  inhale owns_as_Allocated_MutRef$Tuple2$I32$I32__$TY$__$int$$Address$MutRef$Tuple2$I32$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut (i32, i32))
  inhale frame_across_call_ShallowlyOwned_MutRef$Tuple2$I32$I32__$TY$__Address$MutRef$Tuple2$I32$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = &mut (*_2)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_2,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_6: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  
  // [mir] _5 = expire(move _6) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_6: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_6: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_6: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _6, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    version) ==
    deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_6,
    old_version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(-1,
    _6, version)
  // frame ShallowlyOwned(arg#0: &mut i32)
  inhale frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_1: (i32, i32))
  inhale owns_as_WriteRef_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: (i32, i32))
  inhale owns_as_Allocated_Tuple2$I32$I32__$TY$__$int$$Address$Tuple2$I32$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: (i32, i32))
  inhale frame_across_stmt_WriteRef_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  // Applying pledges of function pledges::get_mut_first
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$0_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    version))))) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(get_memory_field_f$1_of_Tuple2$I32$I32__$TY$__MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$I32(get_memory_field_target_snapshot_of_MutRef$Tuple2$I32$I32__$TY$__MemorySnapshot$MutRef$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32(new_memory_snap_of_MutRef$Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$MemorySnapshot$Tuple2$I32$I32$MemorySnapshot$MutRef$Tuple2$I32$I32(_call_0_blocked_address_0,
    deref_Tuple2$I32$I32__$TY$__Address$Tuple2$I32$I32$Version$MemorySnapshot$Tuple2$I32$I32(_call_0_blocked_address_0,
    _call_0_pre_version)))))))))))
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_unsound_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  var _2: Address$MutRef$I32
  var _3: Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  var _4: Address$Tuple0
  var _5: Address$Bool
  var _6: Address$Never
  var _call_0_pre_version: Version
  var _call_0_blocked_address_0: Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "pledges::test_unsound_2"
  
  // Library ownership axioms of 12 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: std::boxed::Box<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut std::boxed::Box<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(_3,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(_1,
    deref_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut std::boxed::Box<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut std::boxed::Box<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = <std::boxed::Box<i32> as std::convert::AsMut<i32>>::as_mut(move _3) -> [return: bb1, unwind: bb5]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut std::boxed::Box<i32>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut std::boxed::Box<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_3: &mut std::boxed::Box<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_0_pre_version := old_version
  _call_0_blocked_address_0 := get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(deref_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global(_3,
    old_version))
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut std::boxed::Box<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut std::boxed::Box<i32>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$MutRef$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _4, version)
  
  // [mir] _5 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::boxed::Box<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] switchInt(move _5) -> [0: bb3, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: std::boxed::Box<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l2
  }
  goto l1
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_6: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = core::panicking::panic(const "assertion failed: false") -> bb5
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: std::boxed::Box<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  goto end_of_method
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _5, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  
  // [mir] _4 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_4,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::boxed::Box<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(1,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::boxed::Box<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: std::boxed::Box<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global__$TY$__$int$$Address$Adt$alloc$$std$$boxed$$Box$2$I32$Adt$alloc$$std$$alloc$$Global$Version$$bool$(2,
    _1, version)
  
  // [mir] drop(_1) -> [return: bb4, unwind: bb6]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _1
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // Applying pledges of function alloc::<std::boxed::Box<T, A> as std::convert::AsMut<T>>::as_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  // Applying pledges of function alloc::<std::boxed::Box<T, A> as std::convert::AsMut<T>>::as_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))))
  goto bb1
  
  label l1
  // ========== l1 ==========
  // MIR edge bb1 --> bb3
  goto bb3
  
  label l2
  // ========== l2 ==========
  // MIR edge bb1 --> bb2
  goto bb2
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)


method bumpVersion(version: Version) returns (new_version: Version)
