domain Address$Adt$alloc$$std$$string$$String  {
  
  function deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(base: Address$Adt$alloc$$std$$string$$String,
  version: Version): MemorySnapshot$Adt$alloc$$std$$string$$String 
  
  function id_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$$int$(base: Address$Adt$alloc$$std$$string$$String,
  version: Version): Int 
}

domain Address$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(base: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  version: Version): MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function id_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(base: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  version: Version): Int 
}

domain Address$Adt$easy_rust_41_cell$$PhoneModel  {
  
  function deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base: Address$Adt$easy_rust_41_cell$$PhoneModel,
  version: Version): MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel 
  
  function id_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$int$(base: Address$Adt$easy_rust_41_cell$$PhoneModel,
  version: Version): Int 
  
  function get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base: Address$Adt$easy_rust_41_cell$$PhoneModel): Address$Adt$alloc$$std$$string$$String 
  
  function get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base: Address$Adt$easy_rust_41_cell$$PhoneModel): Address$Adt$alloc$$std$$string$$String 
  
  function get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(base: Address$Adt$easy_rust_41_cell$$PhoneModel): Address$F32 
  
  function get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(base: Address$Adt$easy_rust_41_cell$$PhoneModel): Address$Usize 
  
  function get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(base: Address$Adt$easy_rust_41_cell$$PhoneModel): Address$U32 
  
  function get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(base: Address$Adt$easy_rust_41_cell$$PhoneModel): Address$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function get_base_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$alloc$$std$$string$$String$Address$Adt$easy_rust_41_cell$$PhoneModel(field_addr: Address$Adt$alloc$$std$$string$$String): Address$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_base_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$alloc$$std$$string$$String$Address$Adt$easy_rust_41_cell$$PhoneModel(field_addr: Address$Adt$alloc$$std$$string$$String): Address$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_base_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$F32$Address$Adt$easy_rust_41_cell$$PhoneModel(field_addr: Address$F32): Address$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_base_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Usize$Address$Adt$easy_rust_41_cell$$PhoneModel(field_addr: Address$Usize): Address$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_base_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$U32$Address$Adt$easy_rust_41_cell$$PhoneModel(field_addr: Address$U32): Address$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_base_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$easy_rust_41_cell$$PhoneModel(field_addr: Address$Adt$core$$std$$cell$$Cell$1$Bool): Address$Adt$easy_rust_41_cell$$PhoneModel 
  
  // The base address is determined by the address of field f$company_name
  axiom base_of_field_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$0 {
    (forall base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base_addr) }
      base_addr ==
      get_base_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$alloc$$std$$string$$String$Address$Adt$easy_rust_41_cell$$PhoneModel(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base_addr)))
  }
  
  // The base address is determined by the address of field f$model_name
  axiom base_of_field_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$1 {
    (forall base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base_addr) }
      base_addr ==
      get_base_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$alloc$$std$$string$$String$Address$Adt$easy_rust_41_cell$$PhoneModel(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base_addr)))
  }
  
  // The base address is determined by the address of field f$screen_size
  axiom base_of_field_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$2 {
    (forall base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(base_addr) }
      base_addr ==
      get_base_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$F32$Address$Adt$easy_rust_41_cell$$PhoneModel(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(base_addr)))
  }
  
  // The base address is determined by the address of field f$memory
  axiom base_of_field_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$3 {
    (forall base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(base_addr) }
      base_addr ==
      get_base_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Usize$Address$Adt$easy_rust_41_cell$$PhoneModel(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(base_addr)))
  }
  
  // The base address is determined by the address of field f$date_issued
  axiom base_of_field_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$4 {
    (forall base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(base_addr) }
      base_addr ==
      get_base_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$U32$Address$Adt$easy_rust_41_cell$$PhoneModel(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(base_addr)))
  }
  
  // The base address is determined by the address of field f$on_sale
  axiom base_of_field_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$5 {
    (forall base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(base_addr) }
      base_addr ==
      get_base_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$easy_rust_41_cell$$PhoneModel(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(base_addr)))
  }
}

domain Address$Bool  {
  
  function deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(base: Address$Bool,
  version: Version): MemorySnapshot$Bool 
  
  function id_Bool__$TY$__Address$Bool$Version$$int$(base: Address$Bool, version: Version): Int 
  
  function _dummy_base_to_field_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$ConstPtr$TypeParam$Self  {
  
  function deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(base: Address$ConstPtr$TypeParam$Self,
  version: Version): MemorySnapshot$ConstPtr$TypeParam$Self 
  
  function id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(base: Address$ConstPtr$TypeParam$Self,
  version: Version): Int 
  
  function _dummy_base_to_field_of_ConstPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_ConstPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$F32  {
  
  function deref_F32__$TY$__Address$F32$Version$MemorySnapshot$F32(base: Address$F32,
  version: Version): MemorySnapshot$F32 
  
  function id_F32__$TY$__Address$F32$Version$$int$(base: Address$F32, version: Version): Int 
  
  function _dummy_base_to_field_of_F32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_F32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutPtr$TypeParam$Self  {
  
  function deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(base: Address$MutPtr$TypeParam$Self,
  version: Version): MemorySnapshot$MutPtr$TypeParam$Self 
  
  function id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(base: Address$MutPtr$TypeParam$Self,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutPtr$TypeParam$T  {
  
  function deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(base: Address$MutPtr$TypeParam$T,
  version: Version): MemorySnapshot$MutPtr$TypeParam$T 
  
  function id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(base: Address$MutPtr$TypeParam$T,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutPtr$TypeParam$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutPtr$TypeParam$T_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$Never  {
  
  function deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(base: Address$Never,
  version: Version): MemorySnapshot$Never 
  
  function id_Never__$TY$__Address$Never$Version$$int$(base: Address$Never,
  version: Version): Int 
}

domain Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(base: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  version: Version): MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function id_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(base: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$TypeParam$Self  {
  
  function deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(base: Address$SharedRef$TypeParam$Self,
  version: Version): MemorySnapshot$SharedRef$TypeParam$Self 
  
  function id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(base: Address$SharedRef$TypeParam$Self,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$TypeParam$Self_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$TypeParam$Self_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Tuple0  {
  
  function deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(base: Address$Tuple0,
  version: Version): MemorySnapshot$Tuple0 
  
  function id_Tuple0__$TY$__Address$Tuple0$Version$$int$(base: Address$Tuple0,
  version: Version): Int 
}

domain Address$TypeParam$Self  {
  
  function deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(base: Address$TypeParam$Self,
  version: Version): MemorySnapshot$TypeParam$Self 
  
  function id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(base: Address$TypeParam$Self,
  version: Version): Int 
}

domain Address$TypeParam$T  {
  
  function deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(base: Address$TypeParam$T,
  version: Version): MemorySnapshot$TypeParam$T 
  
  function id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(base: Address$TypeParam$T,
  version: Version): Int 
}

domain Address$U32  {
  
  function deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(base: Address$U32,
  version: Version): MemorySnapshot$U32 
  
  function id_U32__$TY$__Address$U32$Version$$int$(base: Address$U32, version: Version): Int 
  
  function _dummy_base_to_field_of_U32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_U32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$Usize  {
  
  function deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(base: Address$Usize,
  version: Version): MemorySnapshot$Usize 
  
  function id_Usize__$TY$__Address$Usize$Version$$int$(base: Address$Usize,
  version: Version): Int 
  
  function _dummy_base_to_field_of_Usize_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Usize_variant$0_field$0__$TY$__$int$(): Int 
}

domain MemorySnapshot$Adt$alloc$$std$$string$$String  {
  
  
}

domain MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  
}

domain MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel  {
  
  function new_memory_snap_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$F32$MemorySnapshot$Usize$MemorySnapshot$U32$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(f$company_name: MemorySnapshot$Adt$alloc$$std$$string$$String,
  f$model_name: MemorySnapshot$Adt$alloc$$std$$string$$String, f$screen_size: MemorySnapshot$F32,
  f$memory: MemorySnapshot$Usize, f$date_issued: MemorySnapshot$U32, f$on_sale: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool): MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_memory_field_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$alloc$$std$$string$$String(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$Adt$alloc$$std$$string$$String 
  
  function get_memory_field_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$alloc$$std$$string$$String(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$Adt$alloc$$std$$string$$String 
  
  function get_memory_field_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$F32(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$F32 
  
  function get_memory_field_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Usize(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$Usize 
  
  function get_memory_field_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$U32(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$U32 
  
  function get_memory_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
}

domain MemorySnapshot$Bool  {
  
  function new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(value: Bool): MemorySnapshot$Bool 
  
  function get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(snap: MemorySnapshot$Bool): Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Bool_variant$0 {
    (forall self: MemorySnapshot$Bool ::
      { get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self) }
      self ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value) }
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$ConstPtr$Bool  {
  
  function new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(target: Address$Bool): MemorySnapshot$ConstPtr$Bool 
  
  function get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(snap: MemorySnapshot$ConstPtr$Bool): Address$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$Bool_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$Bool ::
      { get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(self) }
      self ==
      new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target) }
      get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$ConstPtr$TypeParam$Self  {
  
  function new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(target: Address$TypeParam$Self): MemorySnapshot$ConstPtr$TypeParam$Self 
  
  function get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(snap: MemorySnapshot$ConstPtr$TypeParam$Self): Address$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$TypeParam$Self ::
      { get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target) }
      get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$F32  {
  
  function new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(value: FloatDomain24e8): MemorySnapshot$F32 
  
  function get_memory_field_value_of_F32__$TY$__MemorySnapshot$F32$$f32$(snap: MemorySnapshot$F32): FloatDomain24e8 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_F32_variant$0 {
    (forall self: MemorySnapshot$F32 ::
      { get_memory_field_value_of_F32__$TY$__MemorySnapshot$F32$$f32$(self) }
      self ==
      new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(get_memory_field_value_of_F32__$TY$__MemorySnapshot$F32$$f32$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_F32_variant$0_field$0 {
    (forall f$value: FloatDomain24e8 ::
      { new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(f$value) }
      f32_fp_eq(get_memory_field_value_of_F32__$TY$__MemorySnapshot$F32$$f32$(new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(f$value)),
      f$value))
  }
}

domain MemorySnapshot$MutPtr$Bool  {
  
  function new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(target: Address$Bool): MemorySnapshot$MutPtr$Bool 
  
  function get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(snap: MemorySnapshot$MutPtr$Bool): Address$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$Bool_variant$0 {
    (forall self: MemorySnapshot$MutPtr$Bool ::
      { get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(self) }
      self ==
      new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target) }
      get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$TypeParam$Self  {
  
  function new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(target: Address$TypeParam$Self): MemorySnapshot$MutPtr$TypeParam$Self 
  
  function get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(snap: MemorySnapshot$MutPtr$TypeParam$Self): Address$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$TypeParam$Self_variant$0 {
    (forall self: MemorySnapshot$MutPtr$TypeParam$Self ::
      { get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target) }
      get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$TypeParam$T  {
  
  function new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(target: Address$TypeParam$T): MemorySnapshot$MutPtr$TypeParam$T 
  
  function get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(snap: MemorySnapshot$MutPtr$TypeParam$T): Address$TypeParam$T 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$TypeParam$T_variant$0 {
    (forall self: MemorySnapshot$MutPtr$TypeParam$T ::
      { get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self) }
      self ==
      new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$TypeParam$T_variant$0_field$0 {
    (forall f$target: Address$TypeParam$T ::
      { new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target) }
      get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$Never  {
  
  
}

domain MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(target_address: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  target_snapshot: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool): MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(snap: MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool): Address$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(snap: MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool): MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool ::
      { get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$0 {
    (forall f$target_address: Address$Adt$core$$std$$cell$$Cell$1$Bool, f$target_snapshot: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool ::
      { new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$1 {
    (forall f$target_address: Address$Adt$core$$std$$cell$$Cell$1$Bool, f$target_snapshot: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool ::
      { new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$TypeParam$Self  {
  
  function new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(target_address: Address$TypeParam$Self,
  target_snapshot: MemorySnapshot$TypeParam$Self): MemorySnapshot$SharedRef$TypeParam$Self 
  
  function get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(snap: MemorySnapshot$SharedRef$TypeParam$Self): Address$TypeParam$Self 
  
  function get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(snap: MemorySnapshot$SharedRef$TypeParam$Self): MemorySnapshot$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$TypeParam$Self_variant$0 {
    (forall self: MemorySnapshot$SharedRef$TypeParam$Self ::
      { get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(self) }
      { get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(self) }
      self ==
      new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(self),
      get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$TypeParam$Self_variant$0_field$0 {
    (forall f$target_address: Address$TypeParam$Self, f$target_snapshot: MemorySnapshot$TypeParam$Self ::
      { new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$TypeParam$Self_variant$0_field$1 {
    (forall f$target_address: Address$TypeParam$Self, f$target_snapshot: MemorySnapshot$TypeParam$Self ::
      { new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Tuple0  {
  
  function new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0(): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: MemorySnapshot$Tuple0 ::self ==
      new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0())
  }
}

domain MemorySnapshot$TypeParam$Self  {
  
  
}

domain MemorySnapshot$TypeParam$T  {
  
  
}

domain MemorySnapshot$U32  {
  
  function new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(value: Int): MemorySnapshot$U32 
  
  function get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(snap: MemorySnapshot$U32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_U32_variant$0 {
    (forall self: MemorySnapshot$U32 ::
      { get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(self) }
      self ==
      new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_U32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value) }
      get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$Usize  {
  
  function new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(value: Int): MemorySnapshot$Usize 
  
  function get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(snap: MemorySnapshot$Usize): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Usize_variant$0 {
    (forall self: MemorySnapshot$Usize ::
      { get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(self) }
      self ==
      new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Usize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value) }
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) ==
      f$value)
  }
}

domain Ownership$Adt$alloc$$std$$string$$String  {
  
  function owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$string$$String, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a: Address$Adt$alloc$$std$$string$$String,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(a1: Address$Adt$alloc$$std$$string$$String,
  v1: Version, a2: Address$Adt$alloc$$std$$string$$String, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v), owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v), owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$alloc$$std$$string$$String {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$string$$String, v: Version ::
      { owns_as_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$string$$String
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$string$$String
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$string$$String
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$string$$String
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$alloc$$std$$string$$String
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$alloc$$std$$string$$String
  axiom framing_definition_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(a,
      v1) ==
      deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$alloc$$std$$string$$String
  axiom same_id_shallow_definition_of_Adt$alloc$$std$$string$$String {
    (forall a: Address$Adt$alloc$$std$$string$$String, v1: Version, v2: Version ::
      { same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$$int$(a,
      v1) ==
      id_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$alloc$$std$$string$$String
  axiom moved_definition_of_Adt$alloc$$std$$string$$String {
    (forall a1: Address$Adt$alloc$$std$$string$$String, a2: Address$Adt$alloc$$std$$string$$String,
    v1: Version, v2: Version ::
      { move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$$int$(a1,
      v1) ==
      id_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$$int$(a2,
      v2) &&
      deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(a1,
      v1) ==
      deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(a2,
      v2))
  }
}

domain Ownership$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a1: Address$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, a2: Address$Adt$core$$std$$cell$$Cell$1$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_definition_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v1) ==
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$core$$std$$cell$$Cell$1$Bool
  axiom same_id_shallow_definition_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version, v2: Version ::
      { same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a,
      v1) ==
      id_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$core$$std$$cell$$Cell$1$Bool
  axiom moved_definition_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a1: Address$Adt$core$$std$$cell$$Cell$1$Bool, a2: Address$Adt$core$$std$$cell$$Cell$1$Bool,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a1,
      v1) ==
      id_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a2,
      v2) &&
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a1,
      v1) ==
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      v2))
  }
}

domain Ownership$Adt$easy_rust_41_cell$$PhoneModel  {
  
  function owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r: Int,
  a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(a1: Address$Adt$easy_rust_41_cell$$PhoneModel,
  v1: Version, a2: Address$Adt$easy_rust_41_cell$$PhoneModel, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$company_name
  axiom agree_snap_addr_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v) }
      deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base_addr),
      v) ==
      get_memory_field_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$alloc$$std$$string$$String(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$model_name
  axiom agree_snap_addr_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$1 {
    (forall v: Version, base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v) }
      deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(base_addr),
      v) ==
      get_memory_field_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$alloc$$std$$string$$String(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$screen_size
  axiom agree_snap_addr_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$2 {
    (forall v: Version, base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v) }
      deref_F32__$TY$__Address$F32$Version$MemorySnapshot$F32(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(base_addr),
      v) ==
      get_memory_field_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$F32(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$memory
  axiom agree_snap_addr_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$3 {
    (forall v: Version, base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v) }
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(base_addr),
      v) ==
      get_memory_field_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Usize(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$date_issued
  axiom agree_snap_addr_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$4 {
    (forall v: Version, base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v) }
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(base_addr),
      v) ==
      get_memory_field_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$U32(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$on_sale
  axiom agree_snap_addr_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0_field$5 {
    (forall v: Version, base_addr: Address$Adt$easy_rust_41_cell$$PhoneModel ::
      { deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v) }
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(base_addr),
      v) ==
      get_memory_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, o: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v), owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, o: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v), owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, o: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, o: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$company_name: Allocated ==> Allocated
  axiom ownership_of_field_f$company_name_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v))
  }
  
  // Ownership across statement of field f$company_name: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$company_name_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v, v2))
  }
  
  // Ownership across call of field f$company_name: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$company_name_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v, v2))
  }
  
  // Ownership of field f$model_name: Allocated ==> Allocated
  axiom ownership_of_field_f$model_name_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(r,
      get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v))
  }
  
  // Ownership across statement of field f$model_name: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$model_name_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v, v2))
  }
  
  // Ownership across call of field f$model_name: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$model_name_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v, v2))
  }
  
  // Ownership of field f$screen_size: Allocated ==> Allocated
  axiom ownership_of_field_f$screen_size_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_F32__$TY$__$int$$Address$F32$Version$$bool$(r, get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(a),
      v))
  }
  
  // Ownership across statement of field f$screen_size: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$screen_size_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(a),
      v, v2))
  }
  
  // Ownership across call of field f$screen_size: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$screen_size_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(a),
      v, v2))
  }
  
  // Ownership of field f$memory: Allocated ==> Allocated
  axiom ownership_of_field_f$memory_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(a),
      v))
  }
  
  // Ownership across statement of field f$memory: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$memory_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(a),
      v, v2))
  }
  
  // Ownership across call of field f$memory: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$memory_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(a),
      v, v2))
  }
  
  // Ownership of field f$date_issued: Allocated ==> Allocated
  axiom ownership_of_field_f$date_issued_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(a),
      v))
  }
  
  // Ownership across statement of field f$date_issued: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$date_issued_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(a),
      v, v2))
  }
  
  // Ownership across call of field f$date_issued: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$date_issued_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(a),
      v, v2))
  }
  
  // Ownership of field f$on_sale: Allocated ==> Allocated
  axiom ownership_of_field_f$on_sale_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall r: Int, a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version ::
      { owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(a),
      v))
  }
  
  // Ownership across statement of field f$on_sale: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$on_sale_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(a),
      v, v2))
  }
  
  // Ownership across call of field f$on_sale: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$on_sale_from_Allocated_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$easy_rust_41_cell$$PhoneModel
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$easy_rust_41_cell$$PhoneModel
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$easy_rust_41_cell$$PhoneModel
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$easy_rust_41_cell$$PhoneModel
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$easy_rust_41_cell$$PhoneModel
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$easy_rust_41_cell$$PhoneModel
  axiom framing_definition_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(a,
      v1) ==
      deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$easy_rust_41_cell$$PhoneModel
  axiom same_id_shallow_definition_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$int$(a,
      v1) ==
      id_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$easy_rust_41_cell$$PhoneModel
  axiom same_id_shallow_definition_of_variant_0_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a: Address$Adt$easy_rust_41_cell$$PhoneModel, v1: Version, v2: Version ::
      { same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v1, v2) &&
      (same_id_shallow_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a),
      v1, v2) &&
      (same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(a),
      v1, v2) &&
      (same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(a),
      v1, v2) &&
      (same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(a),
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(a),
      v1, v2))))))
  }
  
  // Move definition of Adt$easy_rust_41_cell$$PhoneModel
  axiom moved_definition_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a1: Address$Adt$easy_rust_41_cell$$PhoneModel, a2: Address$Adt$easy_rust_41_cell$$PhoneModel,
    v1: Version, v2: Version ::
      { move__Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$int$(a1,
      v1) ==
      id_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$int$(a2,
      v2) &&
      deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(a1,
      v1) ==
      deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$easy_rust_41_cell$$PhoneModel
  axiom moved_definition_of_variant_0_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall a1: Address$Adt$easy_rust_41_cell$$PhoneModel, a2: Address$Adt$easy_rust_41_cell$$PhoneModel,
    v1: Version, v2: Version ::
      { move__Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a1),
      v1, get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a2),
      v2) &&
      (move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a1),
      v1, get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(a2),
      v2) &&
      (move__F32__$TY$__Address$F32$Version$Address$F32$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(a1),
      v1, get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(a2),
      v2) &&
      (move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(a1),
      v1, get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(a2),
      v2) &&
      (move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(a1),
      v1, get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(a2),
      v2) &&
      move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(a1),
      v1, get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(a2),
      v2))))))
  }
}

domain Ownership$Bool  {
  
  function owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1: Address$Bool,
  v1: Version, a2: Address$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v),
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) &&
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Bool
  axiom framing_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) }
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) ==>
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v2))
  }
  
  // Shallow id framing definition of Bool
  axiom same_id_shallow_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Bool
  axiom same_id_shallow_definition_of_variant_0_of_Bool {
    true
  }
  
  // Move definition of Bool
  axiom moved_definition_of_Bool {
    (forall a1: Address$Bool, a2: Address$Bool, v1: Version, v2: Version ::
      { move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a1, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a2, v2) &&
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a1, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a2, v2))
  }
  
  // Move definition of variant 0 of Bool
  axiom moved_definition_of_variant_0_of_Bool {
    true
  }
}

domain Ownership$ConstPtr$TypeParam$Self  {
  
  function owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Address$ConstPtr$TypeParam$Self$Version$$bool$(a1: Address$ConstPtr$TypeParam$Self,
  v1: Version, a2: Address$ConstPtr$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> ConstPtr$TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of ConstPtr$TypeParam$Self
  axiom framing_definition_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a,
      v1) ==
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of ConstPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a,
      v1) ==
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of ConstPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_variant_0_of_ConstPtr$TypeParam$Self {
    true
  }
  
  // Move definition of ConstPtr$TypeParam$Self
  axiom moved_definition_of_ConstPtr$TypeParam$Self {
    (forall a1: Address$ConstPtr$TypeParam$Self, a2: Address$ConstPtr$TypeParam$Self,
    v1: Version, v2: Version ::
      { move__ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Address$ConstPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Address$ConstPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a1,
      v1) ==
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a2,
      v2) &&
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a1,
      v1) ==
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a2,
      v2))
  }
  
  // Move definition of variant 0 of ConstPtr$TypeParam$Self
  axiom moved_definition_of_variant_0_of_ConstPtr$TypeParam$Self {
    true
  }
}

domain Ownership$F32  {
  
  function owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_Allocated_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_NoReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function owns_as_NoWriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r: Int,
  a: Address$F32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a: Address$F32,
  v1: Version, v2: Version): Bool 
  
  function move__F32__$TY$__Address$F32$Version$Address$F32$Version$$bool$(a1: Address$F32,
  v1: Version, a2: Address$F32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_Local_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) }
      owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_F32 {
    (forall r: Int, a: Address$F32, v: Version ::
      { owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_F32__$TY$__$int$$Address$F32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_F32 {
    (forall a: Address$F32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_F32 {
    (forall r: Int, o: Int, a: Address$F32, v: Version ::
      { owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v), owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_F32 {
    (forall r: Int, o: Int, a: Address$F32, v: Version ::
      { owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v),
      owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a, v) &&
      owns_as_Read_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_F32 {
    (forall r: Int, o: Int, a: Address$F32, v: Version ::
      { owns_as_NoReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v), owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_F32 {
    (forall r: Int, o: Int, a: Address$F32, v: Version ::
      { owns_as_NoWriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v), owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> F32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> F32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> F32
  axiom framing_across_Call_implied_by_ownership_Unique_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> F32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> F32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_F32__$TY$__Address$F32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of F32
  axiom framing_definition_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) }
      same_snap_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) ==>
      deref_F32__$TY$__Address$F32$Version$MemorySnapshot$F32(a, v1) ==
      deref_F32__$TY$__Address$F32$Version$MemorySnapshot$F32(a, v2))
  }
  
  // Shallow id framing definition of F32
  axiom same_id_shallow_definition_of_F32 {
    (forall a: Address$F32, v1: Version, v2: Version ::
      { same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_F32__$TY$__Address$F32$Version$Version$$bool$(a, v1, v2) ==>
      id_F32__$TY$__Address$F32$Version$$int$(a, v1) ==
      id_F32__$TY$__Address$F32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of F32
  axiom same_id_shallow_definition_of_variant_0_of_F32 {
    true
  }
  
  // Move definition of F32
  axiom moved_definition_of_F32 {
    (forall a1: Address$F32, a2: Address$F32, v1: Version, v2: Version ::
      { move__F32__$TY$__Address$F32$Version$Address$F32$Version$$bool$(a1,
      v1, a2, v2) }
      move__F32__$TY$__Address$F32$Version$Address$F32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_F32__$TY$__Address$F32$Version$$int$(a1, v1) ==
      id_F32__$TY$__Address$F32$Version$$int$(a2, v2) &&
      deref_F32__$TY$__Address$F32$Version$MemorySnapshot$F32(a1, v1) ==
      deref_F32__$TY$__Address$F32$Version$MemorySnapshot$F32(a2, v2))
  }
  
  // Move definition of variant 0 of F32
  axiom moved_definition_of_variant_0_of_F32 {
    true
  }
}

domain Ownership$MutPtr$TypeParam$Self  {
  
  function owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Address$MutPtr$TypeParam$Self$Version$$bool$(a1: Address$MutPtr$TypeParam$Self,
  v1: Version, a2: Address$MutPtr$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutPtr$TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutPtr$TypeParam$Self
  axiom framing_definition_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a,
      v1) ==
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of MutPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a,
      v1) ==
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_variant_0_of_MutPtr$TypeParam$Self {
    true
  }
  
  // Move definition of MutPtr$TypeParam$Self
  axiom moved_definition_of_MutPtr$TypeParam$Self {
    (forall a1: Address$MutPtr$TypeParam$Self, a2: Address$MutPtr$TypeParam$Self,
    v1: Version, v2: Version ::
      { move__MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Address$MutPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Address$MutPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a1,
      v1) ==
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a2,
      v2) &&
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a1,
      v1) ==
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutPtr$TypeParam$Self
  axiom moved_definition_of_variant_0_of_MutPtr$TypeParam$Self {
    true
  }
}

domain Ownership$MutPtr$TypeParam$T  {
  
  function owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Allocated_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function move__MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Address$MutPtr$TypeParam$T$Version$$bool$(a1: Address$MutPtr$TypeParam$T,
  v1: Version, a2: Address$MutPtr$TypeParam$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutPtr$TypeParam$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutPtr$TypeParam$T
  axiom framing_definition_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a,
      v1) ==
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a,
      v2))
  }
  
  // Shallow id framing definition of MutPtr$TypeParam$T
  axiom same_id_shallow_definition_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a,
      v1) ==
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutPtr$TypeParam$T
  axiom same_id_shallow_definition_of_variant_0_of_MutPtr$TypeParam$T {
    true
  }
  
  // Move definition of MutPtr$TypeParam$T
  axiom moved_definition_of_MutPtr$TypeParam$T {
    (forall a1: Address$MutPtr$TypeParam$T, a2: Address$MutPtr$TypeParam$T,
    v1: Version, v2: Version ::
      { move__MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Address$MutPtr$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Address$MutPtr$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a1,
      v1) ==
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a2,
      v2) &&
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a1,
      v1) ==
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutPtr$TypeParam$T
  axiom moved_definition_of_variant_0_of_MutPtr$TypeParam$T {
    true
  }
}

domain Ownership$Never  {
  
  function owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1: Address$Never,
  v1: Version, a2: Address$Never, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Call_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Never
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Never
  axiom framing_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) }
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) ==>
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v2))
  }
  
  // Shallow id framing definition of Never
  axiom same_id_shallow_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a, v2))
  }
  
  // Move definition of Never
  axiom moved_definition_of_Never {
    (forall a1: Address$Never, a2: Address$Never, v1: Version, v2: Version ::
      { move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) }
      move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a1, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a2, v2) &&
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a1, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a2, v2))
  }
}

domain Ownership$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a1: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  v1: Version, a2: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
    v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
    v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom framing_definition_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v1) ==
      deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom same_id_shallow_definition_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    true
  }
  
  // Move definition of SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom moved_definition_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a1: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, a2: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
    v1: Version, v2: Version ::
      { move__SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a1,
      v1) ==
      deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  axiom owning_type_invariant_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool {
    (forall a: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool, v1: Version,
    v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Address$Adt$core$$std$$cell$$Cell$1$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v2)))
  }
}

domain Ownership$SharedRef$TypeParam$Self  {
  
  function owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Address$SharedRef$TypeParam$Self$Version$$bool$(a1: Address$SharedRef$TypeParam$Self,
  v1: Version, a2: Address$SharedRef$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$TypeParam$Self
  axiom framing_definition_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v1) ==
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$TypeParam$Self
  axiom same_id_shallow_definition_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a,
      v1) ==
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$TypeParam$Self
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$TypeParam$Self {
    true
  }
  
  // Move definition of SharedRef$TypeParam$Self
  axiom moved_definition_of_SharedRef$TypeParam$Self {
    (forall a1: Address$SharedRef$TypeParam$Self, a2: Address$SharedRef$TypeParam$Self,
    v1: Version, v2: Version ::
      { move__SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Address$SharedRef$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Address$SharedRef$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a1,
      v1) ==
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a2,
      v2) &&
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a1,
      v1) ==
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$TypeParam$Self
  axiom moved_definition_of_variant_0_of_SharedRef$TypeParam$Self {
    true
  }
  
  // Invariant of the owning type SharedRef$TypeParam$Self
  axiom owning_type_invariant_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v2)))
  }
}

domain Ownership$Tuple0  {
  
  function owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1: Address$Tuple0,
  v1: Version, a2: Address$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple0
  axiom framing_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1,
      v2) }
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) ==>
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v2))
  }
  
  // Shallow id framing definition of Tuple0
  axiom same_id_shallow_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple0
  axiom same_id_shallow_definition_of_variant_0_of_Tuple0 {
    true
  }
  
  // Move definition of Tuple0
  axiom moved_definition_of_Tuple0 {
    (forall a1: Address$Tuple0, a2: Address$Tuple0, v1: Version, v2: Version ::
      { move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a1, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a2, v2) &&
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a1, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a2, v2))
  }
  
  // Move definition of variant 0 of Tuple0
  axiom moved_definition_of_variant_0_of_Tuple0 {
    true
  }
}

domain Ownership$TypeParam$Self  {
  
  function owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Address$TypeParam$Self$Version$$bool$(a1: Address$TypeParam$Self,
  v1: Version, a2: Address$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of TypeParam$Self
  axiom framing_definition_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a,
      v1) ==
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of TypeParam$Self
  axiom same_id_shallow_definition_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a, v1) ==
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a, v2))
  }
  
  // Move definition of TypeParam$Self
  axiom moved_definition_of_TypeParam$Self {
    (forall a1: Address$TypeParam$Self, a2: Address$TypeParam$Self, v1: Version,
    v2: Version ::
      { move__TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Address$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Address$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a1, v1) ==
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a2, v2) &&
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a1,
      v1) ==
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a2,
      v2))
  }
}

domain Ownership$TypeParam$T  {
  
  function owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Allocated_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function move__TypeParam$T__$TY$__Address$TypeParam$T$Version$Address$TypeParam$T$Version$$bool$(a1: Address$TypeParam$T,
  v1: Version, a2: Address$TypeParam$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> TypeParam$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of TypeParam$T
  axiom framing_definition_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a,
      v1) ==
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a,
      v2))
  }
  
  // Shallow id framing definition of TypeParam$T
  axiom same_id_shallow_definition_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a, v1) ==
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a, v2))
  }
  
  // Move definition of TypeParam$T
  axiom moved_definition_of_TypeParam$T {
    (forall a1: Address$TypeParam$T, a2: Address$TypeParam$T, v1: Version, v2: Version ::
      { move__TypeParam$T__$TY$__Address$TypeParam$T$Version$Address$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__TypeParam$T__$TY$__Address$TypeParam$T$Version$Address$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a1, v1) ==
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a2, v2) &&
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a1,
      v1) ==
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a2,
      v2))
  }
}

domain Ownership$U32  {
  
  function owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1: Address$U32,
  v1: Version, a2: Address$U32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v),
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) &&
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> U32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> U32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U32
  axiom framing_across_Call_implied_by_ownership_Unique_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> U32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of U32
  axiom framing_definition_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) }
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) ==>
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a, v1) ==
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a, v2))
  }
  
  // Shallow id framing definition of U32
  axiom same_id_shallow_definition_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) ==>
      id_U32__$TY$__Address$U32$Version$$int$(a, v1) ==
      id_U32__$TY$__Address$U32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of U32
  axiom same_id_shallow_definition_of_variant_0_of_U32 {
    true
  }
  
  // Move definition of U32
  axiom moved_definition_of_U32 {
    (forall a1: Address$U32, a2: Address$U32, v1: Version, v2: Version ::
      { move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1,
      v1, a2, v2) }
      move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_U32__$TY$__Address$U32$Version$$int$(a1, v1) ==
      id_U32__$TY$__Address$U32$Version$$int$(a2, v2) &&
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a1, v1) ==
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a2, v2))
  }
  
  // Move definition of variant 0 of U32
  axiom moved_definition_of_variant_0_of_U32 {
    true
  }
}

domain Ownership$Usize  {
  
  function owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1: Address$Usize,
  v1: Version, a2: Address$Usize, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v), owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) &&
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v)))
  }
  
  // Framing implied by ownership: Immutable ==> Usize
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Usize
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Usize
  axiom framing_across_Call_implied_by_ownership_Unique_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Usize
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Usize
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Usize
  axiom framing_definition_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) }
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) ==>
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a, v1) ==
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a, v2))
  }
  
  // Shallow id framing definition of Usize
  axiom same_id_shallow_definition_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Usize__$TY$__Address$Usize$Version$$int$(a, v1) ==
      id_Usize__$TY$__Address$Usize$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Usize
  axiom same_id_shallow_definition_of_variant_0_of_Usize {
    true
  }
  
  // Move definition of Usize
  axiom moved_definition_of_Usize {
    (forall a1: Address$Usize, a2: Address$Usize, v1: Version, v2: Version ::
      { move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1,
      v1, a2, v2) }
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Usize__$TY$__Address$Usize$Version$$int$(a1, v1) ==
      id_Usize__$TY$__Address$Usize$Version$$int$(a2, v2) &&
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a1, v1) ==
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a2, v2))
  }
  
  // Move definition of variant 0 of Usize
  axiom moved_definition_of_variant_0_of_Usize {
    true
  }
}

domain ValueSnapshot$Adt$alloc$$std$$string$$String  {
  
  function convert_from_memory_of_Adt$alloc$$std$$string$$String__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String(snap: MemorySnapshot$Adt$alloc$$std$$string$$String): ValueSnapshot$Adt$alloc$$std$$string$$String 
  
  function convert_to_memory_of_Adt$alloc$$std$$string$$String__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String(snap: ValueSnapshot$Adt$alloc$$std$$string$$String): MemorySnapshot$Adt$alloc$$std$$string$$String 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$alloc$$std$$string$$String {
    (forall value_snapshot: ValueSnapshot$Adt$alloc$$std$$string$$String ::
      { convert_from_memory_of_Adt$alloc$$std$$string$$String__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String(convert_to_memory_of_Adt$alloc$$std$$string$$String__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String(value_snapshot)) }
      convert_from_memory_of_Adt$alloc$$std$$string$$String__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String(convert_to_memory_of_Adt$alloc$$std$$string$$String__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$alloc$$std$$string$$String {
    (forall memory_snapshot: MemorySnapshot$Adt$alloc$$std$$string$$String ::
      { convert_to_memory_of_Adt$alloc$$std$$string$$String__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String(convert_from_memory_of_Adt$alloc$$std$$string$$String__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String(memory_snapshot)) }
      convert_to_memory_of_Adt$alloc$$std$$string$$String__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String(convert_from_memory_of_Adt$alloc$$std$$string$$String__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(snap: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool): ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function convert_to_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(snap: ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool): MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall value_snapshot: ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool ::
      { convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(convert_to_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(value_snapshot)) }
      convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(convert_to_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$core$$std$$cell$$Cell$1$Bool {
    (forall memory_snapshot: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool ::
      { convert_to_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(memory_snapshot)) }
      convert_to_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel  {
  
  function new_value_snap_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$F32$ValueSnapshot$Usize$ValueSnapshot$U32$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(f$company_name: ValueSnapshot$Adt$alloc$$std$$string$$String,
  f$model_name: ValueSnapshot$Adt$alloc$$std$$string$$String, f$screen_size: ValueSnapshot$F32,
  f$memory: ValueSnapshot$Usize, f$date_issued: ValueSnapshot$U32, f$on_sale: ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool): ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel 
  
  function get_value_field_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$alloc$$std$$string$$String(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$Adt$alloc$$std$$string$$String 
  
  function get_value_field_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$alloc$$std$$string$$String(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$Adt$alloc$$std$$string$$String 
  
  function get_value_field_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$F32(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$F32 
  
  function get_value_field_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Usize(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$Usize 
  
  function get_value_field_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$U32(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$U32 
  
  function get_value_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function convert_from_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(snap: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel): ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel 
  
  function convert_to_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(snap: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel): MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel 
  
  // Definition of the existence of the constructor of variant PhoneModel
  axiom value_snapshot_existence_of_Adt$easy_rust_41_cell$$PhoneModel_variant$0 {
    (forall self: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel ::
      { get_value_field_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$alloc$$std$$string$$String(self) }
      { get_value_field_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$alloc$$std$$string$$String(self) }
      { get_value_field_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$F32(self) }
      { get_value_field_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Usize(self) }
      { get_value_field_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$U32(self) }
      { get_value_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(self) }
      self ==
      new_value_snap_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$Adt$alloc$$std$$string$$String$ValueSnapshot$F32$ValueSnapshot$Usize$ValueSnapshot$U32$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(get_value_field_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$alloc$$std$$string$$String(self),
      get_value_field_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$alloc$$std$$string$$String(self),
      get_value_field_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$F32(self),
      get_value_field_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Usize(self),
      get_value_field_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$U32(self),
      get_value_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall value_snapshot: ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel ::
      { convert_from_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(convert_to_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(value_snapshot)) }
      convert_from_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(convert_to_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$easy_rust_41_cell$$PhoneModel {
    (forall memory_snapshot: MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel ::
      { convert_to_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(convert_from_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(memory_snapshot)) }
      convert_to_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(convert_from_memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$ValueSnapshot$Adt$easy_rust_41_cell$$PhoneModel(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Bool  {
  
  function new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(value: Bool): ValueSnapshot$Bool 
  
  function get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(snap: ValueSnapshot$Bool): Bool 
  
  function convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(snap: MemorySnapshot$Bool): ValueSnapshot$Bool 
  
  function convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(snap: ValueSnapshot$Bool): MemorySnapshot$Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Bool_variant$0 {
    (forall self: ValueSnapshot$Bool ::
      { get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self) }
      self ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Bool_variant$0 {
    (forall f$value: Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) }
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Bool_variant$0 {
    (forall v$value: Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) }
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Bool {
    (forall value_snapshot: ValueSnapshot$Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Bool {
    (forall memory_snapshot: MemorySnapshot$Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$Bool  {
  
  function new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(target: Address$Bool): ValueSnapshot$ConstPtr$Bool 
  
  function get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(snap: ValueSnapshot$ConstPtr$Bool): Address$Bool 
  
  function convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(snap: MemorySnapshot$ConstPtr$Bool): ValueSnapshot$ConstPtr$Bool 
  
  function convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(snap: ValueSnapshot$ConstPtr$Bool): MemorySnapshot$ConstPtr$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$Bool_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$Bool ::
      { get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(self) }
      self ==
      new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target) }
      get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$Bool_variant$0 {
    (forall f$target: Address$Bool ::
      { convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target)) }
      { new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target) }
      convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target)) ==
      new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$Bool_variant$0 {
    (forall v$target: Address$Bool ::
      { convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(v$target)) }
      { new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(v$target) }
      convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(v$target)) ==
      new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$Bool {
    (forall value_snapshot: ValueSnapshot$ConstPtr$Bool ::
      { convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(value_snapshot)) }
      convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$Bool {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$Bool ::
      { convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$TypeParam$Self  {
  
  function new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(target: Address$TypeParam$Self): ValueSnapshot$ConstPtr$TypeParam$Self 
  
  function get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(snap: ValueSnapshot$ConstPtr$TypeParam$Self): Address$TypeParam$Self 
  
  function convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(snap: MemorySnapshot$ConstPtr$TypeParam$Self): ValueSnapshot$ConstPtr$TypeParam$Self 
  
  function convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(snap: ValueSnapshot$ConstPtr$TypeParam$Self): MemorySnapshot$ConstPtr$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$TypeParam$Self ::
      { get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target) }
      get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall f$target: Address$TypeParam$Self ::
      { convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target)) }
      { new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target) }
      convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target)) ==
      new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall v$target: Address$TypeParam$Self ::
      { convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(v$target)) }
      { new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(v$target) }
      convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(v$target)) ==
      new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$TypeParam$Self {
    (forall value_snapshot: ValueSnapshot$ConstPtr$TypeParam$Self ::
      { convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(value_snapshot)) }
      convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$TypeParam$Self {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$TypeParam$Self ::
      { convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$F32  {
  
  function new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(value: FloatDomain24e8): ValueSnapshot$F32 
  
  function get_value_field_value_of_F32__$TY$__ValueSnapshot$F32$$f32$(snap: ValueSnapshot$F32): FloatDomain24e8 
  
  function convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(snap: MemorySnapshot$F32): ValueSnapshot$F32 
  
  function convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(snap: ValueSnapshot$F32): MemorySnapshot$F32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_F32_variant$0 {
    (forall self: ValueSnapshot$F32 ::
      { get_value_field_value_of_F32__$TY$__ValueSnapshot$F32$$f32$(self) }
      self ==
      new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(get_value_field_value_of_F32__$TY$__ValueSnapshot$F32$$f32$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_F32_variant$0_field$0 {
    (forall f$value: FloatDomain24e8 ::
      { new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(f$value) }
      f32_fp_eq(get_value_field_value_of_F32__$TY$__ValueSnapshot$F32$$f32$(new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(f$value)),
      f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_F32_variant$0 {
    (forall f$value: FloatDomain24e8 ::
      { convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(f$value)) }
      { new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(f$value) }
      convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(f$value)) ==
      new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_F32_variant$0 {
    (forall v$value: FloatDomain24e8 ::
      { convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(v$value)) }
      { new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(v$value) }
      convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(new_value_snap_of_F32__$TY$__$f32$$ValueSnapshot$F32(v$value)) ==
      new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_F32 {
    (forall value_snapshot: ValueSnapshot$F32 ::
      { convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(value_snapshot)) }
      convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_F32 {
    (forall memory_snapshot: MemorySnapshot$F32 ::
      { convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(memory_snapshot)) }
      convert_to_memory_of_F32__$TY$__ValueSnapshot$F32$MemorySnapshot$F32(convert_from_memory_of_F32__$TY$__MemorySnapshot$F32$ValueSnapshot$F32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$Bool  {
  
  function new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(target: Address$Bool): ValueSnapshot$MutPtr$Bool 
  
  function get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(snap: ValueSnapshot$MutPtr$Bool): Address$Bool 
  
  function convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(snap: MemorySnapshot$MutPtr$Bool): ValueSnapshot$MutPtr$Bool 
  
  function convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(snap: ValueSnapshot$MutPtr$Bool): MemorySnapshot$MutPtr$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$Bool_variant$0 {
    (forall self: ValueSnapshot$MutPtr$Bool ::
      { get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(self) }
      self ==
      new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target) }
      get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$Bool_variant$0 {
    (forall f$target: Address$Bool ::
      { convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target)) }
      { new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target) }
      convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target)) ==
      new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$Bool_variant$0 {
    (forall v$target: Address$Bool ::
      { convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(v$target)) }
      { new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(v$target) }
      convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(v$target)) ==
      new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$Bool {
    (forall value_snapshot: ValueSnapshot$MutPtr$Bool ::
      { convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(value_snapshot)) }
      convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$Bool {
    (forall memory_snapshot: MemorySnapshot$MutPtr$Bool ::
      { convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(memory_snapshot)) }
      convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$TypeParam$Self  {
  
  function new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(target: Address$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$Self 
  
  function get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(snap: ValueSnapshot$MutPtr$TypeParam$Self): Address$TypeParam$Self 
  
  function convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(snap: MemorySnapshot$MutPtr$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$Self 
  
  function convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(snap: ValueSnapshot$MutPtr$TypeParam$Self): MemorySnapshot$MutPtr$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$TypeParam$Self_variant$0 {
    (forall self: ValueSnapshot$MutPtr$TypeParam$Self ::
      { get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target) }
      get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$TypeParam$Self_variant$0 {
    (forall f$target: Address$TypeParam$Self ::
      { convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target)) }
      { new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target) }
      convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target)) ==
      new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$TypeParam$Self_variant$0 {
    (forall v$target: Address$TypeParam$Self ::
      { convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(v$target)) }
      { new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(v$target) }
      convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(v$target)) ==
      new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$TypeParam$Self {
    (forall value_snapshot: ValueSnapshot$MutPtr$TypeParam$Self ::
      { convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(value_snapshot)) }
      convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$TypeParam$Self {
    (forall memory_snapshot: MemorySnapshot$MutPtr$TypeParam$Self ::
      { convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(memory_snapshot)) }
      convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$TypeParam$T  {
  
  function new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(target: Address$TypeParam$T): ValueSnapshot$MutPtr$TypeParam$T 
  
  function get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(snap: ValueSnapshot$MutPtr$TypeParam$T): Address$TypeParam$T 
  
  function convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(snap: MemorySnapshot$MutPtr$TypeParam$T): ValueSnapshot$MutPtr$TypeParam$T 
  
  function convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(snap: ValueSnapshot$MutPtr$TypeParam$T): MemorySnapshot$MutPtr$TypeParam$T 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$TypeParam$T_variant$0 {
    (forall self: ValueSnapshot$MutPtr$TypeParam$T ::
      { get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self) }
      self ==
      new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$TypeParam$T_variant$0_field$0 {
    (forall f$target: Address$TypeParam$T ::
      { new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target) }
      get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$TypeParam$T_variant$0 {
    (forall f$target: Address$TypeParam$T ::
      { convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target)) }
      { new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target) }
      convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target)) ==
      new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$TypeParam$T_variant$0 {
    (forall v$target: Address$TypeParam$T ::
      { convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(v$target)) }
      { new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(v$target) }
      convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(v$target)) ==
      new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$TypeParam$T {
    (forall value_snapshot: ValueSnapshot$MutPtr$TypeParam$T ::
      { convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(value_snapshot)) }
      convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$TypeParam$T {
    (forall memory_snapshot: MemorySnapshot$MutPtr$TypeParam$T ::
      { convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(memory_snapshot)) }
      convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool  {
  
  function new_value_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(target_snapshot: ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool): ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(snap: ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool): ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool 
  
  function convert_from_memory_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(snap: MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool): ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool ::
      { new_value_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(new_value_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool_variant$0 {
    (forall f$target_address: Address$Adt$core$$std$$cell$$Cell$1$Bool, f$target_snapshot: MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool ::
      { convert_from_memory_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(convert_from_memory_of_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$ValueSnapshot$Adt$core$$std$$cell$$Cell$1$Bool(f$target_snapshot)))
  }
}

domain ValueSnapshot$Tuple0  {
  
  function new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0(): ValueSnapshot$Tuple0 
  
  function convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(snap: MemorySnapshot$Tuple0): ValueSnapshot$Tuple0 
  
  function convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(snap: ValueSnapshot$Tuple0): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: ValueSnapshot$Tuple0 ::self ==
      new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0())
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple0_variant$0 {
    convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()) ==
    new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple0_variant$0 {
    convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple0 {
    (forall value_snapshot: ValueSnapshot$Tuple0 ::
      { convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) }
      convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Tuple0 ::
      { convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$TypeParam$Self  {
  
  function convert_from_memory_of_TypeParam$Self__$TY$__MemorySnapshot$TypeParam$Self$ValueSnapshot$TypeParam$Self(snap: MemorySnapshot$TypeParam$Self): ValueSnapshot$TypeParam$Self 
}

domain ValueSnapshot$U32  {
  
  function new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(value: Int): ValueSnapshot$U32 
  
  function get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(snap: ValueSnapshot$U32): Int 
  
  function convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(snap: MemorySnapshot$U32): ValueSnapshot$U32 
  
  function convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(snap: ValueSnapshot$U32): MemorySnapshot$U32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_U32_variant$0 {
    (forall self: ValueSnapshot$U32 ::
      { get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(self) }
      self ==
      new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_U32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value) }
      get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_U32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) }
      { new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value) }
      convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) ==
      new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_U32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(v$value)) }
      { new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(v$value) }
      convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(v$value)) ==
      new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_U32 {
    (forall value_snapshot: ValueSnapshot$U32 ::
      { convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(value_snapshot)) }
      convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_U32 {
    (forall memory_snapshot: MemorySnapshot$U32 ::
      { convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(memory_snapshot)) }
      convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Usize  {
  
  function new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(value: Int): ValueSnapshot$Usize 
  
  function get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(snap: ValueSnapshot$Usize): Int 
  
  function convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(snap: MemorySnapshot$Usize): ValueSnapshot$Usize 
  
  function convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(snap: ValueSnapshot$Usize): MemorySnapshot$Usize 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Usize_variant$0 {
    (forall self: ValueSnapshot$Usize ::
      { get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(self) }
      self ==
      new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Usize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value) }
      get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Usize_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) }
      { new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value) }
      convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) ==
      new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Usize_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(v$value)) }
      { new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(v$value) }
      convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(v$value)) ==
      new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Usize {
    (forall value_snapshot: ValueSnapshot$Usize ::
      { convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(value_snapshot)) }
      convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Usize {
    (forall memory_snapshot: MemorySnapshot$Usize ::
      { convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(memory_snapshot)) }
      convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain Version  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

function m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(_1: ValueSnapshot$MutPtr$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$T


function m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(_1: MemorySnapshot$ConstPtr$Bool,
  __version: Version): MemorySnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(_1),
    __version) ==
    result))))))


function m_libraries$$lib_rwlock$$RwLockSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(_1: ValueSnapshot$MutPtr$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$T


function m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(_1: MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool): MemorySnapshot$MutPtr$Bool


function m_std$$cell$$Cell$$$openang$T$closeang$$$get__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Bool(_1: MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool,
  __version: Version): MemorySnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(result ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(_1))),
    __version)))))))


function read$(): Perm
  ensures none < result
  ensures result < write


method m_libraries$$lib_rwlock$$RwLockSpec$$data_ptr()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$MutPtr$TypeParam$T
  var _1: Address$SharedRef$TypeParam$Self
  var _2: Address$MutPtr$TypeParam$Self
  var _3: Address$MutPtr$TypeParam$Self
  var _4: Address$ConstPtr$TypeParam$Self
  var _5: Address$ConstPtr$TypeParam$Self
  
  label start
  // ========== start ==========
  // Def path: "easy_rust_41_cell::libraries::lib_rwlock::RwLockSpec::data_ptr"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _3, version)
  
  // [mir] _5 = &raw const (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    version) ==
    new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: &Self)
  inhale frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _3, version)
  
  // [mir] _4 = _5
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    version) ==
    deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_5: *const Self)
  inhale frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(6,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = move _4 as *mut Self (PtrToPtr)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // [mir] AscribeUserType(_3, o, UserTypeProjection { base: UserType(2), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(7,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(8,
    _3, version)
  
  // [mir] _2 = _3
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    version) ==
    deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    old_version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_3: *mut Self)
  inhale frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _0 = <Self as libraries::lib_rwlock::RwLockSpec<T>>::data_ptr_offset(move _2) -> [return: bb1, unwind: bb2]
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(_0,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(m_libraries$$lib_rwlock$$RwLockSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    old_version)))))
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_main()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$easy_rust_41_cell$$PhoneModel
  var _2: Address$Adt$alloc$$std$$string$$String
  var _3: Address$Adt$alloc$$std$$string$$String
  var _4: Address$Adt$core$$std$$cell$$Cell$1$Bool
  var _5: Address$Tuple0
  var _6: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  var _7: Address$Tuple0
  var _8: Address$Bool
  var _9: Address$Bool
  var _10: Address$Bool
  var _11: Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool
  var _12: Address$Never
  var _13: Address$Tuple0
  var _14: Address$Bool
  var _15: Address$Never
  var __t0: Bool
  var __t1: Bool
  
  label start
  // ========== start ==========
  // Def path: "easy_rust_41_cell::main"
  
  // Library ownership axioms of 10 types:
  // User-specified library ownership spec #0 for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v))
  // User-specified library ownership spec #0 across statement for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, a2: Address$Adt$core$$std$$cell$$Cell$1$Bool,
    v2: Version ::
      { move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      v2)))))), v2))
  // User-specified library ownership spec #1 for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v))
  // User-specified library ownership spec #1 across statement for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, a2: Address$Adt$core$$std$$cell$$Cell$1$Bool,
    v2: Version ::
      { move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      v2)))))), v2))
  // User-specified library ownership spec #2 for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v))
  // User-specified library ownership spec #2 across statement for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, a2: Address$Adt$core$$std$$cell$$Cell$1$Bool,
    v2: Version ::
      { move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      v2)))))), v2))
  // User-specified library ownership spec #3 for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall r: Int, a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v))
  // User-specified library ownership spec #3 across statement for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$core$$std$$cell$$Cell$1$Bool
  inhale (forall a: Address$Adt$core$$std$$cell$$Cell$1$Bool, v: Version, a2: Address$Adt$core$$std$$cell$$Cell$1$Bool,
    v2: Version ::
      { move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(a2,
      v2)))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  
  // [mir] _2 = string_1() -> [return: bb1, unwind: bb16]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // Ownership facts
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_2: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(3,
    _1, version)
  // assume Allocated(_3: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(4,
    _3, version)
  
  // [mir] _3 = string_2() -> [return: bb2, unwind: bb15]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_2,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(3,
    _1, version)
  // assume Allocated(_3: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(4,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // Framing facts
  // assume framing of WriteRef(_2: std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_2,
    old_version, version)
  goto bb2
  
  label bb10
  // ========== bb10 ==========
  
  // [mir] StorageLive(_15)
  
  // Ownership facts
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _14,
    version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  // assume Allocated(_15: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _15, version)
  
  // [mir] _15 = core::panicking::panic(const "assertion failed: false") -> bb13
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb11
  // ========== bb11 ==========
  
  // Ownership facts
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _14,
    version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  
  // [mir] _13 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_13,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_14)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(3,
    _1, version)
  
  // [mir] drop(_1) -> [return: bb12, unwind: bb16]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _1
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto bb12
  
  label bb12
  // ========== bb12 ==========
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_2: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_3: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    _3, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: std::cell::Cell<bool>)
  inhale owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  // assume Allocated(_3: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(6,
    _3, version)
  
  // [mir] _4 = std::cell::Cell::<bool>::new(const true) -> [return: bb3, unwind: bb14]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_3: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    _3, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: std::cell::Cell<bool>)
  inhale owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  // assume Allocated(_3: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(6,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(_4,
    deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(_4,
    version))))), version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // Framing facts
  // assume framing of WriteRef(_2: std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_3,
    old_version, version)
  goto bb3
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: std::cell::Cell<bool>)
  inhale owns_as_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(2,
    _4, version)
  // assume WriteRef(_3: std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(3,
    _3, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: std::cell::Cell<bool>)
  inhale owns_as_Allocated_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(6,
    _1, version)
  // assume Allocated(_3: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(7,
    _3, version)
  
  // [mir] _1 = PhoneModel { company_name: move _2, model_name: move _3, screen_size: const 7.5f32, memory: const 4000000_usize, date_issued: const 2020_u32, on_sale: move _4 }
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(_1,
    version) ==
    new_memory_snap_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__MemorySnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$Adt$alloc$$std$$string$$String$MemorySnapshot$F32$MemorySnapshot$Usize$MemorySnapshot$U32$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(_2,
    old_version), deref_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$MemorySnapshot$Adt$alloc$$std$$string$$String(_3,
    old_version), new_memory_snap_of_F32__$TY$__$f32$$MemorySnapshot$F32(f32_from_bv(bv32_from_int(1089470464))),
    new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(4000000), new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(2020),
    deref_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(_4,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(_3,
    old_version, version)
  // Place _2 has been moved
  inhale move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(_2,
    old_version, get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // Place _3 has been moved
  inhale move__Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Address$Adt$alloc$$std$$string$$String$Version$$bool$(_3,
    old_version, get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // Place _4 has been moved
  inhale move__Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(_4,
    old_version, get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    version)
  // Framing facts
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(3,
    _1, version)
  // assume Allocated(_3: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(4,
    _3, version)
  
  // [mir] drop(_3) -> [return: bb4, unwind: bb15]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _3
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: std::string::String)
  inhale owns_as_Allocated_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(3,
    _1, version)
  
  // [mir] drop(_2) -> [return: bb5, unwind: bb16]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  goto bb5
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(3,
    _1, version)
  // assume Allocated(_6: &std::cell::Cell<bool>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(4,
    _6, version)
  
  // [mir] _6 = &(_1.5: std::cell::Cell<bool>)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(_6,
    version) ==
    new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    get_memory_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef((_1.0: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.1: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.2: f32): f32)
  inhale frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    old_version, version)
  // assume framing of WriteRef((_1.3: usize): usize)
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    old_version, version)
  // assume framing of WriteRef((_1.4: u32): u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: &std::cell::Cell<bool>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(1,
    _6, version)
  // assume WriteRef((_1.0: std::string::String): std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // assume WriteRef((_1.1: std::string::String): std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(3,
    get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // assume WriteRef((_1.2: f32): f32)
  inhale owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(4, get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    version)
  // assume WriteRef((_1.3: usize): usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    version)
  // assume WriteRef((_1.4: u32): u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(6, get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    version)
  // assume ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(7,
    get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _5, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(9,
    _1, version)
  // assume Allocated(_6: &std::cell::Cell<bool>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(10,
    _6, version)
  
  // [mir] _5 = std::cell::Cell::<bool>::set(move _6, const false) -> [return: bb6, unwind: bb13]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_6: &std::cell::Cell<bool>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef((_1.0: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.1: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.2: f32): f32)
  inhale frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    old_version, version)
  // assume framing of WriteRef((_1.3: usize): usize)
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    old_version, version)
  // assume framing of WriteRef((_1.4: u32): u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    old_version, version)
  // Ownership facts
  // assume WriteRef(_6: &std::cell::Cell<bool>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(1,
    _6, version)
  // assume WriteRef((_1.0: std::string::String): std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // assume WriteRef((_1.1: std::string::String): std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(3,
    get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // assume WriteRef((_1.2: f32): f32)
  inhale owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(4, get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    version)
  // assume WriteRef((_1.3: usize): usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    version)
  // assume WriteRef((_1.4: u32): u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(6, get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    version)
  // assume ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(7,
    get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _5, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(9,
    _1, version)
  // assume Allocated(_6: &std::cell::Cell<bool>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(10,
    _6, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_std$$cell$$Cell$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$MutPtr$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(_6,
    version)))), version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &std::cell::Cell<bool>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(-1,
    _6, version)
  // frame ShallowlyOwned(arg#0: &std::cell::Cell<bool>)
  inhale frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef((_1.1: std::string::String): std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.2: f32): f32)
  inhale frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    old_version, version)
  // assume framing of WriteRef((_1.0: std::string::String): std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.3: usize): usize)
  inhale frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    old_version, version)
  // assume framing of WriteRef((_1.4: u32): u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    old_version, version)
  goto bb6
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume Allocated(_11: &std::cell::Cell<bool>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(2,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(6,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  
  // [mir] _11 = &(_1.5: std::cell::Cell<bool>)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(_11,
    version) ==
    new_memory_snap_of_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    get_memory_field_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel$MemorySnapshot$Adt$core$$std$$cell$$Cell$1$Bool(deref_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$MemorySnapshot$Adt$easy_rust_41_cell$$PhoneModel(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef((_1.0: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.1: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.2: f32): f32)
  inhale frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    old_version, version)
  // assume framing of WriteRef((_1.3: usize): usize)
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    old_version, version)
  // assume framing of WriteRef((_1.4: u32): u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_11: &std::cell::Cell<bool>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(1,
    _11, version)
  // assume WriteRef((_1.0: std::string::String): std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(2,
    get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // assume WriteRef((_1.1: std::string::String): std::string::String)
  inhale owns_as_WriteRef_Adt$alloc$$std$$string$$String__$TY$__$int$$Address$Adt$alloc$$std$$string$$String$Version$$bool$(3,
    get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    version)
  // assume WriteRef((_1.2: f32): f32)
  inhale owns_as_WriteRef_F32__$TY$__$int$$Address$F32$Version$$bool$(4, get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    version)
  // assume WriteRef((_1.3: usize): usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    version)
  // assume WriteRef((_1.4: u32): u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(6, get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    version)
  // assume ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale owns_as_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(7,
    get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    version)
  // assume Allocated(_11: &std::cell::Cell<bool>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__$int$$Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$$bool$(8,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _8, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(12,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _9, version)
  
  // [mir] _10 = std::cell::Cell::<bool>::get(move _11) -> [return: bb7, unwind: bb13]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10, version) ==
    m_std$$cell$$Cell$$$openang$T$closeang$$$get__$TY$__MemorySnapshot$Bool$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$Bool(deref_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$MemorySnapshot$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool(_11,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_11: &std::cell::Cell<bool>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$SharedRef$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(_11,
    old_version, version)
  // assume framing of WriteRef((_1.0: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.1: std::string::String): std::string::String)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.2: f32): f32)
  inhale frame_across_stmt_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    old_version, version)
  // assume framing of WriteRef((_1.3: usize): usize)
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    old_version, version)
  // assume framing of WriteRef((_1.4: u32): u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale frame_across_stmt_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    old_version, version)
  // Framing facts
  // assume framing of WriteRef((_1.1: std::string::String): std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$model_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.2: f32): f32)
  inhale frame_across_call_WriteRef_F32__$TY$__Address$F32$Version$Version$$bool$(get_addr_f$screen_size_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$F32(_1),
    old_version, version)
  // assume framing of WriteRef((_1.0: std::string::String): std::string::String)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$string$$String__$TY$__Address$Adt$alloc$$std$$string$$String$Version$Version$$bool$(get_addr_f$company_name_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$alloc$$std$$string$$String(_1),
    old_version, version)
  // assume framing of WriteRef((_1.3: usize): usize)
  inhale frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_f$memory_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Usize(_1),
    old_version, version)
  // assume framing of WriteRef((_1.4: u32): u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_f$date_issued_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$U32(_1),
    old_version, version)
  // assume framing of ReadRef((_1.5: std::cell::Cell<bool>): std::cell::Cell<bool>)
  inhale frame_across_call_ReadRef_Adt$core$$std$$cell$$Cell$1$Bool__$TY$__Address$Adt$core$$std$$cell$$Cell$1$Bool$Version$Version$$bool$(get_addr_f$on_sale_of_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Address$Adt$core$$std$$cell$$Cell$1$Bool(_1),
    old_version, version)
  goto bb7
  
  label bb7
  // ========== bb7 ==========
  
  // [mir] StorageDead(_11)
  
  // Ownership facts
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _10,
    version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(6,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  
  // [mir] _9 = Eq(move _10, const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10,
    old_version)) ==
    get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _9,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _9, version)
  
  // [mir] _8 = Not(move _9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // Ownership facts
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _8,
    version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  
  // [mir] switchInt(move _8) -> [0: bb9, otherwise: bb8]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageLive(_12)
  
  // Ownership facts
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _8,
    version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  // assume Allocated(_12: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _12, version)
  
  // [mir] _12 = core::panicking::panic(const "assertion failed: super_phone_3000.on_sale.get() == false") -> bb13
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: super_phone_3000.on_sale.get() == false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_8: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_call_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb9
  // ========== bb9 ==========
  
  // Ownership facts
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _8,
    version)
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _8, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _7, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  
  // [mir] _7 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_7,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_8: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageLive(_13)
  
  // [mir] StorageLive(_14)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _14, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _13, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(4,
    _1, version)
  
  // [mir] _14 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_14, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: PhoneModel)
  inhale owns_as_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _14,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: PhoneModel)
  inhale owns_as_Allocated_Adt$easy_rust_41_cell$$PhoneModel__$TY$__$int$$Address$Adt$easy_rust_41_cell$$PhoneModel$Version$$bool$(5,
    _1, version)
  
  // [mir] switchInt(move _14) -> [0: bb11, otherwise: bb10]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_14,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: PhoneModel)
  inhale frame_across_stmt_WriteRef_Adt$easy_rust_41_cell$$PhoneModel__$TY$__Address$Adt$easy_rust_41_cell$$PhoneModel$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label l0
  // ========== l0 ==========
  // MIR edge bb7 --> bb9
  goto bb9
  
  label l1
  // ========== l1 ==========
  // MIR edge bb7 --> bb8
  goto bb8
  
  label l2
  // ========== l2 ==========
  // MIR edge bb9 --> bb11
  goto bb11
  
  label l3
  // ========== l3 ==========
  // MIR edge bb9 --> bb10
  goto bb10
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_libraries$$lib_mutex$$MutexSpec$$data_ptr()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$MutPtr$TypeParam$T
  var _1: Address$SharedRef$TypeParam$Self
  var _2: Address$MutPtr$TypeParam$Self
  var _3: Address$MutPtr$TypeParam$Self
  var _4: Address$ConstPtr$TypeParam$Self
  var _5: Address$ConstPtr$TypeParam$Self
  
  label start
  // ========== start ==========
  // Def path: "easy_rust_41_cell::libraries::lib_mutex::MutexSpec::data_ptr"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _3, version)
  
  // [mir] _5 = &raw const (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    version) ==
    new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: &Self)
  inhale frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _3, version)
  
  // [mir] _4 = _5
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    version) ==
    deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_5: *const Self)
  inhale frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(6,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = move _4 as *mut Self (PtrToPtr)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // [mir] AscribeUserType(_3, o, UserTypeProjection { base: UserType(2), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(7,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(8,
    _3, version)
  
  // [mir] _2 = _3
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    version) ==
    deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    old_version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_3: *mut Self)
  inhale frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _0 = <Self as libraries::lib_mutex::MutexSpec<T>>::data_ptr_offset(move _2) -> [return: bb1, unwind: bb2]
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(_0,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    old_version)))))
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(_0,
    version)) ==
    get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(_1,
    version))))))))))))))
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)


method bumpVersion(version: Version) returns (new_version: Version)
