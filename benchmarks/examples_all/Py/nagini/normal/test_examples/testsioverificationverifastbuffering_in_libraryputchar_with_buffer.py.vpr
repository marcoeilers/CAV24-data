domain PyType  {
  
  function extends_(sub: PyType, super: PyType): Bool 
  
  function issubtype(sub: PyType, super: PyType): Bool 
  
  function isnotsubtype(sub: PyType, super: PyType): Bool 
  
  function tuple_args(t: PyType): Seq[PyType] 
  
  function typeof(obj: Ref): PyType 
  
  function get_basic(t: PyType): PyType 
  
  function union_type_1(arg_1: PyType): PyType 
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType 
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType 
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType 
  
  unique function object(): PyType 
  
  unique function list_basic(): PyType 
  
  function list(arg0: PyType): PyType 
  
  function list_arg(typ: PyType, index: Int): PyType 
  
  unique function set_basic(): PyType 
  
  function set(arg0: PyType): PyType 
  
  function set_arg(typ: PyType, index: Int): PyType 
  
  unique function dict_basic(): PyType 
  
  function dict(arg0: PyType, arg1: PyType): PyType 
  
  function dict_arg(typ: PyType, index: Int): PyType 
  
  unique function int(): PyType 
  
  unique function float(): PyType 
  
  unique function bool(): PyType 
  
  unique function NoneType(): PyType 
  
  unique function Exception(): PyType 
  
  unique function ConnectionRefusedError(): PyType 
  
  unique function traceback(): PyType 
  
  unique function str(): PyType 
  
  unique function bytes(): PyType 
  
  unique function tuple_basic(): PyType 
  
  function tuple(args: Seq[PyType]): PyType 
  
  function tuple_arg(typ: PyType, index: Int): PyType 
  
  unique function PSeq_basic(): PyType 
  
  function PSeq(arg0: PyType): PyType 
  
  function PSeq_arg(typ: PyType, index: Int): PyType 
  
  unique function PSet_basic(): PyType 
  
  function PSet(arg0: PyType): PyType 
  
  function PSet_arg(typ: PyType, index: Int): PyType 
  
  unique function PMultiset_basic(): PyType 
  
  function PMultiset(arg0: PyType): PyType 
  
  function PMultiset_arg(typ: PyType, index: Int): PyType 
  
  unique function slice(): PyType 
  
  unique function range_0(): PyType 
  
  unique function Iterator_basic(): PyType 
  
  function Iterator(arg0: PyType): PyType 
  
  function Iterator_arg(typ: PyType, index: Int): PyType 
  
  unique function Thread_0(): PyType 
  
  unique function LevelType(): PyType 
  
  unique function type(): PyType 
  
  unique function Place(): PyType 
  
  unique function __prim__Seq_type(): PyType 
  
  unique function StandardLibrary(): PyType 
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), issubtype(middle, super) }
      issubtype(sub, middle) && issubtype(middle, super) ==>
      issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType ::
      { issubtype(type_, type_) }
      issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType ::
      { extends_(sub, sub2) }
      extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref ::
      { typeof(r) }
      issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType ::
      { issubtype(type_, object()) }
      issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType ::
      { extends_(sub, super), extends_(sub2, super) }
      extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==>
      isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType ::
      { issubtype(sub, super) }
      { issubtype(super, sub) }
      issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), isnotsubtype(middle, super) }
      issubtype(sub, middle) && isnotsubtype(middle, super) ==>
      !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType ::
      { tuple(seq), tuple_arg(Z, i) }
      issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType ::
      { issubtype(Z, tuple(seq)) }
      issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] ::seq1 != seq2 &&
      |seq1| == |seq2| &&
      (forall i: Int ::i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==>
      issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(X, union_type_1(arg_1)) }
      issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(X, union_type_2(arg_1, arg_2)) }
      issubtype(X, union_type_2(arg_1, arg_2)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) }
      issubtype(X, union_type_3(arg_1, arg_2, arg_3)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) }
      issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3) ||
      issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(union_type_1(arg_1), X) }
      issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(union_type_2(arg_1, arg_2), X) }
      issubtype(union_type_2(arg_1, arg_2), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(union_type_3(arg_1, arg_2, arg_3), X) }
      issubtype(union_type_3(arg_1, arg_2, arg_3), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) }
      issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X) &&
      issubtype(arg_4, X)))
  }
  
  axiom subtype_list {
    (forall var0: PyType ::
      { list(var0) }
      extends_(list(var0), object()) &&
      get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType ::
      { list(arg0), list_arg(Z, 0) }
      issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType ::
      { set(var0) }
      extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType ::
      { set(arg0), set_arg(Z, 0) }
      issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType ::
      { dict(var0, var1) }
      extends_(dict(var0, var1), object()) &&
      get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 0) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 1) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) &&
    get_basic(Exception()) == Exception()
  }
  
  axiom subtype_ConnectionRefusedError {
    extends_(ConnectionRefusedError(), Exception()) &&
    get_basic(ConnectionRefusedError()) == ConnectionRefusedError()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) &&
    get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] ::
      { tuple(args) }
      ((forall e: PyType ::(e in args) ==> e == object()) ==>
      extends_(tuple(args), object())) &&
      get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_PSeq {
    (forall var0: PyType ::
      { PSeq(var0) }
      extends_(PSeq(var0), object()) &&
      get_basic(PSeq(var0)) == PSeq_basic())
  }
  
  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSeq(arg0), PSeq_arg(Z, 0) }
      issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType ::
      { PSet(var0) }
      extends_(PSet(var0), object()) &&
      get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSet(arg0), PSet_arg(Z, 0) }
      issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PMultiset {
    (forall var0: PyType ::
      { PMultiset(var0) }
      extends_(PMultiset(var0), object()) &&
      get_basic(PMultiset(var0)) == PMultiset_basic())
  }
  
  axiom PMultiset_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PMultiset(arg0), PMultiset_arg(Z, 0) }
      issubtype(Z, PMultiset(arg0)) ==> PMultiset_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range_0 {
    extends_(range_0(), object()) && get_basic(range_0()) == range_0()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType ::
      { Iterator(var0) }
      extends_(Iterator(var0), object()) &&
      get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType ::
      { Iterator(arg0), Iterator_arg(Z, 0) }
      issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_LevelType {
    extends_(LevelType(), object()) &&
    get_basic(LevelType()) == LevelType()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype___prim__Seq_type {
    extends_(__prim__Seq_type(), object()) &&
    get_basic(__prim__Seq_type()) == __prim__Seq_type()
  }
  
  axiom subtype_StandardLibrary {
    extends_(StandardLibrary(), object()) &&
    get_basic(StandardLibrary()) == StandardLibrary()
  }
}

domain Function  {
  
  
}

domain SIFDomain[T]  {
  
  function Low(x: T): Bool 
  
  function LowEvent(): Bool 
  
  axiom low_true {
    (forall x: T :: { (Low(x): Bool) } (Low(x): Bool))
  }
  
  axiom lowevent_true {
    (LowEvent(): Bool)
  }
}

domain _list_ce_helper  {
  
  function seq_ref_length(___s: Seq[Ref]): Int 
  
  function seq_ref_index(___s: Seq[Ref], i: Int): Ref 
  
  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }
  
  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int ::
      { ___s[___i] }
      ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$  {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$ 
  
  function Measure$guard(m: Measure$): Bool 
  
  function Measure$key(m: Measure$): Ref 
  
  function Measure$value(m: Measure$): Int 
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$guard(Measure$create(g, k, v)) }
      Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$key(Measure$create(g, k, v)) }
      Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$value(Measure$create(g, k, v)) }
      Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain __MSHelper[T$]  {
  
  function __toMS(s: Seq[T$]): Multiset[T$] 
  
  axiom __toMS_def_1 {
    (__toMS(Seq[T$]()): Multiset[T$]) == Multiset[T$]()
  }
  
  axiom __toMS_def_2 {
    (forall __t: T$ ::
      { (__toMS(Seq(__t)): Multiset[T$]) }
      (__toMS(Seq(__t)): Multiset[T$]) == Multiset(__t))
  }
  
  axiom __toMS_def_3 {
    (forall __ss1: Seq[T$], __ss2: Seq[T$] ::
      { (__toMS(__ss1 ++ __ss2): Multiset[T$]) }
      (__toMS(__ss1 ++ __ss2): Multiset[T$]) ==
      ((__toMS(__ss1): Multiset[T$]) union (__toMS(__ss2): Multiset[T$])))
  }
  
  axiom __toMS_def_4 {
    (forall __ss1: Seq[T$] ::
      { (__toMS(__ss1): Multiset[T$]) }
      |(__toMS(__ss1): Multiset[T$])| == |__ss1|)
  }
}

domain _Name  {
  
  function _combine(n1: _Name, n2: _Name): _Name 
  
  function _single(n: Int): _Name 
  
  function _get_combined_prefix(n: _Name): _Name 
  
  function _get_combined_name(n: _Name): _Name 
  
  function _get_value(n: _Name): Int 
  
  function _name_type(n: _Name): Bool 
  
  function _is_single(n: _Name): Bool 
  
  function _is_combined(n: _Name): Bool 
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom compose_single {
    (forall n: _Name ::
      { _get_value(n) }
      _is_single(n) ==> n == _single(_get_value(n)))
  }
  
  axiom type_of_single {
    (forall i: Int :: { _single(i) } _name_type(_single(i)))
  }
  
  axiom decompose_combined {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      _get_combined_prefix(_combine(n1, n2)) == n1 &&
      _get_combined_name(_combine(n1, n2)) == n2)
  }
  
  axiom compose_combined {
    (forall n: _Name ::
      { _get_combined_prefix(n) }
      { _get_combined_name(n) }
      _is_combined(n) ==>
      n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom type_of_composed {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      !_name_type(_combine(n1, n2)))
  }
  
  axiom type_is_single {
    (forall n: _Name :: { _name_type(n) } _name_type(n) == _is_single(n))
  }
  
  axiom type_is_combined {
    (forall n: _Name ::
      { _name_type(n) }
      !_name_type(n) == _is_combined(n))
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
}

domain PredicateInstance  {
  
  
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Map[Ref,Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field StandardLibrary_buffer: Ref

field StandardLibrary_buffer_size: Ref

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function get__syscall_putchar_io__t_post(t_pre: Ref, c_1: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__stdlib_putchar_io__t_post_0(t_pre_0: Ref, c_2: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__no_op_io__t_post_1(t_pre_7: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__split_io__t_post1(t_pre_8: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__split_io__t_post2(t_pre_8: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__join_io__t_post_2(t_pre1_0: Ref, t_pre2_0: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__gap_io__t_post_3(t_pre_9: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__set_var_io__result_0(t_pre_11: Ref, value_1: Int): Int


function get__set_var_io__t_post_4(t_pre_11: Ref, value_1: Int): Ref
  ensures issubtype(typeof(result), Place())


function get__eval_io__result_1(t_pre_12: Ref, func_0: Function, arg_13: Ref): Ref
  ensures issubtype(typeof(result), object())


function get__eval_io__t_post_5(t_pre_12: Ref, func_0: Function, arg_13: Ref): Ref
  ensures issubtype(typeof(result), Place())


function __prim__int___box__(prim: Int): Ref
  decreases _
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


function int___unbox__(box: Ref): Int
  decreases _
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==>
    __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==>
    __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  decreases _
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  decreases _
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function int___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

function Place___eq__(self: Ref, other: Ref): Bool
  decreases _
  ensures result == (self == other)


function Level(r: Ref): Perm
  decreases _


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool
  decreases _
{
  (forall m: Measure$ ::
    { (m in map) }
    (m in map) ==>
    Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  decreases _
  ensures result >= 0


function str___val__(self: Ref): Int
  decreases _


function str___create__(len: Int, value: Int): Ref
  decreases _
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


function tuple___val__(self: Ref): Seq[Ref]
  decreases _


function tuple___create2__(arg0: Ref, arg1: Ref, t0: PyType, t1: PyType, ctr: Int): Ref
  decreases _
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1))
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple___val__(result) == Seq(arg0, arg1)
  ensures tuple___len__(result) == 2 &&
    (tuple___getitem__(result, 0) == arg0 &&
    tuple___getitem__(result, 1) == arg1)


function tuple___len__(self: Ref): Int
  decreases _
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)|


function tuple___getitem__(self: Ref, key: Int): Ref
  decreases _
  requires (let ln ==
      (tuple___len__(self)) in
      (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==>
    issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==>
    issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) +
    key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==>
    result == tuple___val__(self)[tuple___len__(self) + key]


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate stdlib(lib_2: Ref, t1_3: Ref, t2_1: Ref) {
  true && issubtype(typeof(lib_2), StandardLibrary()) &&
  issubtype(typeof(t1_3), Place()) &&
  issubtype(typeof(t2_1), Place()) &&
  (acc(lib_2.StandardLibrary_buffer, write) &&
  issubtype(typeof(lib_2.StandardLibrary_buffer), str()) &&
  (acc(lib_2.StandardLibrary_buffer_size, write) &&
  issubtype(typeof(lib_2.StandardLibrary_buffer_size), int()) &&
  (int___eq__(lib_2.StandardLibrary_buffer_size, __prim__int___box__(1)) ?
    acc(syscall_putchar_io(t1_3, lib_2.StandardLibrary_buffer), write) &&
    get__syscall_putchar_io__t_post(t1_3, lib_2.StandardLibrary_buffer) ==
    t2_1 :
    int___eq__(lib_2.StandardLibrary_buffer_size, __prim__int___box__(0)) &&
    Place___eq__(t1_3, t2_1))))
}

predicate syscall_putchar_io(t_pre: Ref, c_1: Ref) 

predicate stdlib_putchar_io(t_pre_0: Ref, c_2: Ref) 

predicate no_op_io(t_pre_7: Ref) 

predicate split_io(t_pre_8: Ref) 

predicate join_io(t_pre1_0: Ref, t_pre2_0: Ref) 

predicate gap_io(t_pre_9: Ref) 

predicate end_io(t_pre_10: Ref) 

predicate set_var_io(t_pre_11: Ref, value_1: Int) 

predicate eval_io(t_pre_12: Ref, func_0: Function, arg_13: Ref) 

method syscall_putchar(_cthread_156: Ref, _caller_measures_156: Seq[Measure$],
  _residue_156: Perm, t1: Ref, c: Ref)
  returns (_current_wait_level_156: Perm, _res: Ref)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(t1), Place())
  requires issubtype(typeof(c), str())
  requires [acc(MustInvokeBounded(t1), write),
    (perm(MustInvokeBounded(t1)) > none &&
    Measure$check(_caller_measures_156, t1, 1) ?
      acc(MustInvokeBounded(t1), write) :
      (perm(MustInvokeUnbounded(t1)) > none ?
        acc(MustInvokeUnbounded(t1), write) :
        acc(MustInvokeCredit(t1), write)))] &&
    (acc(syscall_putchar_io(t1, c), write) &&
    [acc(MustTerminate(_cthread_156), write), true])
  requires [true,
    Measure$check(_caller_measures_156, _cthread_156, 1) ||
    perm(MustTerminate(_cthread_156)) == none &&
    ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) &&
    ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) &&
    ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) &&
    (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r: Ref [_r.MustReleaseBounded] :: Level(_r) <=
      _current_wait_level_156) &&
    ((forperm
      _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <=
      _current_wait_level_156) &&
    _residue_156 <= _current_wait_level_156),
    true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__syscall_putchar_io__t_post(t1, c))), write),
    (perm(MustInvokeUnbounded(old(get__syscall_putchar_io__t_post(t1, c)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__syscall_putchar_io__t_post(t1, c))), write) :
      acc(MustInvokeCredit(old(get__syscall_putchar_io__t_post(t1, c))), write))] &&
    Place___eq__(old(get__syscall_putchar_io__t_post(t1, c)), _res)
{
  var _cwl_156: Perm
  _res := null
  inhale false
}

method stdlib_putchar(_cthread_157: Ref, _caller_measures_157: Seq[Measure$],
  _residue_157: Perm, lib: Ref, c_0: Ref, t1_0: Ref, t_postponed: Ref)
  returns (_current_wait_level_157: Perm, _res: Ref)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(lib), StandardLibrary())
  requires issubtype(typeof(c_0), str())
  requires issubtype(typeof(t1_0), Place())
  requires issubtype(typeof(t_postponed), Place())
  requires [acc(MustInvokeBounded(t1_0), write),
    (perm(MustInvokeBounded(t1_0)) > none &&
    Measure$check(_caller_measures_157, t1_0, 2) ?
      acc(MustInvokeBounded(t1_0), write) :
      (perm(MustInvokeUnbounded(t1_0)) > none ?
        acc(MustInvokeUnbounded(t1_0), write) :
        acc(MustInvokeCredit(t1_0), write)))] &&
    (acc(stdlib(lib, t1_0, t_postponed), write) &&
    (acc(stdlib_putchar_io(t_postponed, c_0), write) &&
    [acc(MustTerminate(_cthread_157), write), true]))
  requires [true,
    Measure$check(_caller_measures_157, _cthread_157, 2) ||
    perm(MustTerminate(_cthread_157)) == none &&
    ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) &&
    ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) &&
    ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) &&
    (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <=
      _current_wait_level_157) &&
    ((forperm
      _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <=
      _current_wait_level_157) &&
    _residue_157 <= _current_wait_level_157),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), Place())))
  ensures true &&
    (Place___eq__(old(get__stdlib_putchar_io__t_post_0(t_postponed, c_0)), tuple___getitem__(_res,
    1)) &&
    (acc(stdlib(lib, old(tuple___getitem__(_res, 0)), old(get__stdlib_putchar_io__t_post_0(t_postponed,
    c_0))), write) &&
    [acc(MustInvokeBounded(old(tuple___getitem__(_res, 0))), write),
    (perm(MustInvokeBounded(old(tuple___getitem__(_res, 0)))) > none ?
      acc(MustInvokeBounded(old(tuple___getitem__(_res, 0))), write) :
      (perm(MustInvokeUnbounded(old(tuple___getitem__(_res, 0)))) > none ?
        acc(MustInvokeUnbounded(old(tuple___getitem__(_res, 0))), write) :
        acc(MustInvokeCredit(old(tuple___getitem__(_res, 0))), write)))]))
  ensures [true,
    (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) &&
    ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) &&
    ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) &&
    (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2: Ref
  var t3: Ref
  var t4: Ref
  var lib_3: Ref
  var c_3: Ref
  var t1_4: Ref
  var t_postponed_2: Ref
  var t_post_6: Ref
  var syscall_putchar_res: Ref
  var syscall_putchar_res_0: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq(Measure$create(true, _cthread_157, 2), Measure$create(true,
    t1_0, 2))
  _res := null
  _err := null
  lib_3 := lib
  c_3 := c_0
  t1_4 := t1_0
  t_postponed_2 := t_postponed
  unfold acc(stdlib(lib_3, t1_4, t_postponed_2), write)
  exhale acc(stdlib_putchar_io(t_postponed_2, c_3), write)
  inhale acc(syscall_putchar_io(t_postponed_2, c_3), write) &&
    get__syscall_putchar_io__t_post(t_postponed_2, c_3) ==
    get__stdlib_putchar_io__t_post_0(t_postponed_2, c_3)
  if (int___eq__(lib_3.StandardLibrary_buffer_size, __prim__int___box__(1))) {
    _cwl_157, syscall_putchar_res := syscall_putchar(_cthread_157, _method_measures_157,
      _residue_157, t1_4, lib_3.StandardLibrary_buffer)
    t2 := syscall_putchar_res
    inhale _isDefined(12916)
    _cwl_157, syscall_putchar_res_0 := syscall_putchar(_cthread_157, _method_measures_157,
      _residue_157, _checkDefined(t2, 12916), c_3)
    t3 := syscall_putchar_res_0
    inhale _isDefined(13172)
    if (perm(_MaySet(lib_3, 41745698438376053106687204206863945901616393661025120878334145619)) >
    none) {
      exhale acc(_MaySet(lib_3, 41745698438376053106687204206863945901616393661025120878334145619), write)
      inhale acc(lib_3.StandardLibrary_buffer_size, write)
    }
    lib_3.StandardLibrary_buffer_size := __prim__int___box__(0)
    fold acc(stdlib(lib_3, _checkDefined(t3, 13172), _checkDefined(t3, 13172)), write)
    _res := tuple___create2__(_checkDefined(t3, 13172), _checkDefined(t3, 13172),
      Place(), Place(), 0)
    goto __end
  } else {
    if (perm(_MaySet(lib_3, 42800660051195738274571578047054904997811523458004051)) >
    none) {
      exhale acc(_MaySet(lib_3, 42800660051195738274571578047054904997811523458004051), write)
      inhale acc(lib_3.StandardLibrary_buffer, write)
    }
    lib_3.StandardLibrary_buffer := c_3
    if (perm(_MaySet(lib_3, 41745698438376053106687204206863945901616393661025120878334145619)) >
    none) {
      exhale acc(_MaySet(lib_3, 41745698438376053106687204206863945901616393661025120878334145619), write)
      inhale acc(lib_3.StandardLibrary_buffer_size, write)
    }
    lib_3.StandardLibrary_buffer_size := __prim__int___box__(1)
    t4 := get__stdlib_putchar_io__t_post_0(t_postponed_2, c_3)
    inhale _isDefined(13428)
    fold acc(stdlib(lib_3, t1_4, _checkDefined(t4, 13428)), write)
    _res := tuple___create2__(t1_4, _checkDefined(t4, 13428), Place(), Place(),
      1)
    goto __end
  }
  goto __end
  label __end
}

method stdlib_flush_stdout(_cthread_158: Ref, _caller_measures_158: Seq[Measure$],
  _residue_158: Perm, lib_0: Ref, t1_1: Ref, t_postponed_0: Ref)
  returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(lib_0), StandardLibrary())
  requires issubtype(typeof(t1_1), Place())
  requires issubtype(typeof(t_postponed_0), Place())
  requires [acc(MustInvokeBounded(t1_1), write),
    (perm(MustInvokeBounded(t1_1)) > none &&
    Measure$check(_caller_measures_158, t1_1, 3) ?
      acc(MustInvokeBounded(t1_1), write) :
      (perm(MustInvokeUnbounded(t1_1)) > none ?
        acc(MustInvokeUnbounded(t1_1), write) :
        acc(MustInvokeCredit(t1_1), write)))] &&
    (acc(stdlib(lib_0, t1_1, t_postponed_0), write) &&
    [acc(MustTerminate(_cthread_158), write), true])
  requires [true,
    Measure$check(_caller_measures_158, _cthread_158, 2) ||
    perm(MustTerminate(_cthread_158)) == none &&
    ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) &&
    ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) &&
    ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) &&
    (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <=
      _current_wait_level_158) &&
    ((forperm
      _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <=
      _current_wait_level_158) &&
    _residue_158 <= _current_wait_level_158),
    true]
  ensures [acc(MustInvokeBounded(t_postponed_0), write),
    (perm(MustInvokeBounded(t_postponed_0)) > none ?
      acc(MustInvokeBounded(t_postponed_0), write) :
      (perm(MustInvokeUnbounded(t_postponed_0)) > none ?
        acc(MustInvokeUnbounded(t_postponed_0), write) :
        acc(MustInvokeCredit(t_postponed_0), write)))] &&
    acc(stdlib(lib_0, t_postponed_0, t_postponed_0), write)
  ensures [true,
    (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) &&
    (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var lib_4: Ref
  var t1_5: Ref
  var t_postponed_3: Ref
  var syscall_putchar_res_1: Ref
  var expr_res: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq(Measure$create(true, _cthread_158, 2), Measure$create(true,
    t1_1, 3))
  _err := null
  lib_4 := lib_0
  t1_5 := t1_1
  t_postponed_3 := t_postponed_0
  unfold acc(stdlib(lib_4, t1_5, t_postponed_3), write)
  if (int___eq__(lib_4.StandardLibrary_buffer_size, __prim__int___box__(1))) {
    _cwl_158, syscall_putchar_res_1 := syscall_putchar(_cthread_158, _method_measures_158,
      _residue_158, t1_5, lib_4.StandardLibrary_buffer)
    expr_res := syscall_putchar_res_1
    if (perm(_MaySet(lib_4, 41745698438376053106687204206863945901616393661025120878334145619)) >
    none) {
      exhale acc(_MaySet(lib_4, 41745698438376053106687204206863945901616393661025120878334145619), write)
      inhale acc(lib_4.StandardLibrary_buffer_size, write)
    }
    lib_4.StandardLibrary_buffer_size := __prim__int___box__(0)
  }
  fold acc(stdlib(lib_4, t_postponed_3, t_postponed_3), write)
  goto __end
  label __end
}

method main(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm,
  t1_2: Ref, lib_1: Ref)
  returns (_current_wait_level_159: Perm, _res: Ref)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(t1_2), Place())
  requires issubtype(typeof(lib_1), StandardLibrary())
  requires [acc(MustInvokeUnbounded(t1_2), write),
    (perm(MustInvokeUnbounded(t1_2)) > none ?
      acc(MustInvokeUnbounded(t1_2), write) :
      acc(MustInvokeCredit(t1_2), write))] &&
    (acc(stdlib(lib_1, t1_2, t1_2), write) &&
    (acc(stdlib_putchar_io(t1_2, str___create__(1, 104)), write) &&
    (acc(stdlib_putchar_io(get__stdlib_putchar_io__t_post_0(t1_2, str___create__(1,
    104)), str___create__(1, 105)), write) &&
    [acc(MustTerminate(_cthread_159), write), true])))
  requires [true,
    Measure$check(_caller_measures_159, _cthread_159, 4) ||
    perm(MustTerminate(_cthread_159)) == none &&
    ((forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) &&
    ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) &&
    ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) &&
    (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <=
      _current_wait_level_159) &&
    ((forperm
      _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <=
      _current_wait_level_159) &&
    _residue_159 <= _current_wait_level_159),
    true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeBounded(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
    str___create__(1, 104)), str___create__(1, 105)))), write),
    (perm(MustInvokeBounded(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
    str___create__(1, 104)), str___create__(1, 105))))) >
    none ?
      acc(MustInvokeBounded(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
      str___create__(1, 104)), str___create__(1, 105)))), write) :
      (perm(MustInvokeUnbounded(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
      str___create__(1, 104)), str___create__(1, 105))))) >
      none ?
        acc(MustInvokeUnbounded(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
        str___create__(1, 104)), str___create__(1, 105)))), write) :
        acc(MustInvokeCredit(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
        str___create__(1, 104)), str___create__(1, 105)))), write)))] &&
    (acc(stdlib(lib_1, old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
    str___create__(1, 104)), str___create__(1, 105))), old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
    str___create__(1, 104)), str___create__(1, 105)))), write) &&
    Place___eq__(old(get__stdlib_putchar_io__t_post_0(get__stdlib_putchar_io__t_post_0(t1_2,
    str___create__(1, 104)), str___create__(1, 105))), _res))
  ensures [true,
    (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) &&
    ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) &&
    ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) &&
    (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_0: Ref
  var t_postponed_1: Ref
  var t3_0: Ref
  var t1_6: Ref
  var lib_5: Ref
  var stdlib_putchar_res: Ref
  var stdlib_putchar_res_0: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  if (perm(MustInvokeUnbounded(t1_2)) > none) {
    exhale acc(MustInvokeUnbounded(t1_2), write)
    inhale acc(MustInvokeBounded(t1_2), write)
  }
  _method_measures_159 := Seq(Measure$create(true, _cthread_159, 4))
  _res := null
  _err := null
  t1_6 := t1_2
  lib_5 := lib_1
  _cwl_159, stdlib_putchar_res := stdlib_putchar(_cthread_159, _method_measures_159,
    _residue_159, lib_5, str___create__(1, 104), t1_6, t1_6)
  assert 2 == tuple___len__(stdlib_putchar_res)
  t2_0 := tuple___getitem__(stdlib_putchar_res, 0)
  inhale _isDefined(811545204)
  t_postponed_1 := tuple___getitem__(stdlib_putchar_res, 1)
  inhale _isDefined(3911702410710128450646936936308)
  _cwl_159, stdlib_putchar_res_0 := stdlib_putchar(_cthread_159, _method_measures_159,
    _residue_159, lib_5, str___create__(1, 105), _checkDefined(t2_0, 811545204),
    _checkDefined(t_postponed_1, 3911702410710128450646936936308))
  assert 2 == tuple___len__(stdlib_putchar_res_0)
  t3_0 := tuple___getitem__(stdlib_putchar_res_0, 0)
  inhale _isDefined(811545460)
  t_postponed_1 := tuple___getitem__(stdlib_putchar_res_0, 1)
  inhale _isDefined(3911702410710128450646936936308)
  _cwl_159 := stdlib_flush_stdout(_cthread_159, _method_measures_159, _residue_159,
    lib_5, _checkDefined(t3_0, 811545460), _checkDefined(t_postponed_1, 3911702410710128450646936936308))
  _res := _checkDefined(t_postponed_1, 3911702410710128450646936936308)
  goto __end
  goto __end
  label __end
}

method StandardLibrary___init__(_cthread_155: Ref, _caller_measures_155: Seq[Measure$],
  _residue_155: Perm, self: Ref)
  returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 42800660051195738274571578047054904997811523458004051), write)
  requires acc(_MaySet(self, 41745698438376053106687204206863945901616393661025120878334145619), write)
  requires issubtype(typeof(self), StandardLibrary())
  requires self != null
  requires [true,
    perm(MustTerminate(_cthread_155)) == none &&
    ((forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) &&
    ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) &&
    ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) &&
    (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <=
      _current_wait_level_155) &&
    ((forperm
      _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <=
      _current_wait_level_155) &&
    _residue_155 <= _current_wait_level_155),
    true]
  ensures [true,
    (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) &&
    ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) &&
    ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) &&
    (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_0: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  inhale typeof(self) == StandardLibrary()
  _err := null
  self_0 := self
  if (perm(_MaySet(self_0, 42800660051195738274571578047054904997811523458004051)) >
  none) {
    exhale acc(_MaySet(self_0, 42800660051195738274571578047054904997811523458004051), write)
    inhale acc(self_0.StandardLibrary_buffer, write)
  }
  self_0.StandardLibrary_buffer := null
  if (perm(_MaySet(self_0, 41745698438376053106687204206863945901616393661025120878334145619)) >
  none) {
    exhale acc(_MaySet(self_0, 41745698438376053106687204206863945901616393661025120878334145619), write)
    inhale acc(self_0.StandardLibrary_buffer_size, write)
  }
  self_0.StandardLibrary_buffer_size := __prim__int___box__(0)
  goto __end
  label __end
}

method NoOp(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm,
  t_pre_1: Ref)
  returns (_current_wait_level_161: Perm, _res: Ref)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires issubtype(typeof(t_pre_1), Place())
  requires [acc(MustInvokeBounded(t_pre_1), write),
    (perm(MustInvokeBounded(t_pre_1)) > none &&
    Measure$check(_caller_measures_161, t_pre_1, 1) ?
      acc(MustInvokeBounded(t_pre_1), write) :
      (perm(MustInvokeUnbounded(t_pre_1)) > none ?
        acc(MustInvokeUnbounded(t_pre_1), write) :
        acc(MustInvokeCredit(t_pre_1), write)))] &&
    (acc(no_op_io(t_pre_1), write) &&
    [acc(MustTerminate(_cthread_161), write), true])
  requires [true,
    Measure$check(_caller_measures_161, _cthread_161, 1) ||
    perm(MustTerminate(_cthread_161)) == none &&
    ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) &&
    ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) &&
    ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) &&
    (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <=
      _current_wait_level_161) &&
    ((forperm
      _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <=
      _current_wait_level_161) &&
    _residue_161 <= _current_wait_level_161),
    true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__no_op_io__t_post_1(t_pre_1))), write),
    (perm(MustInvokeUnbounded(old(get__no_op_io__t_post_1(t_pre_1)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__no_op_io__t_post_1(t_pre_1))), write) :
      acc(MustInvokeCredit(old(get__no_op_io__t_post_1(t_pre_1))), write))] &&
    Place___eq__(old(get__no_op_io__t_post_1(t_pre_1)), _res)
{
  var _cwl_161: Perm
  _res := null
  inhale false
}

method Split(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm,
  t_pre_2: Ref)
  returns (_current_wait_level_162: Perm, _res: Ref)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires issubtype(typeof(t_pre_2), Place())
  requires [acc(MustInvokeBounded(t_pre_2), write),
    (perm(MustInvokeBounded(t_pre_2)) > none &&
    Measure$check(_caller_measures_162, t_pre_2, 1) ?
      acc(MustInvokeBounded(t_pre_2), write) :
      (perm(MustInvokeUnbounded(t_pre_2)) > none ?
        acc(MustInvokeUnbounded(t_pre_2), write) :
        acc(MustInvokeCredit(t_pre_2), write)))] &&
    (acc(split_io(t_pre_2), write) &&
    [acc(MustTerminate(_cthread_162), write), true])
  requires [true,
    Measure$check(_caller_measures_162, _cthread_162, 1) ||
    perm(MustTerminate(_cthread_162)) == none &&
    ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) &&
    ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) &&
    ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) &&
    (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <=
      _current_wait_level_162) &&
    ((forperm
      _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <=
      _current_wait_level_162) &&
    _residue_162 <= _current_wait_level_162),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_2))), write),
    (perm(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_2)))) > none ?
      acc(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_2))), write) :
      acc(MustInvokeCredit(old(get__split_io__t_post1(t_pre_2))), write))] &&
    (Place___eq__(old(get__split_io__t_post1(t_pre_2)), tuple___getitem__(_res,
    0)) &&
    ([acc(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_2))), write),
    (perm(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_2)))) > none ?
      acc(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_2))), write) :
      acc(MustInvokeCredit(old(get__split_io__t_post2(t_pre_2))), write))] &&
    Place___eq__(old(get__split_io__t_post2(t_pre_2)), tuple___getitem__(_res,
    1))))
{
  var _cwl_162: Perm
  _res := null
  inhale false
}

method Join(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm,
  t_pre1: Ref, t_pre2: Ref)
  returns (_current_wait_level_163: Perm, _res: Ref)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires issubtype(typeof(t_pre1), Place())
  requires issubtype(typeof(t_pre2), Place())
  requires [acc(MustInvokeBounded(t_pre1), write),
    (perm(MustInvokeBounded(t_pre1)) > none &&
    Measure$check(_caller_measures_163, t_pre1, 1) ?
      acc(MustInvokeBounded(t_pre1), write) :
      (perm(MustInvokeUnbounded(t_pre1)) > none ?
        acc(MustInvokeUnbounded(t_pre1), write) :
        acc(MustInvokeCredit(t_pre1), write)))] &&
    ([acc(MustInvokeBounded(t_pre2), write),
    (perm(MustInvokeBounded(t_pre2)) > none &&
    Measure$check(_caller_measures_163, t_pre2, 1) ?
      acc(MustInvokeBounded(t_pre2), write) :
      (perm(MustInvokeUnbounded(t_pre2)) > none ?
        acc(MustInvokeUnbounded(t_pre2), write) :
        acc(MustInvokeCredit(t_pre2), write)))] &&
    (acc(join_io(t_pre1, t_pre2), write) &&
    [acc(MustTerminate(_cthread_163), write), true]))
  requires [true,
    Measure$check(_caller_measures_163, _cthread_163, 1) ||
    perm(MustTerminate(_cthread_163)) == none &&
    ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) &&
    ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) &&
    ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) &&
    (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <=
      _current_wait_level_163) &&
    ((forperm
      _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <=
      _current_wait_level_163) &&
    _residue_163 <= _current_wait_level_163),
    true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__join_io__t_post_2(t_pre1, t_pre2))), write),
    (perm(MustInvokeUnbounded(old(get__join_io__t_post_2(t_pre1, t_pre2)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__join_io__t_post_2(t_pre1, t_pre2))), write) :
      acc(MustInvokeCredit(old(get__join_io__t_post_2(t_pre1, t_pre2))), write))] &&
    Place___eq__(old(get__join_io__t_post_2(t_pre1, t_pre2)), _res)
{
  var _cwl_163: Perm
  _res := null
  inhale false
}

method Gap(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm,
  t_pre_3: Ref)
  returns (_current_wait_level_164: Perm, _res: Ref)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires issubtype(typeof(t_pre_3), Place())
  requires [acc(MustInvokeBounded(t_pre_3), write),
    (perm(MustInvokeBounded(t_pre_3)) > none &&
    Measure$check(_caller_measures_164, t_pre_3, 1) ?
      acc(MustInvokeBounded(t_pre_3), write) :
      (perm(MustInvokeUnbounded(t_pre_3)) > none ?
        acc(MustInvokeUnbounded(t_pre_3), write) :
        acc(MustInvokeCredit(t_pre_3), write)))] &&
    (acc(gap_io(t_pre_3), write) &&
    [acc(MustTerminate(_cthread_164), write), true])
  requires [true,
    Measure$check(_caller_measures_164, _cthread_164, 1) ||
    perm(MustTerminate(_cthread_164)) == none &&
    ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) &&
    ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) &&
    ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) &&
    (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <=
      _current_wait_level_164) &&
    ((forperm
      _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <=
      _current_wait_level_164) &&
    _residue_164 <= _current_wait_level_164),
    true]
  ensures issubtype(typeof(_res), Place())
  ensures acc(MustInvokeCredit(old(get__gap_io__t_post_3(t_pre_3))), write) &&
    Place___eq__(old(get__gap_io__t_post_3(t_pre_3)), _res)
{
  var _cwl_164: Perm
  _res := null
  inhale false
}

method End(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm,
  t_pre_4: Ref)
  returns (_current_wait_level_165: Perm, _res: Ref)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires issubtype(typeof(t_pre_4), Place())
  requires [acc(MustInvokeBounded(t_pre_4), write),
    (perm(MustInvokeBounded(t_pre_4)) > none &&
    Measure$check(_caller_measures_165, t_pre_4, 1) ?
      acc(MustInvokeBounded(t_pre_4), write) :
      (perm(MustInvokeUnbounded(t_pre_4)) > none ?
        acc(MustInvokeUnbounded(t_pre_4), write) :
        acc(MustInvokeCredit(t_pre_4), write)))] &&
    (acc(end_io(t_pre_4), write) &&
    [acc(MustTerminate(_cthread_165), write), true])
  requires [true,
    Measure$check(_caller_measures_165, _cthread_165, 1) ||
    perm(MustTerminate(_cthread_165)) == none &&
    ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) &&
    ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) &&
    ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) &&
    (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <=
      _current_wait_level_165) &&
    ((forperm
      _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <=
      _current_wait_level_165) &&
    _residue_165 <= _current_wait_level_165),
    true]
  ensures issubtype(typeof(_res), Place())
{
  var _cwl_165: Perm
  _res := null
  inhale false
}

method SetVar(_cthread_166: Ref, _caller_measures_166: Seq[Measure$], _residue_166: Perm,
  t_pre_5: Ref, value_0: Ref)
  returns (_current_wait_level_166: Perm, _res: Ref)
  requires _cthread_166 != null
  requires issubtype(typeof(_cthread_166), Thread_0())
  requires issubtype(typeof(t_pre_5), Place())
  requires issubtype(typeof(value_0), int())
  requires [acc(MustInvokeBounded(t_pre_5), write),
    (perm(MustInvokeBounded(t_pre_5)) > none &&
    Measure$check(_caller_measures_166, t_pre_5, 1) ?
      acc(MustInvokeBounded(t_pre_5), write) :
      (perm(MustInvokeUnbounded(t_pre_5)) > none ?
        acc(MustInvokeUnbounded(t_pre_5), write) :
        acc(MustInvokeCredit(t_pre_5), write)))] &&
    (acc(set_var_io(t_pre_5, int___unbox__(value_0)), write) &&
    [acc(MustTerminate(_cthread_166), write), true])
  requires [true,
    Measure$check(_caller_measures_166, _cthread_166, 1) ||
    perm(MustTerminate(_cthread_166)) == none &&
    ((forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) &&
    ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) &&
    ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) &&
    (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <=
      _current_wait_level_166) &&
    ((forperm
      _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <=
      _current_wait_level_166) &&
    _residue_166 <= _current_wait_level_166),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(int(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__set_var_io__t_post_4(t_pre_5, int___unbox__(value_0)))), write),
    (perm(MustInvokeUnbounded(old(get__set_var_io__t_post_4(t_pre_5, int___unbox__(value_0))))) >
    none ?
      acc(MustInvokeUnbounded(old(get__set_var_io__t_post_4(t_pre_5, int___unbox__(value_0)))), write) :
      acc(MustInvokeCredit(old(get__set_var_io__t_post_4(t_pre_5, int___unbox__(value_0)))), write))] &&
    (Place___eq__(old(get__set_var_io__t_post_4(t_pre_5, int___unbox__(value_0))),
    tuple___getitem__(_res, 1)) &&
    (int___eq__(__prim__int___box__(old(get__set_var_io__result_0(t_pre_5, int___unbox__(value_0)))),
    tuple___getitem__(_res, 0)) &&
    int___eq__(value_0, __prim__int___box__(old(get__set_var_io__result_0(t_pre_5,
    int___unbox__(value_0)))))))
{
  var _cwl_166: Perm
  _res := null
  inhale false
}

method Eval(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm,
  t_pre_6: Ref, func: Function, arg: Ref)
  returns (_current_wait_level_167: Perm, _res: Ref)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires issubtype(typeof(t_pre_6), Place())
  requires issubtype(typeof(arg), typeof(arg))
  requires [acc(MustInvokeBounded(t_pre_6), write),
    (perm(MustInvokeBounded(t_pre_6)) > none &&
    Measure$check(_caller_measures_167, t_pre_6, 1) ?
      acc(MustInvokeBounded(t_pre_6), write) :
      (perm(MustInvokeUnbounded(t_pre_6)) > none ?
        acc(MustInvokeUnbounded(t_pre_6), write) :
        acc(MustInvokeCredit(t_pre_6), write)))] &&
    (acc(eval_io(t_pre_6, func, arg), write) &&
    [acc(MustTerminate(_cthread_167), write), true])
  requires [true,
    Measure$check(_caller_measures_167, _cthread_167, 1) ||
    perm(MustTerminate(_cthread_167)) == none &&
    ((forperm _r_26: Ref [MustInvokeBounded(_r_26)] :: false) &&
    ((forperm _r_26: Ref [MustInvokeUnbounded(_r_26)] :: false) &&
    ((forperm _r_26: Ref [_r_26.MustReleaseBounded] :: false) &&
    (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <=
      _current_wait_level_167) &&
    ((forperm
      _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <=
      _current_wait_level_167) &&
    _residue_167 <= _current_wait_level_167),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(object(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__eval_io__t_post_5(t_pre_6, func,
    arg))), write),
    (perm(MustInvokeUnbounded(old(get__eval_io__t_post_5(t_pre_6, func, arg)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__eval_io__t_post_5(t_pre_6, func, arg))), write) :
      acc(MustInvokeCredit(old(get__eval_io__t_post_5(t_pre_6, func, arg))), write))] &&
    (old(get__eval_io__t_post_5(t_pre_6, func, arg)) ==
    tuple___getitem__(_res, 1) &&
    old(get__eval_io__result_1(t_pre_6, func, arg)) ==
    tuple___getitem__(_res, 0))
{
  var _cwl_167: Perm
  _res := null
  inhale false
}

method syscall_putchar_io__termination_check(t_pre: Ref, c_1: Ref)
  requires issubtype(typeof(t_pre), Place())
  requires issubtype(typeof(c_1), str())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method stdlib_putchar_io__termination_check(t_pre_0: Ref, c_2: Ref)
  requires issubtype(typeof(t_pre_0), Place())
  requires issubtype(typeof(c_2), str())
{
  // Termination measure must be positive.
  assert true ==> 2 > 0
  // Termination condition of syscall_putchar_io (83:11).
  assert true ==> true
  // Termination measure of syscall_putchar_io (83:11).
  assert true ==> 2 > 1
}

method no_op_io__termination_check(t_pre_7: Ref)
  requires issubtype(typeof(t_pre_7), Place())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method split_io__termination_check(t_pre_8: Ref)
  requires issubtype(typeof(t_pre_8), Place())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method join_io__termination_check(t_pre1_0: Ref, t_pre2_0: Ref)
  requires issubtype(typeof(t_pre1_0), Place())
  requires issubtype(typeof(t_pre2_0), Place())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method gap_io__termination_check(t_pre_9: Ref)
  requires issubtype(typeof(t_pre_9), Place())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method end_io__termination_check(t_pre_10: Ref)
  requires issubtype(typeof(t_pre_10), Place())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method set_var_io__termination_check(t_pre_11: Ref, value_1: Int)
  requires issubtype(typeof(t_pre_11), Place())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method eval_io__termination_check(t_pre_12: Ref, func_0: Function, arg_13: Ref)
  requires issubtype(typeof(t_pre_12), Place())
  requires issubtype(typeof(arg_13), object())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}
