domain PyType  {
  
  function extends_(sub: PyType, super: PyType): Bool 
  
  function issubtype(sub: PyType, super: PyType): Bool 
  
  function isnotsubtype(sub: PyType, super: PyType): Bool 
  
  function tuple_args(t: PyType): Seq[PyType] 
  
  function typeof(obj: Ref): PyType 
  
  function get_basic(t: PyType): PyType 
  
  function union_type_1(arg_1: PyType): PyType 
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType 
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType 
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType 
  
  unique function object(): PyType 
  
  unique function list_basic(): PyType 
  
  function list(arg0: PyType): PyType 
  
  function list_arg(typ: PyType, index: Int): PyType 
  
  unique function set_basic(): PyType 
  
  function set(arg0: PyType): PyType 
  
  function set_arg(typ: PyType, index: Int): PyType 
  
  unique function dict_basic(): PyType 
  
  function dict(arg0: PyType, arg1: PyType): PyType 
  
  function dict_arg(typ: PyType, index: Int): PyType 
  
  unique function int(): PyType 
  
  unique function float(): PyType 
  
  unique function bool(): PyType 
  
  unique function NoneType(): PyType 
  
  unique function Exception(): PyType 
  
  unique function ConnectionRefusedError(): PyType 
  
  unique function traceback(): PyType 
  
  unique function str(): PyType 
  
  unique function bytes(): PyType 
  
  unique function tuple_basic(): PyType 
  
  function tuple(args: Seq[PyType]): PyType 
  
  function tuple_arg(typ: PyType, index: Int): PyType 
  
  unique function PSeq_basic(): PyType 
  
  function PSeq(arg0: PyType): PyType 
  
  function PSeq_arg(typ: PyType, index: Int): PyType 
  
  unique function PSet_basic(): PyType 
  
  function PSet(arg0: PyType): PyType 
  
  function PSet_arg(typ: PyType, index: Int): PyType 
  
  unique function PMultiset_basic(): PyType 
  
  function PMultiset(arg0: PyType): PyType 
  
  function PMultiset_arg(typ: PyType, index: Int): PyType 
  
  unique function slice(): PyType 
  
  unique function range_0(): PyType 
  
  unique function Iterator_basic(): PyType 
  
  function Iterator(arg0: PyType): PyType 
  
  function Iterator_arg(typ: PyType, index: Int): PyType 
  
  unique function Thread_0(): PyType 
  
  unique function LevelType(): PyType 
  
  unique function type(): PyType 
  
  unique function Place(): PyType 
  
  unique function __prim__Seq_type(): PyType 
  
  unique function timeout(): PyType 
  
  unique function socket(): PyType 
  
  unique function ltkey(): PyType 
  
  unique function sharK(): PyType 
  
  unique function publK(): PyType 
  
  unique function privK(): PyType 
  
  unique function role(): PyType 
  
  unique function Init(): PyType 
  
  unique function Resp(): PyType 
  
  unique function Serv(): PyType 
  
  unique function uid_type(): PyType 
  
  unique function uid(): PyType 
  
  unique function FreshType(): PyType 
  
  unique function fresh_0(): PyType 
  
  unique function key_0(): PyType 
  
  unique function sesK(): PyType 
  
  unique function ltK(): PyType 
  
  unique function atom(): PyType 
  
  unique function aAgt(): PyType 
  
  unique function aNon(): PyType 
  
  unique function aKey(): PyType 
  
  unique function aNum(): PyType 
  
  unique function rval(): PyType 
  
  unique function rv_Unit(): PyType 
  
  unique function rv_Int(): PyType 
  
  unique function rv_IO(): PyType 
  
  unique function resp_run_state_type(): PyType 
  
  unique function resp_run_state(): PyType 
  
  unique function ival(): PyType 
  
  unique function iv_Unit(): PyType 
  
  unique function iv_M1(): PyType 
  
  unique function iv_M2(): PyType 
  
  unique function iv_IO(): PyType 
  
  unique function init_run_state_type(): PyType 
  
  unique function init_run_state(): PyType 
  
  unique function msg(): PyType 
  
  unique function Junk(): PyType 
  
  unique function Agent(): PyType 
  
  unique function Nonce(): PyType 
  
  unique function Key(): PyType 
  
  unique function Hash(): PyType 
  
  unique function MPair(): PyType 
  
  unique function Crypt(): PyType 
  
  unique function ADT(): PyType 
  
  unique function InvalidDataException(): PyType 
  
  unique function NonceMaker(): PyType 
  
  unique function BadSignatureError(): PyType 
  
  unique function SecretBox(): PyType 
  
  unique function SigningKey(): PyType 
  
  unique function VerifyKey(): PyType 
  
  unique function Encoder(): PyType 
  
  unique function RawEncoder(): PyType 
  
  unique function HexEncoder(): PyType 
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), issubtype(middle, super) }
      issubtype(sub, middle) && issubtype(middle, super) ==>
      issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType ::
      { issubtype(type_, type_) }
      issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType ::
      { extends_(sub, sub2) }
      extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref ::
      { typeof(r) }
      issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType ::
      { issubtype(type_, object()) }
      issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType ::
      { extends_(sub, super), extends_(sub2, super) }
      extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==>
      isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType ::
      { issubtype(sub, super) }
      { issubtype(super, sub) }
      issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), isnotsubtype(middle, super) }
      issubtype(sub, middle) && isnotsubtype(middle, super) ==>
      !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType ::
      { tuple(seq), tuple_arg(Z, i) }
      issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType ::
      { issubtype(Z, tuple(seq)) }
      issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] ::seq1 != seq2 &&
      |seq1| == |seq2| &&
      (forall i: Int ::i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==>
      issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(X, union_type_1(arg_1)) }
      issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(X, union_type_2(arg_1, arg_2)) }
      issubtype(X, union_type_2(arg_1, arg_2)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) }
      issubtype(X, union_type_3(arg_1, arg_2, arg_3)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) }
      issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3) ||
      issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(union_type_1(arg_1), X) }
      issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(union_type_2(arg_1, arg_2), X) }
      issubtype(union_type_2(arg_1, arg_2), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(union_type_3(arg_1, arg_2, arg_3), X) }
      issubtype(union_type_3(arg_1, arg_2, arg_3), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) }
      issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X) &&
      issubtype(arg_4, X)))
  }
  
  axiom subtype_list {
    (forall var0: PyType ::
      { list(var0) }
      extends_(list(var0), object()) &&
      get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType ::
      { list(arg0), list_arg(Z, 0) }
      issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType ::
      { set(var0) }
      extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType ::
      { set(arg0), set_arg(Z, 0) }
      issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType ::
      { dict(var0, var1) }
      extends_(dict(var0, var1), object()) &&
      get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 0) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 1) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) &&
    get_basic(Exception()) == Exception()
  }
  
  axiom subtype_ConnectionRefusedError {
    extends_(ConnectionRefusedError(), Exception()) &&
    get_basic(ConnectionRefusedError()) == ConnectionRefusedError()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) &&
    get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] ::
      { tuple(args) }
      ((forall e: PyType ::(e in args) ==> e == object()) ==>
      extends_(tuple(args), object())) &&
      get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_PSeq {
    (forall var0: PyType ::
      { PSeq(var0) }
      extends_(PSeq(var0), object()) &&
      get_basic(PSeq(var0)) == PSeq_basic())
  }
  
  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSeq(arg0), PSeq_arg(Z, 0) }
      issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType ::
      { PSet(var0) }
      extends_(PSet(var0), object()) &&
      get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSet(arg0), PSet_arg(Z, 0) }
      issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PMultiset {
    (forall var0: PyType ::
      { PMultiset(var0) }
      extends_(PMultiset(var0), object()) &&
      get_basic(PMultiset(var0)) == PMultiset_basic())
  }
  
  axiom PMultiset_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PMultiset(arg0), PMultiset_arg(Z, 0) }
      issubtype(Z, PMultiset(arg0)) ==> PMultiset_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range_0 {
    extends_(range_0(), object()) && get_basic(range_0()) == range_0()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType ::
      { Iterator(var0) }
      extends_(Iterator(var0), object()) &&
      get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType ::
      { Iterator(arg0), Iterator_arg(Z, 0) }
      issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_LevelType {
    extends_(LevelType(), object()) &&
    get_basic(LevelType()) == LevelType()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype___prim__Seq_type {
    extends_(__prim__Seq_type(), object()) &&
    get_basic(__prim__Seq_type()) == __prim__Seq_type()
  }
  
  axiom subtype_timeout {
    extends_(timeout(), Exception()) && get_basic(timeout()) == timeout()
  }
  
  axiom subtype_socket {
    extends_(socket(), object()) && get_basic(socket()) == socket()
  }
  
  axiom subtype_ltkey {
    extends_(ltkey(), ADT()) && get_basic(ltkey()) == ltkey()
  }
  
  axiom subtype_sharK {
    extends_(sharK(), ltkey()) && get_basic(sharK()) == sharK()
  }
  
  axiom subtype_publK {
    extends_(publK(), ltkey()) && get_basic(publK()) == publK()
  }
  
  axiom subtype_privK {
    extends_(privK(), ltkey()) && get_basic(privK()) == privK()
  }
  
  axiom subtype_role {
    extends_(role(), ADT()) && get_basic(role()) == role()
  }
  
  axiom subtype_Init {
    extends_(Init(), role()) && get_basic(Init()) == Init()
  }
  
  axiom subtype_Resp {
    extends_(Resp(), role()) && get_basic(Resp()) == Resp()
  }
  
  axiom subtype_Serv {
    extends_(Serv(), role()) && get_basic(Serv()) == Serv()
  }
  
  axiom subtype_uid_type {
    extends_(uid_type(), ADT()) && get_basic(uid_type()) == uid_type()
  }
  
  axiom subtype_uid {
    extends_(uid(), uid_type()) && get_basic(uid()) == uid()
  }
  
  axiom subtype_FreshType {
    extends_(FreshType(), ADT()) && get_basic(FreshType()) == FreshType()
  }
  
  axiom subtype_fresh_0 {
    extends_(fresh_0(), FreshType()) && get_basic(fresh_0()) == fresh_0()
  }
  
  axiom subtype_key_0 {
    extends_(key_0(), ADT()) && get_basic(key_0()) == key_0()
  }
  
  axiom subtype_sesK {
    extends_(sesK(), key_0()) && get_basic(sesK()) == sesK()
  }
  
  axiom subtype_ltK {
    extends_(ltK(), key_0()) && get_basic(ltK()) == ltK()
  }
  
  axiom subtype_atom {
    extends_(atom(), ADT()) && get_basic(atom()) == atom()
  }
  
  axiom subtype_aAgt {
    extends_(aAgt(), atom()) && get_basic(aAgt()) == aAgt()
  }
  
  axiom subtype_aNon {
    extends_(aNon(), atom()) && get_basic(aNon()) == aNon()
  }
  
  axiom subtype_aKey {
    extends_(aKey(), atom()) && get_basic(aKey()) == aKey()
  }
  
  axiom subtype_aNum {
    extends_(aNum(), atom()) && get_basic(aNum()) == aNum()
  }
  
  axiom subtype_rval {
    extends_(rval(), ADT()) && get_basic(rval()) == rval()
  }
  
  axiom subtype_rv_Unit {
    extends_(rv_Unit(), rval()) && get_basic(rv_Unit()) == rv_Unit()
  }
  
  axiom subtype_rv_Int {
    extends_(rv_Int(), rval()) && get_basic(rv_Int()) == rv_Int()
  }
  
  axiom subtype_rv_IO {
    extends_(rv_IO(), rval()) && get_basic(rv_IO()) == rv_IO()
  }
  
  axiom subtype_resp_run_state_type {
    extends_(resp_run_state_type(), ADT()) &&
    get_basic(resp_run_state_type()) == resp_run_state_type()
  }
  
  axiom subtype_resp_run_state {
    extends_(resp_run_state(), resp_run_state_type()) &&
    get_basic(resp_run_state()) == resp_run_state()
  }
  
  axiom subtype_ival {
    extends_(ival(), ADT()) && get_basic(ival()) == ival()
  }
  
  axiom subtype_iv_Unit {
    extends_(iv_Unit(), ival()) && get_basic(iv_Unit()) == iv_Unit()
  }
  
  axiom subtype_iv_M1 {
    extends_(iv_M1(), ival()) && get_basic(iv_M1()) == iv_M1()
  }
  
  axiom subtype_iv_M2 {
    extends_(iv_M2(), ival()) && get_basic(iv_M2()) == iv_M2()
  }
  
  axiom subtype_iv_IO {
    extends_(iv_IO(), ival()) && get_basic(iv_IO()) == iv_IO()
  }
  
  axiom subtype_init_run_state_type {
    extends_(init_run_state_type(), ADT()) &&
    get_basic(init_run_state_type()) == init_run_state_type()
  }
  
  axiom subtype_init_run_state {
    extends_(init_run_state(), init_run_state_type()) &&
    get_basic(init_run_state()) == init_run_state()
  }
  
  axiom subtype_msg {
    extends_(msg(), ADT()) && get_basic(msg()) == msg()
  }
  
  axiom subtype_Junk {
    extends_(Junk(), msg()) && get_basic(Junk()) == Junk()
  }
  
  axiom subtype_Agent {
    extends_(Agent(), msg()) && get_basic(Agent()) == Agent()
  }
  
  axiom subtype_Nonce {
    extends_(Nonce(), msg()) && get_basic(Nonce()) == Nonce()
  }
  
  axiom subtype_Key {
    extends_(Key(), msg()) && get_basic(Key()) == Key()
  }
  
  axiom subtype_Hash {
    extends_(Hash(), msg()) && get_basic(Hash()) == Hash()
  }
  
  axiom subtype_MPair {
    extends_(MPair(), msg()) && get_basic(MPair()) == MPair()
  }
  
  axiom subtype_Crypt {
    extends_(Crypt(), msg()) && get_basic(Crypt()) == Crypt()
  }
  
  axiom subtype_ADT {
    extends_(ADT(), object()) && get_basic(ADT()) == ADT()
  }
  
  axiom subtype_InvalidDataException {
    extends_(InvalidDataException(), Exception()) &&
    get_basic(InvalidDataException()) == InvalidDataException()
  }
  
  axiom subtype_NonceMaker {
    extends_(NonceMaker(), object()) &&
    get_basic(NonceMaker()) == NonceMaker()
  }
  
  axiom subtype_BadSignatureError {
    extends_(BadSignatureError(), Exception()) &&
    get_basic(BadSignatureError()) == BadSignatureError()
  }
  
  axiom subtype_SecretBox {
    extends_(SecretBox(), object()) &&
    get_basic(SecretBox()) == SecretBox()
  }
  
  axiom subtype_SigningKey {
    extends_(SigningKey(), object()) &&
    get_basic(SigningKey()) == SigningKey()
  }
  
  axiom subtype_VerifyKey {
    extends_(VerifyKey(), object()) &&
    get_basic(VerifyKey()) == VerifyKey()
  }
  
  axiom subtype_Encoder {
    extends_(Encoder(), object()) && get_basic(Encoder()) == Encoder()
  }
  
  axiom subtype_RawEncoder {
    extends_(RawEncoder(), Encoder()) &&
    get_basic(RawEncoder()) == RawEncoder()
  }
  
  axiom subtype_HexEncoder {
    extends_(HexEncoder(), Encoder()) &&
    get_basic(HexEncoder()) == HexEncoder()
  }
}

domain ltkey_0  {
  
  function ltkey_sharK(_arg0: Int): ltkey_0 
  
  function ltkey_publK(_arg0: Int): ltkey_0 
  
  function ltkey_privK(_arg0: Int): ltkey_0 
  
  function ltkey_sharK_sharK_arg(obj: ltkey_0): Int 
  
  function ltkey_publK_publK_arg(obj: ltkey_0): Int 
  
  function ltkey_privK_privK_arg(obj: ltkey_0): Int 
  
  function ltkey_cons_type(obj: ltkey_0): Int 
  
  unique function ltkey_sharK_type(): Int 
  
  unique function ltkey_publK_type(): Int 
  
  unique function ltkey_privK_type(): Int 
  
  function ltkey_is_sharK(obj: ltkey_0): Bool 
  
  function ltkey_is_publK(obj: ltkey_0): Bool 
  
  function ltkey_is_privK(obj: ltkey_0): Bool 
  
  axiom ltkey_equals_sharK {
    (forall _arg0: Int, ___arg0: Int ::
      { ltkey_sharK(_arg0), ltkey_sharK(___arg0) }
      (ltkey_sharK(_arg0) == ltkey_sharK(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom ltkey_equals_publK {
    (forall _arg0: Int, ___arg0: Int ::
      { ltkey_publK(_arg0), ltkey_publK(___arg0) }
      (ltkey_publK(_arg0) == ltkey_publK(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom ltkey_equals_privK {
    (forall _arg0: Int, ___arg0: Int ::
      { ltkey_privK(_arg0), ltkey_privK(___arg0) }
      (ltkey_privK(_arg0) == ltkey_privK(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom ltkey_decons_over_cons_sharK {
    (forall _arg0: Int ::
      { ltkey_sharK_sharK_arg(ltkey_sharK(_arg0)) }
      ltkey_sharK_sharK_arg(ltkey_sharK(_arg0)) == _arg0)
  }
  
  axiom ltkey_decons_over_cons_publK {
    (forall _arg0: Int ::
      { ltkey_publK_publK_arg(ltkey_publK(_arg0)) }
      ltkey_publK_publK_arg(ltkey_publK(_arg0)) == _arg0)
  }
  
  axiom ltkey_decons_over_cons_privK {
    (forall _arg0: Int ::
      { ltkey_privK_privK_arg(ltkey_privK(_arg0)) }
      ltkey_privK_privK_arg(ltkey_privK(_arg0)) == _arg0)
  }
  
  axiom ltkey_cons_sharK_over_decons {
    (forall obj: ltkey_0 ::
      { ltkey_is_sharK(obj) }
      ltkey_is_sharK(obj) ==>
      obj == ltkey_sharK(ltkey_sharK_sharK_arg(obj)))
  }
  
  axiom ltkey_cons_publK_over_decons {
    (forall obj: ltkey_0 ::
      { ltkey_is_publK(obj) }
      ltkey_is_publK(obj) ==>
      obj == ltkey_publK(ltkey_publK_publK_arg(obj)))
  }
  
  axiom ltkey_cons_privK_over_decons {
    (forall obj: ltkey_0 ::
      { ltkey_is_privK(obj) }
      ltkey_is_privK(obj) ==>
      obj == ltkey_privK(ltkey_privK_privK_arg(obj)))
  }
  
  axiom ltkey_associate_cons_type_function_with_sharK_constant {
    (forall _arg0: Int ::
      { ltkey_sharK(_arg0) }
      ltkey_cons_type(ltkey_sharK(_arg0)) == ltkey_sharK_type())
  }
  
  axiom ltkey_associate_cons_type_function_with_publK_constant {
    (forall _arg0: Int ::
      { ltkey_publK(_arg0) }
      ltkey_cons_type(ltkey_publK(_arg0)) == ltkey_publK_type())
  }
  
  axiom ltkey_associate_cons_type_function_with_privK_constant {
    (forall _arg0: Int ::
      { ltkey_privK(_arg0) }
      ltkey_cons_type(ltkey_privK(_arg0)) == ltkey_privK_type())
  }
  
  axiom ltkey_constrain_cons_type_function_cons_constants {
    (forall obj: ltkey_0 ::
      { ltkey_cons_type(obj) }
      ltkey_cons_type(obj) == ltkey_sharK_type() ||
      (ltkey_cons_type(obj) == ltkey_publK_type() ||
      ltkey_cons_type(obj) == ltkey_privK_type()))
  }
  
  axiom ltkey_associate_cons_type_function_with_is_sharK_bool_function {
    (forall obj: ltkey_0 ::
      { ltkey_cons_type(obj) }
      (ltkey_cons_type(obj) == ltkey_sharK_type()) == ltkey_is_sharK(obj))
  }
  
  axiom ltkey_associate_cons_type_function_with_is_publK_bool_function {
    (forall obj: ltkey_0 ::
      { ltkey_cons_type(obj) }
      (ltkey_cons_type(obj) == ltkey_publK_type()) == ltkey_is_publK(obj))
  }
  
  axiom ltkey_associate_cons_type_function_with_is_privK_bool_function {
    (forall obj: ltkey_0 ::
      { ltkey_cons_type(obj) }
      (ltkey_cons_type(obj) == ltkey_privK_type()) == ltkey_is_privK(obj))
  }
  
  axiom ltkey_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), ltkey()) }
      issubtype(typeof(ref), ltkey()) ==>
      typeof(ref) == sharK() ||
      (typeof(ref) == publK() || typeof(ref) == privK()))
  }
}

domain role_0  {
  
  function role_Init(): role_0 
  
  function role_Resp(): role_0 
  
  function role_Serv(): role_0 
  
  function role_cons_type(obj: role_0): Int 
  
  unique function role_Init_type(): Int 
  
  unique function role_Resp_type(): Int 
  
  unique function role_Serv_type(): Int 
  
  function role_is_Init(obj: role_0): Bool 
  
  function role_is_Resp(obj: role_0): Bool 
  
  function role_is_Serv(obj: role_0): Bool 
  
  axiom role_associate_cons_type_function_with_Init_constant {
    role_cons_type(role_Init()) == role_Init_type()
  }
  
  axiom role_associate_cons_type_function_with_Resp_constant {
    role_cons_type(role_Resp()) == role_Resp_type()
  }
  
  axiom role_associate_cons_type_function_with_Serv_constant {
    role_cons_type(role_Serv()) == role_Serv_type()
  }
  
  axiom role_constrain_cons_type_function_cons_constants {
    (forall obj: role_0 ::
      { role_cons_type(obj) }
      role_cons_type(obj) == role_Init_type() ||
      (role_cons_type(obj) == role_Resp_type() ||
      role_cons_type(obj) == role_Serv_type()))
  }
  
  axiom role_associate_cons_type_function_with_is_Init_bool_function {
    (forall obj: role_0 ::
      { role_cons_type(obj) }
      (role_cons_type(obj) == role_Init_type()) == role_is_Init(obj))
  }
  
  axiom role_associate_cons_type_function_with_is_Resp_bool_function {
    (forall obj: role_0 ::
      { role_cons_type(obj) }
      (role_cons_type(obj) == role_Resp_type()) == role_is_Resp(obj))
  }
  
  axiom role_associate_cons_type_function_with_is_Serv_bool_function {
    (forall obj: role_0 ::
      { role_cons_type(obj) }
      (role_cons_type(obj) == role_Serv_type()) == role_is_Serv(obj))
  }
  
  axiom role_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), role()) }
      issubtype(typeof(ref), role()) ==>
      typeof(ref) == Init() ||
      (typeof(ref) == Resp() || typeof(ref) == Serv()))
  }
}

domain uid_type_0  {
  
  function uid_type_uid(_arg0: Int): uid_type_0 
  
  function uid_type_uid_uid_arg(obj: uid_type_0): Int 
  
  function uid_type_cons_type(obj: uid_type_0): Int 
  
  unique function uid_type_uid_type(): Int 
  
  function uid_type_is_uid(obj: uid_type_0): Bool 
  
  axiom uid_type_equals_uid {
    (forall _arg0: Int, ___arg0: Int ::
      { uid_type_uid(_arg0), uid_type_uid(___arg0) }
      (uid_type_uid(_arg0) == uid_type_uid(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom uid_type_decons_over_cons_uid {
    (forall _arg0: Int ::
      { uid_type_uid_uid_arg(uid_type_uid(_arg0)) }
      uid_type_uid_uid_arg(uid_type_uid(_arg0)) == _arg0)
  }
  
  axiom uid_type_cons_uid_over_decons {
    (forall obj: uid_type_0 ::
      { uid_type_is_uid(obj) }
      uid_type_is_uid(obj) ==>
      obj == uid_type_uid(uid_type_uid_uid_arg(obj)))
  }
  
  axiom uid_type_associate_cons_type_function_with_uid_constant {
    (forall _arg0: Int ::
      { uid_type_uid(_arg0) }
      uid_type_cons_type(uid_type_uid(_arg0)) == uid_type_uid_type())
  }
  
  axiom uid_type_constrain_cons_type_function_cons_constants {
    (forall obj: uid_type_0 ::
      { uid_type_cons_type(obj) }
      uid_type_cons_type(obj) == uid_type_uid_type())
  }
  
  axiom uid_type_associate_cons_type_function_with_is_uid_bool_function {
    (forall obj: uid_type_0 ::
      { uid_type_cons_type(obj) }
      (uid_type_cons_type(obj) == uid_type_uid_type()) ==
      uid_type_is_uid(obj))
  }
  
  axiom uid_type_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), uid_type()) }
      issubtype(typeof(ref), uid_type()) ==> typeof(ref) == uid())
  }
}

domain FreshType_0  {
  
  function FreshType_fresh(_arg0: Ref, _arg1: Ref, _arg2: Int): FreshType_0 
  
  function FreshType_fresh_role(obj: FreshType_0): Ref 
  
  function FreshType_fresh_uid(obj: FreshType_0): Ref 
  
  function FreshType_fresh_ctr(obj: FreshType_0): Int 
  
  function FreshType_cons_type(obj: FreshType_0): Int 
  
  unique function FreshType_fresh_type(): Int 
  
  function FreshType_is_fresh(obj: FreshType_0): Bool 
  
  axiom FreshType_equals_fresh {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int, ___arg0: Ref, ___arg1: Ref,
    ___arg2: Int ::
      { FreshType_fresh(_arg0, _arg1, _arg2), FreshType_fresh(___arg0, ___arg1,
      ___arg2) }
      (FreshType_fresh(_arg0, _arg1, _arg2) ==
      FreshType_fresh(___arg0, ___arg1, ___arg2)) ==
      (_arg0 == ___arg0 && (_arg1 == ___arg1 && _arg2 == ___arg2)))
  }
  
  axiom FreshType_decons_over_cons_fresh {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int ::
      { FreshType_fresh_role(FreshType_fresh(_arg0, _arg1, _arg2)) }
      FreshType_fresh_role(FreshType_fresh(_arg0, _arg1, _arg2)) == _arg0) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Int ::
      { FreshType_fresh_uid(FreshType_fresh(_arg0, _arg1, _arg2)) }
      FreshType_fresh_uid(FreshType_fresh(_arg0, _arg1, _arg2)) == _arg1) &&
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int ::
      { FreshType_fresh_ctr(FreshType_fresh(_arg0, _arg1, _arg2)) }
      FreshType_fresh_ctr(FreshType_fresh(_arg0, _arg1, _arg2)) == _arg2))
  }
  
  axiom FreshType_decons_types_fresh {
    (forall _adt: FreshType_0 ::
      { FreshType_fresh_role(_adt) }
      issubtype(typeof(FreshType_fresh_role(_adt)), role())) &&
    (forall _adt: FreshType_0 ::
      { FreshType_fresh_uid(_adt) }
      issubtype(typeof(FreshType_fresh_uid(_adt)), uid()))
  }
  
  axiom FreshType_cons_fresh_over_decons {
    (forall obj: FreshType_0 ::
      { FreshType_is_fresh(obj) }
      FreshType_is_fresh(obj) ==>
      obj ==
      FreshType_fresh(FreshType_fresh_role(obj), FreshType_fresh_uid(obj), FreshType_fresh_ctr(obj)))
  }
  
  axiom FreshType_associate_cons_type_function_with_fresh_constant {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int ::
      { FreshType_fresh(_arg0, _arg1, _arg2) }
      FreshType_cons_type(FreshType_fresh(_arg0, _arg1, _arg2)) ==
      FreshType_fresh_type())
  }
  
  axiom FreshType_constrain_cons_type_function_cons_constants {
    (forall obj: FreshType_0 ::
      { FreshType_cons_type(obj) }
      FreshType_cons_type(obj) == FreshType_fresh_type())
  }
  
  axiom FreshType_associate_cons_type_function_with_is_fresh_bool_function {
    (forall obj: FreshType_0 ::
      { FreshType_cons_type(obj) }
      (FreshType_cons_type(obj) == FreshType_fresh_type()) ==
      FreshType_is_fresh(obj))
  }
  
  axiom FreshType_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), FreshType()) }
      issubtype(typeof(ref), FreshType()) ==> typeof(ref) == fresh_0())
  }
}

domain key_2  {
  
  function key_sesK(_arg0: Ref): key_2 
  
  function key_ltK(_arg0: Ref): key_2 
  
  function key_sesK_sesK_arg(obj: key_2): Ref 
  
  function key_ltK_ltK_arg(obj: key_2): Ref 
  
  function key_cons_type(obj: key_2): Int 
  
  unique function key_sesK_type(): Int 
  
  unique function key_ltK_type(): Int 
  
  function key_is_sesK(obj: key_2): Bool 
  
  function key_is_ltK(obj: key_2): Bool 
  
  axiom key_equals_sesK {
    (forall _arg0: Ref, ___arg0: Ref ::
      { key_sesK(_arg0), key_sesK(___arg0) }
      (key_sesK(_arg0) == key_sesK(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom key_equals_ltK {
    (forall _arg0: Ref, ___arg0: Ref ::
      { key_ltK(_arg0), key_ltK(___arg0) }
      (key_ltK(_arg0) == key_ltK(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom key_decons_over_cons_sesK {
    (forall _arg0: Ref ::
      { key_sesK_sesK_arg(key_sesK(_arg0)) }
      key_sesK_sesK_arg(key_sesK(_arg0)) == _arg0)
  }
  
  axiom key_decons_over_cons_ltK {
    (forall _arg0: Ref ::
      { key_ltK_ltK_arg(key_ltK(_arg0)) }
      key_ltK_ltK_arg(key_ltK(_arg0)) == _arg0)
  }
  
  axiom key_decons_types_sesK {
    (forall _adt: key_2 ::
      { key_sesK_sesK_arg(_adt) }
      issubtype(typeof(key_sesK_sesK_arg(_adt)), fresh_0()))
  }
  
  axiom key_decons_types_ltK {
    (forall _adt: key_2 ::
      { key_ltK_ltK_arg(_adt) }
      issubtype(typeof(key_ltK_ltK_arg(_adt)), ltkey()))
  }
  
  axiom key_cons_sesK_over_decons {
    (forall obj: key_2 ::
      { key_is_sesK(obj) }
      key_is_sesK(obj) ==> obj == key_sesK(key_sesK_sesK_arg(obj)))
  }
  
  axiom key_cons_ltK_over_decons {
    (forall obj: key_2 ::
      { key_is_ltK(obj) }
      key_is_ltK(obj) ==> obj == key_ltK(key_ltK_ltK_arg(obj)))
  }
  
  axiom key_associate_cons_type_function_with_sesK_constant {
    (forall _arg0: Ref ::
      { key_sesK(_arg0) }
      key_cons_type(key_sesK(_arg0)) == key_sesK_type())
  }
  
  axiom key_associate_cons_type_function_with_ltK_constant {
    (forall _arg0: Ref ::
      { key_ltK(_arg0) }
      key_cons_type(key_ltK(_arg0)) == key_ltK_type())
  }
  
  axiom key_constrain_cons_type_function_cons_constants {
    (forall obj: key_2 ::
      { key_cons_type(obj) }
      key_cons_type(obj) == key_sesK_type() ||
      key_cons_type(obj) == key_ltK_type())
  }
  
  axiom key_associate_cons_type_function_with_is_sesK_bool_function {
    (forall obj: key_2 ::
      { key_cons_type(obj) }
      (key_cons_type(obj) == key_sesK_type()) == key_is_sesK(obj))
  }
  
  axiom key_associate_cons_type_function_with_is_ltK_bool_function {
    (forall obj: key_2 ::
      { key_cons_type(obj) }
      (key_cons_type(obj) == key_ltK_type()) == key_is_ltK(obj))
  }
  
  axiom key_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), key_0()) }
      issubtype(typeof(ref), key_0()) ==>
      typeof(ref) == sesK() || typeof(ref) == ltK())
  }
}

domain atom_0  {
  
  function atom_aAgt(_arg0: Int): atom_0 
  
  function atom_aNon(_arg0: Ref): atom_0 
  
  function atom_aKey(_arg0: Ref): atom_0 
  
  function atom_aNum(_arg0: Int): atom_0 
  
  function atom_aAgt_aAgt_arg(obj: atom_0): Int 
  
  function atom_aNon_aNon_arg(obj: atom_0): Ref 
  
  function atom_aKey_aKey_arg(obj: atom_0): Ref 
  
  function atom_aNum_aNum_arg(obj: atom_0): Int 
  
  function atom_cons_type(obj: atom_0): Int 
  
  unique function atom_aAgt_type(): Int 
  
  unique function atom_aNon_type(): Int 
  
  unique function atom_aKey_type(): Int 
  
  unique function atom_aNum_type(): Int 
  
  function atom_is_aAgt(obj: atom_0): Bool 
  
  function atom_is_aNon(obj: atom_0): Bool 
  
  function atom_is_aKey(obj: atom_0): Bool 
  
  function atom_is_aNum(obj: atom_0): Bool 
  
  axiom atom_equals_aAgt {
    (forall _arg0: Int, ___arg0: Int ::
      { atom_aAgt(_arg0), atom_aAgt(___arg0) }
      (atom_aAgt(_arg0) == atom_aAgt(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom atom_equals_aNon {
    (forall _arg0: Ref, ___arg0: Ref ::
      { atom_aNon(_arg0), atom_aNon(___arg0) }
      (atom_aNon(_arg0) == atom_aNon(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom atom_equals_aKey {
    (forall _arg0: Ref, ___arg0: Ref ::
      { atom_aKey(_arg0), atom_aKey(___arg0) }
      (atom_aKey(_arg0) == atom_aKey(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom atom_equals_aNum {
    (forall _arg0: Int, ___arg0: Int ::
      { atom_aNum(_arg0), atom_aNum(___arg0) }
      (atom_aNum(_arg0) == atom_aNum(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom atom_decons_over_cons_aAgt {
    (forall _arg0: Int ::
      { atom_aAgt_aAgt_arg(atom_aAgt(_arg0)) }
      atom_aAgt_aAgt_arg(atom_aAgt(_arg0)) == _arg0)
  }
  
  axiom atom_decons_over_cons_aNon {
    (forall _arg0: Ref ::
      { atom_aNon_aNon_arg(atom_aNon(_arg0)) }
      atom_aNon_aNon_arg(atom_aNon(_arg0)) == _arg0)
  }
  
  axiom atom_decons_over_cons_aKey {
    (forall _arg0: Ref ::
      { atom_aKey_aKey_arg(atom_aKey(_arg0)) }
      atom_aKey_aKey_arg(atom_aKey(_arg0)) == _arg0)
  }
  
  axiom atom_decons_over_cons_aNum {
    (forall _arg0: Int ::
      { atom_aNum_aNum_arg(atom_aNum(_arg0)) }
      atom_aNum_aNum_arg(atom_aNum(_arg0)) == _arg0)
  }
  
  axiom atom_decons_types_aNon {
    (forall _adt: atom_0 ::
      { atom_aNon_aNon_arg(_adt) }
      issubtype(typeof(atom_aNon_aNon_arg(_adt)), fresh_0()))
  }
  
  axiom atom_decons_types_aKey {
    (forall _adt: atom_0 ::
      { atom_aKey_aKey_arg(_adt) }
      issubtype(typeof(atom_aKey_aKey_arg(_adt)), key_0()))
  }
  
  axiom atom_cons_aAgt_over_decons {
    (forall obj: atom_0 ::
      { atom_is_aAgt(obj) }
      atom_is_aAgt(obj) ==> obj == atom_aAgt(atom_aAgt_aAgt_arg(obj)))
  }
  
  axiom atom_cons_aNon_over_decons {
    (forall obj: atom_0 ::
      { atom_is_aNon(obj) }
      atom_is_aNon(obj) ==> obj == atom_aNon(atom_aNon_aNon_arg(obj)))
  }
  
  axiom atom_cons_aKey_over_decons {
    (forall obj: atom_0 ::
      { atom_is_aKey(obj) }
      atom_is_aKey(obj) ==> obj == atom_aKey(atom_aKey_aKey_arg(obj)))
  }
  
  axiom atom_cons_aNum_over_decons {
    (forall obj: atom_0 ::
      { atom_is_aNum(obj) }
      atom_is_aNum(obj) ==> obj == atom_aNum(atom_aNum_aNum_arg(obj)))
  }
  
  axiom atom_associate_cons_type_function_with_aAgt_constant {
    (forall _arg0: Int ::
      { atom_aAgt(_arg0) }
      atom_cons_type(atom_aAgt(_arg0)) == atom_aAgt_type())
  }
  
  axiom atom_associate_cons_type_function_with_aNon_constant {
    (forall _arg0: Ref ::
      { atom_aNon(_arg0) }
      atom_cons_type(atom_aNon(_arg0)) == atom_aNon_type())
  }
  
  axiom atom_associate_cons_type_function_with_aKey_constant {
    (forall _arg0: Ref ::
      { atom_aKey(_arg0) }
      atom_cons_type(atom_aKey(_arg0)) == atom_aKey_type())
  }
  
  axiom atom_associate_cons_type_function_with_aNum_constant {
    (forall _arg0: Int ::
      { atom_aNum(_arg0) }
      atom_cons_type(atom_aNum(_arg0)) == atom_aNum_type())
  }
  
  axiom atom_constrain_cons_type_function_cons_constants {
    (forall obj: atom_0 ::
      { atom_cons_type(obj) }
      atom_cons_type(obj) == atom_aAgt_type() ||
      (atom_cons_type(obj) == atom_aNon_type() ||
      (atom_cons_type(obj) == atom_aKey_type() ||
      atom_cons_type(obj) == atom_aNum_type())))
  }
  
  axiom atom_associate_cons_type_function_with_is_aAgt_bool_function {
    (forall obj: atom_0 ::
      { atom_cons_type(obj) }
      (atom_cons_type(obj) == atom_aAgt_type()) == atom_is_aAgt(obj))
  }
  
  axiom atom_associate_cons_type_function_with_is_aNon_bool_function {
    (forall obj: atom_0 ::
      { atom_cons_type(obj) }
      (atom_cons_type(obj) == atom_aNon_type()) == atom_is_aNon(obj))
  }
  
  axiom atom_associate_cons_type_function_with_is_aKey_bool_function {
    (forall obj: atom_0 ::
      { atom_cons_type(obj) }
      (atom_cons_type(obj) == atom_aKey_type()) == atom_is_aKey(obj))
  }
  
  axiom atom_associate_cons_type_function_with_is_aNum_bool_function {
    (forall obj: atom_0 ::
      { atom_cons_type(obj) }
      (atom_cons_type(obj) == atom_aNum_type()) == atom_is_aNum(obj))
  }
  
  axiom atom_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), atom()) }
      issubtype(typeof(ref), atom()) ==>
      typeof(ref) == aAgt() ||
      (typeof(ref) == aNon() ||
      (typeof(ref) == aKey() || typeof(ref) == aNum())))
  }
}

domain rval_0  {
  
  function rval_rv_Unit(): rval_0 
  
  function rval_rv_Int(_arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref): rval_0 
  
  function rval_rv_IO(_arg0: Ref, _arg1: Ref): rval_0 
  
  function rval_rv_Int_address(obj: rval_0): Ref 
  
  function rval_rv_Int_msg(obj: rval_0): Ref 
  
  function rval_rv_Int_agent(obj: rval_0): Int 
  
  function rval_rv_Int_n1(obj: rval_0): Ref 
  
  function rval_rv_Int_n2(obj: rval_0): Ref 
  
  function rval_rv_IO_address(obj: rval_0): Ref 
  
  function rval_rv_IO_msg(obj: rval_0): Ref 
  
  function rval_cons_type(obj: rval_0): Int 
  
  unique function rval_rv_Unit_type(): Int 
  
  unique function rval_rv_Int_type(): Int 
  
  unique function rval_rv_IO_type(): Int 
  
  function rval_is_rv_Unit(obj: rval_0): Bool 
  
  function rval_is_rv_Int(obj: rval_0): Bool 
  
  function rval_is_rv_IO(obj: rval_0): Bool 
  
  axiom rval_equals_rv_Int {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref, ___arg0: Ref,
    ___arg1: Ref, ___arg2: Int, ___arg3: Ref, ___arg4: Ref ::
      { rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4), rval_rv_Int(___arg0,
      ___arg1, ___arg2, ___arg3, ___arg4) }
      (rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4) ==
      rval_rv_Int(___arg0, ___arg1, ___arg2, ___arg3, ___arg4)) ==
      (_arg0 == ___arg0 &&
      (_arg1 == ___arg1 &&
      (_arg2 == ___arg2 && (_arg3 == ___arg3 && _arg4 == ___arg4)))))
  }
  
  axiom rval_equals_rv_IO {
    (forall _arg0: Ref, _arg1: Ref, ___arg0: Ref, ___arg1: Ref ::
      { rval_rv_IO(_arg0, _arg1), rval_rv_IO(___arg0, ___arg1) }
      (rval_rv_IO(_arg0, _arg1) == rval_rv_IO(___arg0, ___arg1)) ==
      (_arg0 == ___arg0 && _arg1 == ___arg1))
  }
  
  axiom rval_decons_over_cons_rv_Int {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref ::
      { rval_rv_Int_address(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) }
      rval_rv_Int_address(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) ==
      _arg0) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref ::
      { rval_rv_Int_msg(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) }
      rval_rv_Int_msg(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) ==
      _arg1) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref ::
      { rval_rv_Int_agent(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) }
      rval_rv_Int_agent(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) ==
      _arg2) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref ::
      { rval_rv_Int_n1(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) }
      rval_rv_Int_n1(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) ==
      _arg3) &&
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref ::
      { rval_rv_Int_n2(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) }
      rval_rv_Int_n2(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) ==
      _arg4))))
  }
  
  axiom rval_decons_over_cons_rv_IO {
    (forall _arg0: Ref, _arg1: Ref ::
      { rval_rv_IO_address(rval_rv_IO(_arg0, _arg1)) }
      rval_rv_IO_address(rval_rv_IO(_arg0, _arg1)) == _arg0) &&
    (forall _arg0: Ref, _arg1: Ref ::
      { rval_rv_IO_msg(rval_rv_IO(_arg0, _arg1)) }
      rval_rv_IO_msg(rval_rv_IO(_arg0, _arg1)) == _arg1)
  }
  
  axiom rval_decons_types_rv_Int {
    (forall _adt: rval_0 ::
      { rval_rv_Int_address(_adt) }
      issubtype(typeof(rval_rv_Int_address(_adt)), str())) &&
    ((forall _adt: rval_0 ::
      { rval_rv_Int_msg(_adt) }
      issubtype(typeof(rval_rv_Int_msg(_adt)), bytes())) &&
    ((forall _adt: rval_0 ::
      { rval_rv_Int_n1(_adt) }
      issubtype(typeof(rval_rv_Int_n1(_adt)), fresh_0())) &&
    (forall _adt: rval_0 ::
      { rval_rv_Int_n2(_adt) }
      issubtype(typeof(rval_rv_Int_n2(_adt)), fresh_0()))))
  }
  
  axiom rval_decons_types_rv_IO {
    (forall _adt: rval_0 ::
      { rval_rv_IO_address(_adt) }
      issubtype(typeof(rval_rv_IO_address(_adt)), str())) &&
    (forall _adt: rval_0 ::
      { rval_rv_IO_msg(_adt) }
      issubtype(typeof(rval_rv_IO_msg(_adt)), bytes()))
  }
  
  axiom rval_cons_rv_Int_over_decons {
    (forall obj: rval_0 ::
      { rval_is_rv_Int(obj) }
      rval_is_rv_Int(obj) ==>
      obj ==
      rval_rv_Int(rval_rv_Int_address(obj), rval_rv_Int_msg(obj), rval_rv_Int_agent(obj),
      rval_rv_Int_n1(obj), rval_rv_Int_n2(obj)))
  }
  
  axiom rval_cons_rv_IO_over_decons {
    (forall obj: rval_0 ::
      { rval_is_rv_IO(obj) }
      rval_is_rv_IO(obj) ==>
      obj == rval_rv_IO(rval_rv_IO_address(obj), rval_rv_IO_msg(obj)))
  }
  
  axiom rval_associate_cons_type_function_with_rv_Unit_constant {
    rval_cons_type(rval_rv_Unit()) == rval_rv_Unit_type()
  }
  
  axiom rval_associate_cons_type_function_with_rv_Int_constant {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Int, _arg3: Ref, _arg4: Ref ::
      { rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4) }
      rval_cons_type(rval_rv_Int(_arg0, _arg1, _arg2, _arg3, _arg4)) ==
      rval_rv_Int_type())
  }
  
  axiom rval_associate_cons_type_function_with_rv_IO_constant {
    (forall _arg0: Ref, _arg1: Ref ::
      { rval_rv_IO(_arg0, _arg1) }
      rval_cons_type(rval_rv_IO(_arg0, _arg1)) == rval_rv_IO_type())
  }
  
  axiom rval_constrain_cons_type_function_cons_constants {
    (forall obj: rval_0 ::
      { rval_cons_type(obj) }
      rval_cons_type(obj) == rval_rv_Unit_type() ||
      (rval_cons_type(obj) == rval_rv_Int_type() ||
      rval_cons_type(obj) == rval_rv_IO_type()))
  }
  
  axiom rval_associate_cons_type_function_with_is_rv_Unit_bool_function {
    (forall obj: rval_0 ::
      { rval_cons_type(obj) }
      (rval_cons_type(obj) == rval_rv_Unit_type()) == rval_is_rv_Unit(obj))
  }
  
  axiom rval_associate_cons_type_function_with_is_rv_Int_bool_function {
    (forall obj: rval_0 ::
      { rval_cons_type(obj) }
      (rval_cons_type(obj) == rval_rv_Int_type()) == rval_is_rv_Int(obj))
  }
  
  axiom rval_associate_cons_type_function_with_is_rv_IO_bool_function {
    (forall obj: rval_0 ::
      { rval_cons_type(obj) }
      (rval_cons_type(obj) == rval_rv_IO_type()) == rval_is_rv_IO(obj))
  }
  
  axiom rval_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), rval()) }
      issubtype(typeof(ref), rval()) ==>
      typeof(ref) == rv_Unit() ||
      (typeof(ref) == rv_Int() || typeof(ref) == rv_IO()))
  }
}

domain resp_run_state_type_0  {
  
  function resp_run_state_type_resp_run_state(_arg0: Ref, _arg1: Ref, _arg2: Ref,
  _arg3: Ref, _arg4: Ref): resp_run_state_type_0 
  
  function resp_run_state_type_resp_run_state_agts(obj: resp_run_state_type_0): Ref 
  
  function resp_run_state_type_resp_run_state_store(obj: resp_run_state_type_0): Ref 
  
  function resp_run_state_type_resp_run_state_ibuf(obj: resp_run_state_type_0): Ref 
  
  function resp_run_state_type_resp_run_state_obuf(obj: resp_run_state_type_0): Ref 
  
  function resp_run_state_type_resp_run_state_addrA(obj: resp_run_state_type_0): Ref 
  
  function resp_run_state_type_cons_type(obj: resp_run_state_type_0): Int 
  
  unique function resp_run_state_type_resp_run_state_type(): Int 
  
  function resp_run_state_type_is_resp_run_state(obj: resp_run_state_type_0): Bool 
  
  axiom resp_run_state_type_equals_resp_run_state {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref, ___arg0: Ref,
    ___arg1: Ref, ___arg2: Ref, ___arg3: Ref, ___arg4: Ref ::
      { resp_run_state_type_resp_run_state(_arg0, _arg1, _arg2, _arg3, _arg4),
      resp_run_state_type_resp_run_state(___arg0, ___arg1, ___arg2, ___arg3,
      ___arg4) }
      (resp_run_state_type_resp_run_state(_arg0, _arg1, _arg2, _arg3, _arg4) ==
      resp_run_state_type_resp_run_state(___arg0, ___arg1, ___arg2, ___arg3,
      ___arg4)) ==
      (_arg0 == ___arg0 &&
      (_arg1 == ___arg1 &&
      (_arg2 == ___arg2 && (_arg3 == ___arg3 && _arg4 == ___arg4)))))
  }
  
  axiom resp_run_state_type_decons_over_cons_resp_run_state {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref ::
      { resp_run_state_type_resp_run_state_agts(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) }
      resp_run_state_type_resp_run_state_agts(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) ==
      _arg0) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref ::
      { resp_run_state_type_resp_run_state_store(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) }
      resp_run_state_type_resp_run_state_store(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) ==
      _arg1) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref ::
      { resp_run_state_type_resp_run_state_ibuf(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) }
      resp_run_state_type_resp_run_state_ibuf(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) ==
      _arg2) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref ::
      { resp_run_state_type_resp_run_state_obuf(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) }
      resp_run_state_type_resp_run_state_obuf(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) ==
      _arg3) &&
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref ::
      { resp_run_state_type_resp_run_state_addrA(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) }
      resp_run_state_type_resp_run_state_addrA(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) ==
      _arg4))))
  }
  
  axiom resp_run_state_type_decons_types_resp_run_state {
    (forall _adt: resp_run_state_type_0 ::
      { resp_run_state_type_resp_run_state_agts(_adt) }
      issubtype(typeof(resp_run_state_type_resp_run_state_agts(_adt)), PSeq(int()))) &&
    ((forall _adt: resp_run_state_type_0 ::
      { resp_run_state_type_resp_run_state_store(_adt) }
      issubtype(typeof(resp_run_state_type_resp_run_state_store(_adt)), PSeq(atom()))) &&
    ((forall _adt: resp_run_state_type_0 ::
      { resp_run_state_type_resp_run_state_ibuf(_adt) }
      issubtype(typeof(resp_run_state_type_resp_run_state_ibuf(_adt)), PSet(PSeq(object())))) &&
    ((forall _adt: resp_run_state_type_0 ::
      { resp_run_state_type_resp_run_state_obuf(_adt) }
      resp_run_state_type_resp_run_state_obuf(_adt) == null ||
      issubtype(typeof(resp_run_state_type_resp_run_state_obuf(_adt)), bytes())) &&
    (forall _adt: resp_run_state_type_0 ::
      { resp_run_state_type_resp_run_state_addrA(_adt) }
      resp_run_state_type_resp_run_state_addrA(_adt) == null ||
      issubtype(typeof(resp_run_state_type_resp_run_state_addrA(_adt)), str())))))
  }
  
  axiom resp_run_state_type_cons_resp_run_state_over_decons {
    (forall obj: resp_run_state_type_0 ::
      { resp_run_state_type_is_resp_run_state(obj) }
      resp_run_state_type_is_resp_run_state(obj) ==>
      obj ==
      resp_run_state_type_resp_run_state(resp_run_state_type_resp_run_state_agts(obj),
      resp_run_state_type_resp_run_state_store(obj), resp_run_state_type_resp_run_state_ibuf(obj),
      resp_run_state_type_resp_run_state_obuf(obj), resp_run_state_type_resp_run_state_addrA(obj)))
  }
  
  axiom resp_run_state_type_associate_cons_type_function_with_resp_run_state_constant {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, _arg4: Ref ::
      { resp_run_state_type_resp_run_state(_arg0, _arg1, _arg2, _arg3, _arg4) }
      resp_run_state_type_cons_type(resp_run_state_type_resp_run_state(_arg0,
      _arg1, _arg2, _arg3, _arg4)) ==
      resp_run_state_type_resp_run_state_type())
  }
  
  axiom resp_run_state_type_constrain_cons_type_function_cons_constants {
    (forall obj: resp_run_state_type_0 ::
      { resp_run_state_type_cons_type(obj) }
      resp_run_state_type_cons_type(obj) ==
      resp_run_state_type_resp_run_state_type())
  }
  
  axiom resp_run_state_type_associate_cons_type_function_with_is_resp_run_state_bool_function {
    (forall obj: resp_run_state_type_0 ::
      { resp_run_state_type_cons_type(obj) }
      (resp_run_state_type_cons_type(obj) ==
      resp_run_state_type_resp_run_state_type()) ==
      resp_run_state_type_is_resp_run_state(obj))
  }
  
  axiom resp_run_state_type_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), resp_run_state_type()) }
      issubtype(typeof(ref), resp_run_state_type()) ==>
      typeof(ref) == resp_run_state())
  }
}

domain ival_0  {
  
  function ival_iv_Unit(): ival_0 
  
  function ival_iv_M1(_arg0: Ref, _arg1: Ref): ival_0 
  
  function ival_iv_M2(_arg0: Ref, _arg1: Ref, _arg2: Ref): ival_0 
  
  function ival_iv_IO(_arg0: Ref, _arg1: Ref): ival_0 
  
  function ival_iv_M1_iv_M1_arg1(obj: ival_0): Ref 
  
  function ival_iv_M1_iv_M1_arg2(obj: ival_0): Ref 
  
  function ival_iv_M2_iv_M2_arg1(obj: ival_0): Ref 
  
  function ival_iv_M2_iv_M2_arg2(obj: ival_0): Ref 
  
  function ival_iv_M2_iv_M2_arg3(obj: ival_0): Ref 
  
  function ival_iv_IO_address(obj: ival_0): Ref 
  
  function ival_iv_IO_msg(obj: ival_0): Ref 
  
  function ival_cons_type(obj: ival_0): Int 
  
  unique function ival_iv_Unit_type(): Int 
  
  unique function ival_iv_M1_type(): Int 
  
  unique function ival_iv_M2_type(): Int 
  
  unique function ival_iv_IO_type(): Int 
  
  function ival_is_iv_Unit(obj: ival_0): Bool 
  
  function ival_is_iv_M1(obj: ival_0): Bool 
  
  function ival_is_iv_M2(obj: ival_0): Bool 
  
  function ival_is_iv_IO(obj: ival_0): Bool 
  
  axiom ival_equals_iv_M1 {
    (forall _arg0: Ref, _arg1: Ref, ___arg0: Ref, ___arg1: Ref ::
      { ival_iv_M1(_arg0, _arg1), ival_iv_M1(___arg0, ___arg1) }
      (ival_iv_M1(_arg0, _arg1) == ival_iv_M1(___arg0, ___arg1)) ==
      (_arg0 == ___arg0 && _arg1 == ___arg1))
  }
  
  axiom ival_equals_iv_M2 {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, ___arg0: Ref, ___arg1: Ref,
    ___arg2: Ref ::
      { ival_iv_M2(_arg0, _arg1, _arg2), ival_iv_M2(___arg0, ___arg1, ___arg2) }
      (ival_iv_M2(_arg0, _arg1, _arg2) ==
      ival_iv_M2(___arg0, ___arg1, ___arg2)) ==
      (_arg0 == ___arg0 && (_arg1 == ___arg1 && _arg2 == ___arg2)))
  }
  
  axiom ival_equals_iv_IO {
    (forall _arg0: Ref, _arg1: Ref, ___arg0: Ref, ___arg1: Ref ::
      { ival_iv_IO(_arg0, _arg1), ival_iv_IO(___arg0, ___arg1) }
      (ival_iv_IO(_arg0, _arg1) == ival_iv_IO(___arg0, ___arg1)) ==
      (_arg0 == ___arg0 && _arg1 == ___arg1))
  }
  
  axiom ival_decons_over_cons_iv_M1 {
    (forall _arg0: Ref, _arg1: Ref ::
      { ival_iv_M1_iv_M1_arg1(ival_iv_M1(_arg0, _arg1)) }
      ival_iv_M1_iv_M1_arg1(ival_iv_M1(_arg0, _arg1)) == _arg0) &&
    (forall _arg0: Ref, _arg1: Ref ::
      { ival_iv_M1_iv_M1_arg2(ival_iv_M1(_arg0, _arg1)) }
      ival_iv_M1_iv_M1_arg2(ival_iv_M1(_arg0, _arg1)) == _arg1)
  }
  
  axiom ival_decons_over_cons_iv_M2 {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref ::
      { ival_iv_M2_iv_M2_arg1(ival_iv_M2(_arg0, _arg1, _arg2)) }
      ival_iv_M2_iv_M2_arg1(ival_iv_M2(_arg0, _arg1, _arg2)) == _arg0) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Ref ::
      { ival_iv_M2_iv_M2_arg2(ival_iv_M2(_arg0, _arg1, _arg2)) }
      ival_iv_M2_iv_M2_arg2(ival_iv_M2(_arg0, _arg1, _arg2)) == _arg1) &&
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref ::
      { ival_iv_M2_iv_M2_arg3(ival_iv_M2(_arg0, _arg1, _arg2)) }
      ival_iv_M2_iv_M2_arg3(ival_iv_M2(_arg0, _arg1, _arg2)) == _arg2))
  }
  
  axiom ival_decons_over_cons_iv_IO {
    (forall _arg0: Ref, _arg1: Ref ::
      { ival_iv_IO_address(ival_iv_IO(_arg0, _arg1)) }
      ival_iv_IO_address(ival_iv_IO(_arg0, _arg1)) == _arg0) &&
    (forall _arg0: Ref, _arg1: Ref ::
      { ival_iv_IO_msg(ival_iv_IO(_arg0, _arg1)) }
      ival_iv_IO_msg(ival_iv_IO(_arg0, _arg1)) == _arg1)
  }
  
  axiom ival_decons_types_iv_M1 {
    (forall _adt: ival_0 ::
      { ival_iv_M1_iv_M1_arg1(_adt) }
      issubtype(typeof(ival_iv_M1_iv_M1_arg1(_adt)), bytes())) &&
    (forall _adt: ival_0 ::
      { ival_iv_M1_iv_M1_arg2(_adt) }
      issubtype(typeof(ival_iv_M1_iv_M1_arg2(_adt)), fresh_0()))
  }
  
  axiom ival_decons_types_iv_M2 {
    (forall _adt: ival_0 ::
      { ival_iv_M2_iv_M2_arg1(_adt) }
      issubtype(typeof(ival_iv_M2_iv_M2_arg1(_adt)), bytes())) &&
    ((forall _adt: ival_0 ::
      { ival_iv_M2_iv_M2_arg2(_adt) }
      issubtype(typeof(ival_iv_M2_iv_M2_arg2(_adt)), fresh_0())) &&
    (forall _adt: ival_0 ::
      { ival_iv_M2_iv_M2_arg3(_adt) }
      issubtype(typeof(ival_iv_M2_iv_M2_arg3(_adt)), fresh_0())))
  }
  
  axiom ival_decons_types_iv_IO {
    (forall _adt: ival_0 ::
      { ival_iv_IO_address(_adt) }
      issubtype(typeof(ival_iv_IO_address(_adt)), str())) &&
    (forall _adt: ival_0 ::
      { ival_iv_IO_msg(_adt) }
      issubtype(typeof(ival_iv_IO_msg(_adt)), bytes()))
  }
  
  axiom ival_cons_iv_M1_over_decons {
    (forall obj: ival_0 ::
      { ival_is_iv_M1(obj) }
      ival_is_iv_M1(obj) ==>
      obj ==
      ival_iv_M1(ival_iv_M1_iv_M1_arg1(obj), ival_iv_M1_iv_M1_arg2(obj)))
  }
  
  axiom ival_cons_iv_M2_over_decons {
    (forall obj: ival_0 ::
      { ival_is_iv_M2(obj) }
      ival_is_iv_M2(obj) ==>
      obj ==
      ival_iv_M2(ival_iv_M2_iv_M2_arg1(obj), ival_iv_M2_iv_M2_arg2(obj), ival_iv_M2_iv_M2_arg3(obj)))
  }
  
  axiom ival_cons_iv_IO_over_decons {
    (forall obj: ival_0 ::
      { ival_is_iv_IO(obj) }
      ival_is_iv_IO(obj) ==>
      obj == ival_iv_IO(ival_iv_IO_address(obj), ival_iv_IO_msg(obj)))
  }
  
  axiom ival_associate_cons_type_function_with_iv_Unit_constant {
    ival_cons_type(ival_iv_Unit()) == ival_iv_Unit_type()
  }
  
  axiom ival_associate_cons_type_function_with_iv_M1_constant {
    (forall _arg0: Ref, _arg1: Ref ::
      { ival_iv_M1(_arg0, _arg1) }
      ival_cons_type(ival_iv_M1(_arg0, _arg1)) == ival_iv_M1_type())
  }
  
  axiom ival_associate_cons_type_function_with_iv_M2_constant {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref ::
      { ival_iv_M2(_arg0, _arg1, _arg2) }
      ival_cons_type(ival_iv_M2(_arg0, _arg1, _arg2)) == ival_iv_M2_type())
  }
  
  axiom ival_associate_cons_type_function_with_iv_IO_constant {
    (forall _arg0: Ref, _arg1: Ref ::
      { ival_iv_IO(_arg0, _arg1) }
      ival_cons_type(ival_iv_IO(_arg0, _arg1)) == ival_iv_IO_type())
  }
  
  axiom ival_constrain_cons_type_function_cons_constants {
    (forall obj: ival_0 ::
      { ival_cons_type(obj) }
      ival_cons_type(obj) == ival_iv_Unit_type() ||
      (ival_cons_type(obj) == ival_iv_M1_type() ||
      (ival_cons_type(obj) == ival_iv_M2_type() ||
      ival_cons_type(obj) == ival_iv_IO_type())))
  }
  
  axiom ival_associate_cons_type_function_with_is_iv_Unit_bool_function {
    (forall obj: ival_0 ::
      { ival_cons_type(obj) }
      (ival_cons_type(obj) == ival_iv_Unit_type()) == ival_is_iv_Unit(obj))
  }
  
  axiom ival_associate_cons_type_function_with_is_iv_M1_bool_function {
    (forall obj: ival_0 ::
      { ival_cons_type(obj) }
      (ival_cons_type(obj) == ival_iv_M1_type()) == ival_is_iv_M1(obj))
  }
  
  axiom ival_associate_cons_type_function_with_is_iv_M2_bool_function {
    (forall obj: ival_0 ::
      { ival_cons_type(obj) }
      (ival_cons_type(obj) == ival_iv_M2_type()) == ival_is_iv_M2(obj))
  }
  
  axiom ival_associate_cons_type_function_with_is_iv_IO_bool_function {
    (forall obj: ival_0 ::
      { ival_cons_type(obj) }
      (ival_cons_type(obj) == ival_iv_IO_type()) == ival_is_iv_IO(obj))
  }
  
  axiom ival_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), ival()) }
      issubtype(typeof(ref), ival()) ==>
      typeof(ref) == iv_Unit() ||
      (typeof(ref) == iv_M1() ||
      (typeof(ref) == iv_M2() || typeof(ref) == iv_IO())))
  }
}

domain init_run_state_type_0  {
  
  function init_run_state_type_init_run_state(_arg0: Ref, _arg1: Ref, _arg2: Ref,
  _arg3: Ref): init_run_state_type_0 
  
  function init_run_state_type_init_run_state_agts(obj: init_run_state_type_0): Ref 
  
  function init_run_state_type_init_run_state_store(obj: init_run_state_type_0): Ref 
  
  function init_run_state_type_init_run_state_ibuf(obj: init_run_state_type_0): Ref 
  
  function init_run_state_type_init_run_state_obuf(obj: init_run_state_type_0): Ref 
  
  function init_run_state_type_cons_type(obj: init_run_state_type_0): Int 
  
  unique function init_run_state_type_init_run_state_type(): Int 
  
  function init_run_state_type_is_init_run_state(obj: init_run_state_type_0): Bool 
  
  axiom init_run_state_type_equals_init_run_state {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref, ___arg0: Ref, ___arg1: Ref,
    ___arg2: Ref, ___arg3: Ref ::
      { init_run_state_type_init_run_state(_arg0, _arg1, _arg2, _arg3), init_run_state_type_init_run_state(___arg0,
      ___arg1, ___arg2, ___arg3) }
      (init_run_state_type_init_run_state(_arg0, _arg1, _arg2, _arg3) ==
      init_run_state_type_init_run_state(___arg0, ___arg1, ___arg2, ___arg3)) ==
      (_arg0 == ___arg0 &&
      (_arg1 == ___arg1 && (_arg2 == ___arg2 && _arg3 == ___arg3))))
  }
  
  axiom init_run_state_type_decons_over_cons_init_run_state {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref ::
      { init_run_state_type_init_run_state_agts(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) }
      init_run_state_type_init_run_state_agts(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) ==
      _arg0) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref ::
      { init_run_state_type_init_run_state_store(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) }
      init_run_state_type_init_run_state_store(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) ==
      _arg1) &&
    ((forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref ::
      { init_run_state_type_init_run_state_ibuf(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) }
      init_run_state_type_init_run_state_ibuf(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) ==
      _arg2) &&
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref ::
      { init_run_state_type_init_run_state_obuf(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) }
      init_run_state_type_init_run_state_obuf(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) ==
      _arg3)))
  }
  
  axiom init_run_state_type_decons_types_init_run_state {
    (forall _adt: init_run_state_type_0 ::
      { init_run_state_type_init_run_state_agts(_adt) }
      issubtype(typeof(init_run_state_type_init_run_state_agts(_adt)), PSeq(int()))) &&
    ((forall _adt: init_run_state_type_0 ::
      { init_run_state_type_init_run_state_store(_adt) }
      issubtype(typeof(init_run_state_type_init_run_state_store(_adt)), PSeq(atom()))) &&
    ((forall _adt: init_run_state_type_0 ::
      { init_run_state_type_init_run_state_ibuf(_adt) }
      issubtype(typeof(init_run_state_type_init_run_state_ibuf(_adt)), PSet(PSeq(object())))) &&
    (forall _adt: init_run_state_type_0 ::
      { init_run_state_type_init_run_state_obuf(_adt) }
      init_run_state_type_init_run_state_obuf(_adt) == null ||
      issubtype(typeof(init_run_state_type_init_run_state_obuf(_adt)), bytes()))))
  }
  
  axiom init_run_state_type_cons_init_run_state_over_decons {
    (forall obj: init_run_state_type_0 ::
      { init_run_state_type_is_init_run_state(obj) }
      init_run_state_type_is_init_run_state(obj) ==>
      obj ==
      init_run_state_type_init_run_state(init_run_state_type_init_run_state_agts(obj),
      init_run_state_type_init_run_state_store(obj), init_run_state_type_init_run_state_ibuf(obj),
      init_run_state_type_init_run_state_obuf(obj)))
  }
  
  axiom init_run_state_type_associate_cons_type_function_with_init_run_state_constant {
    (forall _arg0: Ref, _arg1: Ref, _arg2: Ref, _arg3: Ref ::
      { init_run_state_type_init_run_state(_arg0, _arg1, _arg2, _arg3) }
      init_run_state_type_cons_type(init_run_state_type_init_run_state(_arg0,
      _arg1, _arg2, _arg3)) ==
      init_run_state_type_init_run_state_type())
  }
  
  axiom init_run_state_type_constrain_cons_type_function_cons_constants {
    (forall obj: init_run_state_type_0 ::
      { init_run_state_type_cons_type(obj) }
      init_run_state_type_cons_type(obj) ==
      init_run_state_type_init_run_state_type())
  }
  
  axiom init_run_state_type_associate_cons_type_function_with_is_init_run_state_bool_function {
    (forall obj: init_run_state_type_0 ::
      { init_run_state_type_cons_type(obj) }
      (init_run_state_type_cons_type(obj) ==
      init_run_state_type_init_run_state_type()) ==
      init_run_state_type_is_init_run_state(obj))
  }
  
  axiom init_run_state_type_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), init_run_state_type()) }
      issubtype(typeof(ref), init_run_state_type()) ==>
      typeof(ref) == init_run_state())
  }
}

domain msg_1  {
  
  function msg_Junk(): msg_1 
  
  function msg_Agent(_arg0: Int): msg_1 
  
  function msg_Nonce(_arg0: Ref): msg_1 
  
  function msg_Key(_arg0: Ref): msg_1 
  
  function msg_Hash(_arg0: msg_1): msg_1 
  
  function msg_MPair(_arg0: msg_1, _arg1: msg_1): msg_1 
  
  function msg_Crypt(_arg0: Ref, _arg1: msg_1): msg_1 
  
  function msg_Agent_Agent_arg(obj: msg_1): Int 
  
  function msg_Nonce_Nonce_arg(obj: msg_1): Ref 
  
  function msg_Key_Key_arg(obj: msg_1): Ref 
  
  function msg_Hash_Hash_arg(obj: msg_1): msg_1 
  
  function msg_MPair_fst(obj: msg_1): msg_1 
  
  function msg_MPair_snd(obj: msg_1): msg_1 
  
  function msg_Crypt_Crypt_arg1(obj: msg_1): Ref 
  
  function msg_Crypt_Crypt_arg2(obj: msg_1): msg_1 
  
  function msg_cons_type(obj: msg_1): Int 
  
  unique function msg_Junk_type(): Int 
  
  unique function msg_Agent_type(): Int 
  
  unique function msg_Nonce_type(): Int 
  
  unique function msg_Key_type(): Int 
  
  unique function msg_Hash_type(): Int 
  
  unique function msg_MPair_type(): Int 
  
  unique function msg_Crypt_type(): Int 
  
  function msg_is_Junk(obj: msg_1): Bool 
  
  function msg_is_Agent(obj: msg_1): Bool 
  
  function msg_is_Nonce(obj: msg_1): Bool 
  
  function msg_is_Key(obj: msg_1): Bool 
  
  function msg_is_Hash(obj: msg_1): Bool 
  
  function msg_is_MPair(obj: msg_1): Bool 
  
  function msg_is_Crypt(obj: msg_1): Bool 
  
  axiom msg_equals_Agent {
    (forall _arg0: Int, ___arg0: Int ::
      { msg_Agent(_arg0), msg_Agent(___arg0) }
      (msg_Agent(_arg0) == msg_Agent(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom msg_equals_Nonce {
    (forall _arg0: Ref, ___arg0: Ref ::
      { msg_Nonce(_arg0), msg_Nonce(___arg0) }
      (msg_Nonce(_arg0) == msg_Nonce(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom msg_equals_Key {
    (forall _arg0: Ref, ___arg0: Ref ::
      { msg_Key(_arg0), msg_Key(___arg0) }
      (msg_Key(_arg0) == msg_Key(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom msg_equals_Hash {
    (forall _arg0: msg_1, ___arg0: msg_1 ::
      { msg_Hash(_arg0), msg_Hash(___arg0) }
      (msg_Hash(_arg0) == msg_Hash(___arg0)) == (_arg0 == ___arg0))
  }
  
  axiom msg_equals_MPair {
    (forall _arg0: msg_1, _arg1: msg_1, ___arg0: msg_1, ___arg1: msg_1 ::
      { msg_MPair(_arg0, _arg1), msg_MPair(___arg0, ___arg1) }
      (msg_MPair(_arg0, _arg1) == msg_MPair(___arg0, ___arg1)) ==
      (_arg0 == ___arg0 && _arg1 == ___arg1))
  }
  
  axiom msg_equals_Crypt {
    (forall _arg0: Ref, _arg1: msg_1, ___arg0: Ref, ___arg1: msg_1 ::
      { msg_Crypt(_arg0, _arg1), msg_Crypt(___arg0, ___arg1) }
      (msg_Crypt(_arg0, _arg1) == msg_Crypt(___arg0, ___arg1)) ==
      (_arg0 == ___arg0 && _arg1 == ___arg1))
  }
  
  axiom msg_decons_over_cons_Agent {
    (forall _arg0: Int ::
      { msg_Agent_Agent_arg(msg_Agent(_arg0)) }
      msg_Agent_Agent_arg(msg_Agent(_arg0)) == _arg0)
  }
  
  axiom msg_decons_over_cons_Nonce {
    (forall _arg0: Ref ::
      { msg_Nonce_Nonce_arg(msg_Nonce(_arg0)) }
      msg_Nonce_Nonce_arg(msg_Nonce(_arg0)) == _arg0)
  }
  
  axiom msg_decons_over_cons_Key {
    (forall _arg0: Ref ::
      { msg_Key_Key_arg(msg_Key(_arg0)) }
      msg_Key_Key_arg(msg_Key(_arg0)) == _arg0)
  }
  
  axiom msg_decons_over_cons_Hash {
    (forall _arg0: msg_1 ::
      { msg_Hash_Hash_arg(msg_Hash(_arg0)) }
      msg_Hash_Hash_arg(msg_Hash(_arg0)) == _arg0)
  }
  
  axiom msg_decons_over_cons_MPair {
    (forall _arg0: msg_1, _arg1: msg_1 ::
      { msg_MPair_fst(msg_MPair(_arg0, _arg1)) }
      msg_MPair_fst(msg_MPair(_arg0, _arg1)) == _arg0) &&
    (forall _arg0: msg_1, _arg1: msg_1 ::
      { msg_MPair_snd(msg_MPair(_arg0, _arg1)) }
      msg_MPair_snd(msg_MPair(_arg0, _arg1)) == _arg1)
  }
  
  axiom msg_decons_over_cons_Crypt {
    (forall _arg0: Ref, _arg1: msg_1 ::
      { msg_Crypt_Crypt_arg1(msg_Crypt(_arg0, _arg1)) }
      msg_Crypt_Crypt_arg1(msg_Crypt(_arg0, _arg1)) == _arg0) &&
    (forall _arg0: Ref, _arg1: msg_1 ::
      { msg_Crypt_Crypt_arg2(msg_Crypt(_arg0, _arg1)) }
      msg_Crypt_Crypt_arg2(msg_Crypt(_arg0, _arg1)) == _arg1)
  }
  
  axiom msg_decons_types_Nonce {
    (forall _adt: msg_1 ::
      { msg_Nonce_Nonce_arg(_adt) }
      issubtype(typeof(msg_Nonce_Nonce_arg(_adt)), fresh_0()))
  }
  
  axiom msg_decons_types_Key {
    (forall _adt: msg_1 ::
      { msg_Key_Key_arg(_adt) }
      issubtype(typeof(msg_Key_Key_arg(_adt)), key_0()))
  }
  
  axiom msg_decons_types_Crypt {
    (forall _adt: msg_1 ::
      { msg_Crypt_Crypt_arg1(_adt) }
      issubtype(typeof(msg_Crypt_Crypt_arg1(_adt)), key_0()))
  }
  
  axiom msg_cons_Agent_over_decons {
    (forall obj: msg_1 ::
      { msg_is_Agent(obj) }
      msg_is_Agent(obj) ==> obj == msg_Agent(msg_Agent_Agent_arg(obj)))
  }
  
  axiom msg_cons_Nonce_over_decons {
    (forall obj: msg_1 ::
      { msg_is_Nonce(obj) }
      msg_is_Nonce(obj) ==> obj == msg_Nonce(msg_Nonce_Nonce_arg(obj)))
  }
  
  axiom msg_cons_Key_over_decons {
    (forall obj: msg_1 ::
      { msg_is_Key(obj) }
      msg_is_Key(obj) ==> obj == msg_Key(msg_Key_Key_arg(obj)))
  }
  
  axiom msg_cons_Hash_over_decons {
    (forall obj: msg_1 ::
      { msg_is_Hash(obj) }
      msg_is_Hash(obj) ==> obj == msg_Hash(msg_Hash_Hash_arg(obj)))
  }
  
  axiom msg_cons_MPair_over_decons {
    (forall obj: msg_1 ::
      { msg_is_MPair(obj) }
      msg_is_MPair(obj) ==>
      obj == msg_MPair(msg_MPair_fst(obj), msg_MPair_snd(obj)))
  }
  
  axiom msg_cons_Crypt_over_decons {
    (forall obj: msg_1 ::
      { msg_is_Crypt(obj) }
      msg_is_Crypt(obj) ==>
      obj ==
      msg_Crypt(msg_Crypt_Crypt_arg1(obj), msg_Crypt_Crypt_arg2(obj)))
  }
  
  axiom msg_associate_cons_type_function_with_Junk_constant {
    msg_cons_type(msg_Junk()) == msg_Junk_type()
  }
  
  axiom msg_associate_cons_type_function_with_Agent_constant {
    (forall _arg0: Int ::
      { msg_Agent(_arg0) }
      msg_cons_type(msg_Agent(_arg0)) == msg_Agent_type())
  }
  
  axiom msg_associate_cons_type_function_with_Nonce_constant {
    (forall _arg0: Ref ::
      { msg_Nonce(_arg0) }
      msg_cons_type(msg_Nonce(_arg0)) == msg_Nonce_type())
  }
  
  axiom msg_associate_cons_type_function_with_Key_constant {
    (forall _arg0: Ref ::
      { msg_Key(_arg0) }
      msg_cons_type(msg_Key(_arg0)) == msg_Key_type())
  }
  
  axiom msg_associate_cons_type_function_with_Hash_constant {
    (forall _arg0: msg_1 ::
      { msg_Hash(_arg0) }
      msg_cons_type(msg_Hash(_arg0)) == msg_Hash_type())
  }
  
  axiom msg_associate_cons_type_function_with_MPair_constant {
    (forall _arg0: msg_1, _arg1: msg_1 ::
      { msg_MPair(_arg0, _arg1) }
      msg_cons_type(msg_MPair(_arg0, _arg1)) == msg_MPair_type())
  }
  
  axiom msg_associate_cons_type_function_with_Crypt_constant {
    (forall _arg0: Ref, _arg1: msg_1 ::
      { msg_Crypt(_arg0, _arg1) }
      msg_cons_type(msg_Crypt(_arg0, _arg1)) == msg_Crypt_type())
  }
  
  axiom msg_constrain_cons_type_function_cons_constants {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      msg_cons_type(obj) == msg_Junk_type() ||
      (msg_cons_type(obj) == msg_Agent_type() ||
      (msg_cons_type(obj) == msg_Nonce_type() ||
      (msg_cons_type(obj) == msg_Key_type() ||
      (msg_cons_type(obj) == msg_Hash_type() ||
      (msg_cons_type(obj) == msg_MPair_type() ||
      msg_cons_type(obj) == msg_Crypt_type()))))))
  }
  
  axiom msg_associate_cons_type_function_with_is_Junk_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_Junk_type()) == msg_is_Junk(obj))
  }
  
  axiom msg_associate_cons_type_function_with_is_Agent_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_Agent_type()) == msg_is_Agent(obj))
  }
  
  axiom msg_associate_cons_type_function_with_is_Nonce_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_Nonce_type()) == msg_is_Nonce(obj))
  }
  
  axiom msg_associate_cons_type_function_with_is_Key_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_Key_type()) == msg_is_Key(obj))
  }
  
  axiom msg_associate_cons_type_function_with_is_Hash_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_Hash_type()) == msg_is_Hash(obj))
  }
  
  axiom msg_associate_cons_type_function_with_is_MPair_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_MPair_type()) == msg_is_MPair(obj))
  }
  
  axiom msg_associate_cons_type_function_with_is_Crypt_bool_function {
    (forall obj: msg_1 ::
      { msg_cons_type(obj) }
      (msg_cons_type(obj) == msg_Crypt_type()) == msg_is_Crypt(obj))
  }
  
  axiom msg_type_of_constructors {
    (forall ref: Ref ::
      { issubtype(typeof(ref), msg()) }
      issubtype(typeof(ref), msg()) ==>
      typeof(ref) == Junk() ||
      (typeof(ref) == Agent() ||
      (typeof(ref) == Nonce() ||
      (typeof(ref) == Key() ||
      (typeof(ref) == Hash() ||
      (typeof(ref) == MPair() || typeof(ref) == Crypt()))))))
  }
}

domain SIFDomain[T]  {
  
  function Low(x: T): Bool 
  
  function LowEvent(): Bool 
  
  axiom low_true {
    (forall x: T :: { (Low(x): Bool) } (Low(x): Bool))
  }
  
  axiom lowevent_true {
    (LowEvent(): Bool)
  }
}

domain _list_ce_helper  {
  
  function seq_ref_length(___s: Seq[Ref]): Int 
  
  function seq_ref_index(___s: Seq[Ref], i: Int): Ref 
  
  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }
  
  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int ::
      { ___s[___i] }
      ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$  {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$ 
  
  function Measure$guard(m: Measure$): Bool 
  
  function Measure$key(m: Measure$): Ref 
  
  function Measure$value(m: Measure$): Int 
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$guard(Measure$create(g, k, v)) }
      Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$key(Measure$create(g, k, v)) }
      Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$value(Measure$create(g, k, v)) }
      Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain __MSHelper[T$]  {
  
  function __toMS(s: Seq[T$]): Multiset[T$] 
  
  axiom __toMS_def_1 {
    (__toMS(Seq[T$]()): Multiset[T$]) == Multiset[T$]()
  }
  
  axiom __toMS_def_2 {
    (forall __t: T$ ::
      { (__toMS(Seq(__t)): Multiset[T$]) }
      (__toMS(Seq(__t)): Multiset[T$]) == Multiset(__t))
  }
  
  axiom __toMS_def_3 {
    (forall __ss1: Seq[T$], __ss2: Seq[T$] ::
      { (__toMS(__ss1 ++ __ss2): Multiset[T$]) }
      (__toMS(__ss1 ++ __ss2): Multiset[T$]) ==
      ((__toMS(__ss1): Multiset[T$]) union (__toMS(__ss2): Multiset[T$])))
  }
  
  axiom __toMS_def_4 {
    (forall __ss1: Seq[T$] ::
      { (__toMS(__ss1): Multiset[T$]) }
      |(__toMS(__ss1): Multiset[T$])| == |__ss1|)
  }
}

domain _Name  {
  
  function _combine(n1: _Name, n2: _Name): _Name 
  
  function _single(n: Int): _Name 
  
  function _get_combined_prefix(n: _Name): _Name 
  
  function _get_combined_name(n: _Name): _Name 
  
  function _get_value(n: _Name): Int 
  
  function _name_type(n: _Name): Bool 
  
  function _is_single(n: _Name): Bool 
  
  function _is_combined(n: _Name): Bool 
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom compose_single {
    (forall n: _Name ::
      { _get_value(n) }
      _is_single(n) ==> n == _single(_get_value(n)))
  }
  
  axiom type_of_single {
    (forall i: Int :: { _single(i) } _name_type(_single(i)))
  }
  
  axiom decompose_combined {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      _get_combined_prefix(_combine(n1, n2)) == n1 &&
      _get_combined_name(_combine(n1, n2)) == n2)
  }
  
  axiom compose_combined {
    (forall n: _Name ::
      { _get_combined_prefix(n) }
      { _get_combined_name(n) }
      _is_combined(n) ==>
      n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom type_of_composed {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      !_name_type(_combine(n1, n2)))
  }
  
  axiom type_is_single {
    (forall n: _Name :: { _name_type(n) } _name_type(n) == _is_single(n))
  }
  
  axiom type_is_combined {
    (forall n: _Name ::
      { _name_type(n) }
      !_name_type(n) == _is_combined(n))
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
}

domain PredicateInstance  {
  
  
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Map[Ref,Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field socket_family: Ref

field socket_type: Ref

field InvalidDataException_msg: Ref

field NonceMaker_r: Ref

field NonceMaker_id: Ref

field NonceMaker___ctr: Ref

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass
{
  val
}

function SecretBox_NONCE_SIZE(receiver: PyType): Ref
  ensures issubtype(typeof(result), int())
  ensures receiver == SecretBox() ==> result == ghost_noncebytes()


function socket_gettimeout(self: Ref): Ref
  requires issubtype(typeof(self), socket())
  requires self != null
  requires acc(socket_timeout(self), wildcard)
  ensures result == null || issubtype(typeof(result), float())


function socket_getblocking(self_0: Ref): Ref
  requires issubtype(typeof(self_0), socket())
  requires self_0 != null
  requires acc(socket_timeout(self_0), wildcard)
  ensures issubtype(typeof(result), bool())
  ensures result == __prim__bool___box__(socket_gettimeout(self_0) == null)


function socket_getsockname(self_1: Ref): Ref
  requires issubtype(typeof(self_1), socket())
  requires self_1 != null
  requires acc(socket_sock(self_1), wildcard)
  ensures issubtype(typeof(result), tuple(Seq(str(), int())))


function socket_getpeername(self_2: Ref): Ref
  requires issubtype(typeof(self_2), socket())
  requires self_2 != null
  requires acc(socket_peer(self_2), wildcard)
  ensures issubtype(typeof(result), tuple(Seq(str(), int())))


function alpha(b: Ref): Ref
  requires issubtype(typeof(b), bytes())
  ensures issubtype(typeof(result), msg())


function ghost_noncebytes(): Ref
  ensures issubtype(typeof(result), int())
  ensures int___gt__(int___unbox__(result), 20) &&
    int___lt__(int___unbox__(result), 30)


function SigningKey_ghost_seed(self_18: Ref): Ref
  requires issubtype(typeof(self_18), SigningKey())
  requires self_18 != null
  requires acc(SigningKey_seed_pred(self_18), 1 / 100)
  ensures issubtype(typeof(result), bytes())


function VerifyKey_ghost_key(self_22: Ref): Ref
  requires issubtype(typeof(self_22), VerifyKey())
  requires self_22 != null
  requires acc(VerifyKey_key_pred(self_22), 1 / 100)
  ensures issubtype(typeof(result), bytes())


function m5i_init_start_trigger(v_14: Ref): Ref
  requires issubtype(typeof(v_14), ival())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5i_init_put_M1_trigger(v_15: Ref): Ref
  requires issubtype(typeof(v_15), ival())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5i_init_get_M2_trigger(v_16: Ref): Ref
  requires issubtype(typeof(v_16), ival())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5i_init_recv_trigger(v_17: Ref): Ref
  requires issubtype(typeof(v_17), ival())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5i_init_send_trigger(v_18: Ref): Ref
  requires issubtype(typeof(v_18), ival())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5r_resp_start_trigger(v_19: Ref): Ref
  requires issubtype(typeof(v_19), rval())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5r_resp_get_M1_trigger(v_20: Ref): Ref
  requires issubtype(typeof(v_20), rval())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5r_resp_put_M2_trigger(v_21: Ref): Ref
  requires issubtype(typeof(v_21), rval())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5r_resp_recv_trigger(v_22: Ref): Ref
  requires issubtype(typeof(v_22), rval())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function m5r_resp_send_trigger(v_23: Ref): Ref
  requires issubtype(typeof(v_23), rval())
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(true)
}

function __file__(): Ref


function __name__(): Ref


function __file___0(): Ref


function __name___0(): Ref


function AF_INET(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(2)
{
  __prim__int___box__(2)
}

function SOCK_DGRAM(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(2)
{
  __prim__int___box__(2)
}

function __file___1(): Ref


function __name___1(): Ref


function __file___2(): Ref


function __name___2(): Ref


function __file___3(): Ref


function __name___3(): Ref


function __file___4(): Ref


function __name___4(): Ref


function INIT_IN_PORT(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(1024)
{
  __prim__int___box__(1024)
}

function RESP_IN_PORT(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(1025)
{
  __prim__int___box__(1025)
}

function SIGNATURE_SIZE(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(64)
{
  __prim__int___box__(64)
}

function NONCE_MAKER_CREATED(): Ref


function __file___5(): Ref


function __name___5(): Ref


function __file___6(): Ref


function __name___6(): Ref


function __file___7(): Ref


function __name___7(): Ref


function __file___8(): Ref


function __name___8(): Ref


function __file___9(): Ref


function __name___9(): Ref


function __file___10(): Ref


function __name___10(): Ref


function __file___11(): Ref


function __name___11(): Ref


function EMPTY_STORE(): Ref
  ensures issubtype(typeof(result), PSeq(atom()))
  ensures result == PSeq___create__(Seq[Ref](), atom())
{
  PSeq___create__(Seq[Ref](), atom())
}

function EMPTY_IBUF(): Ref
  ensures issubtype(typeof(result), PSet(PSeq(object())))
  ensures result == PSet___create__(Set[Ref](), PSeq(object()))
{
  PSet___create__(Set[Ref](), PSeq(object()))
}

function __file___12(): Ref


function __name___12(): Ref


function get__UDP_send__w(t_pre: Ref, v_0: Ref): Ref
  ensures issubtype(typeof(result), ival())


function get__UDP_send__t_post(t_pre: Ref, v_0: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__UDP_receive__w_0(t_pre_0: Ref, v_1: Ref): Ref
  ensures issubtype(typeof(result), iv_IO())


function get__UDP_receive__t_post_0(t_pre_0: Ref, v_1: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__UDPr_send__w_1(t_pre_1: Ref, v_2: Ref): Ref
  ensures issubtype(typeof(result), rval())


function get__UDPr_send__t_post_1(t_pre_1: Ref, v_2: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__UDPr_receive__w_2(t_pre_2: Ref, v_3: Ref): Ref
  ensures issubtype(typeof(result), rv_IO())


function get__UDPr_receive__t_post_2(t_pre_2: Ref, v_3: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__B_m5i_init_start__w_3(t_pre_9: Ref, v_30: Ref): Ref
  ensures issubtype(typeof(result), ival())


function get__B_m5i_init_start__t_post_3(t_pre_9: Ref, v_30: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__B_m5i_init_put_M1__w_4(t_pre_10: Ref, v_31: Ref): Ref
  ensures issubtype(typeof(result), ival())


function get__B_m5i_init_put_M1__t_post_4(t_pre_10: Ref, v_31: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__B_m5i_init_get_M2__w_5(t_pre_11: Ref, v_32: Ref): Ref
  ensures issubtype(typeof(result), ival())


function get__B_m5i_init_get_M2__t_post_5(t_pre_11: Ref, v_32: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__B_m5r_resp_start__w_7(t_pre_13: Ref, v_34: Ref): Ref
  ensures issubtype(typeof(result), rval())


function get__B_m5r_resp_start__t_post_7(t_pre_13: Ref, v_34: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__B_m5r_resp_get_M1__w_8(t_pre_14: Ref, v_35: Ref): Ref
  ensures issubtype(typeof(result), rval())


function get__B_m5r_resp_get_M1__t_post_8(t_pre_14: Ref, v_35: Ref): Ref
  ensures issubtype(typeof(result), Place())


function get__B_m5r_resp_put_M2__w_9(t_pre_15: Ref, v_36: Ref): Ref
  ensures issubtype(typeof(result), rval())


function get__B_m5r_resp_put_M2__t_post_9(t_pre_15: Ref, v_36: Ref): Ref
  ensures issubtype(typeof(result), Place())


function box_ltkey_0(obj: ltkey_0): Ref
  decreases _
  ensures issubtype(typeof(result), ltkey())
  ensures unbox_ltkey_0(result) == obj
  ensures ltkey_is_sharK(obj) ==> typeof(result) == sharK()
  ensures (forall ___other: ltkey_0 ::
      { box_ltkey_0(___other) }
      (obj == ___other) == (result == box_ltkey_0(___other)))
  ensures ltkey_is_publK(obj) ==> typeof(result) == publK()
  ensures (forall ___other: ltkey_0 ::
      { box_ltkey_0(___other) }
      (obj == ___other) == (result == box_ltkey_0(___other)))
  ensures ltkey_is_privK(obj) ==> typeof(result) == privK()
  ensures (forall ___other: ltkey_0 ::
      { box_ltkey_0(___other) }
      (obj == ___other) == (result == box_ltkey_0(___other)))


function unbox_ltkey_0(ref: Ref): ltkey_0
  decreases _
  requires issubtype(typeof(ref), ltkey())
  ensures box_ltkey_0(result) == ref


function box_role_0(obj: role_0): Ref
  decreases _
  ensures issubtype(typeof(result), role())
  ensures unbox_role_0(result) == obj
  ensures role_is_Init(obj) ==> typeof(result) == Init()
  ensures (forall ___other: role_0 ::
      { box_role_0(___other) }
      (obj == ___other) == (result == box_role_0(___other)))
  ensures role_is_Resp(obj) ==> typeof(result) == Resp()
  ensures (forall ___other: role_0 ::
      { box_role_0(___other) }
      (obj == ___other) == (result == box_role_0(___other)))
  ensures role_is_Serv(obj) ==> typeof(result) == Serv()
  ensures (forall ___other: role_0 ::
      { box_role_0(___other) }
      (obj == ___other) == (result == box_role_0(___other)))


function unbox_role_0(ref: Ref): role_0
  decreases _
  requires issubtype(typeof(ref), role())
  ensures box_role_0(result) == ref


function box_uid_type_0(obj: uid_type_0): Ref
  decreases _
  ensures issubtype(typeof(result), uid_type())
  ensures unbox_uid_type_0(result) == obj
  ensures uid_type_is_uid(obj) ==> typeof(result) == uid()
  ensures (forall ___other: uid_type_0 ::
      { box_uid_type_0(___other) }
      (obj == ___other) == (result == box_uid_type_0(___other)))


function unbox_uid_type_0(ref: Ref): uid_type_0
  decreases _
  requires issubtype(typeof(ref), uid_type())
  ensures box_uid_type_0(result) == ref


function box_FreshType_0(obj: FreshType_0): Ref
  decreases _
  ensures issubtype(typeof(result), FreshType())
  ensures unbox_FreshType_0(result) == obj
  ensures FreshType_is_fresh(obj) ==> typeof(result) == fresh_0()
  ensures (forall ___other: FreshType_0 ::
      { box_FreshType_0(___other) }
      (obj == ___other) == (result == box_FreshType_0(___other)))


function unbox_FreshType_0(ref: Ref): FreshType_0
  decreases _
  requires issubtype(typeof(ref), FreshType())
  ensures box_FreshType_0(result) == ref


function box_key_2(obj: key_2): Ref
  decreases _
  ensures issubtype(typeof(result), key_0())
  ensures unbox_key_2(result) == obj
  ensures key_is_sesK(obj) ==> typeof(result) == sesK()
  ensures (forall ___other: key_2 ::
      { box_key_2(___other) }
      (obj == ___other) == (result == box_key_2(___other)))
  ensures key_is_ltK(obj) ==> typeof(result) == ltK()
  ensures (forall ___other: key_2 ::
      { box_key_2(___other) }
      (obj == ___other) == (result == box_key_2(___other)))


function unbox_key_2(ref: Ref): key_2
  decreases _
  requires issubtype(typeof(ref), key_0())
  ensures box_key_2(result) == ref


function box_atom_0(obj: atom_0): Ref
  decreases _
  ensures issubtype(typeof(result), atom())
  ensures unbox_atom_0(result) == obj
  ensures atom_is_aAgt(obj) ==> typeof(result) == aAgt()
  ensures (forall ___other: atom_0 ::
      { box_atom_0(___other) }
      (obj == ___other) == (result == box_atom_0(___other)))
  ensures atom_is_aNon(obj) ==> typeof(result) == aNon()
  ensures (forall ___other: atom_0 ::
      { box_atom_0(___other) }
      (obj == ___other) == (result == box_atom_0(___other)))
  ensures atom_is_aKey(obj) ==> typeof(result) == aKey()
  ensures (forall ___other: atom_0 ::
      { box_atom_0(___other) }
      (obj == ___other) == (result == box_atom_0(___other)))
  ensures atom_is_aNum(obj) ==> typeof(result) == aNum()
  ensures (forall ___other: atom_0 ::
      { box_atom_0(___other) }
      (obj == ___other) == (result == box_atom_0(___other)))


function unbox_atom_0(ref: Ref): atom_0
  decreases _
  requires issubtype(typeof(ref), atom())
  ensures box_atom_0(result) == ref


function box_rval_0(obj: rval_0): Ref
  decreases _
  ensures issubtype(typeof(result), rval())
  ensures unbox_rval_0(result) == obj
  ensures rval_is_rv_Unit(obj) ==> typeof(result) == rv_Unit()
  ensures (forall ___other: rval_0 ::
      { box_rval_0(___other) }
      (obj == ___other) == (result == box_rval_0(___other)))
  ensures rval_is_rv_Int(obj) ==> typeof(result) == rv_Int()
  ensures (forall ___other: rval_0 ::
      { box_rval_0(___other) }
      (obj == ___other) == (result == box_rval_0(___other)))
  ensures rval_is_rv_IO(obj) ==> typeof(result) == rv_IO()
  ensures (forall ___other: rval_0 ::
      { box_rval_0(___other) }
      (obj == ___other) == (result == box_rval_0(___other)))


function unbox_rval_0(ref: Ref): rval_0
  decreases _
  requires issubtype(typeof(ref), rval())
  ensures box_rval_0(result) == ref


function box_resp_run_state_type_0(obj: resp_run_state_type_0): Ref
  decreases _
  ensures issubtype(typeof(result), resp_run_state_type())
  ensures unbox_resp_run_state_type_0(result) == obj
  ensures resp_run_state_type_is_resp_run_state(obj) ==>
    typeof(result) == resp_run_state()
  ensures (forall ___other: resp_run_state_type_0 ::
      { box_resp_run_state_type_0(___other) }
      (obj == ___other) == (result == box_resp_run_state_type_0(___other)))


function unbox_resp_run_state_type_0(ref: Ref): resp_run_state_type_0
  decreases _
  requires issubtype(typeof(ref), resp_run_state_type())
  ensures box_resp_run_state_type_0(result) == ref


function box_ival_0(obj: ival_0): Ref
  decreases _
  ensures issubtype(typeof(result), ival())
  ensures unbox_ival_0(result) == obj
  ensures ival_is_iv_Unit(obj) ==> typeof(result) == iv_Unit()
  ensures (forall ___other: ival_0 ::
      { box_ival_0(___other) }
      (obj == ___other) == (result == box_ival_0(___other)))
  ensures ival_is_iv_M1(obj) ==> typeof(result) == iv_M1()
  ensures (forall ___other: ival_0 ::
      { box_ival_0(___other) }
      (obj == ___other) == (result == box_ival_0(___other)))
  ensures ival_is_iv_M2(obj) ==> typeof(result) == iv_M2()
  ensures (forall ___other: ival_0 ::
      { box_ival_0(___other) }
      (obj == ___other) == (result == box_ival_0(___other)))
  ensures ival_is_iv_IO(obj) ==> typeof(result) == iv_IO()
  ensures (forall ___other: ival_0 ::
      { box_ival_0(___other) }
      (obj == ___other) == (result == box_ival_0(___other)))


function unbox_ival_0(ref: Ref): ival_0
  decreases _
  requires issubtype(typeof(ref), ival())
  ensures box_ival_0(result) == ref


function box_init_run_state_type_0(obj: init_run_state_type_0): Ref
  decreases _
  ensures issubtype(typeof(result), init_run_state_type())
  ensures unbox_init_run_state_type_0(result) == obj
  ensures init_run_state_type_is_init_run_state(obj) ==>
    typeof(result) == init_run_state()
  ensures (forall ___other: init_run_state_type_0 ::
      { box_init_run_state_type_0(___other) }
      (obj == ___other) == (result == box_init_run_state_type_0(___other)))


function unbox_init_run_state_type_0(ref: Ref): init_run_state_type_0
  decreases _
  requires issubtype(typeof(ref), init_run_state_type())
  ensures box_init_run_state_type_0(result) == ref


function box_msg_1(obj: msg_1): Ref
  decreases _
  ensures issubtype(typeof(result), msg())
  ensures unbox_msg_1(result) == obj
  ensures msg_is_Junk(obj) ==> typeof(result) == Junk()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))
  ensures msg_is_Agent(obj) ==> typeof(result) == Agent()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))
  ensures msg_is_Nonce(obj) ==> typeof(result) == Nonce()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))
  ensures msg_is_Key(obj) ==> typeof(result) == Key()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))
  ensures msg_is_Hash(obj) ==> typeof(result) == Hash()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))
  ensures msg_is_MPair(obj) ==> typeof(result) == MPair()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))
  ensures msg_is_Crypt(obj) ==> typeof(result) == Crypt()
  ensures (forall ___other: msg_1 ::
      { box_msg_1(___other) }
      (obj == ___other) == (result == box_msg_1(___other)))


function unbox_msg_1(ref: Ref): msg_1
  decreases _
  requires issubtype(typeof(ref), msg())
  ensures box_msg_1(result) == ref


function __prim__int___box__(prim: Int): Ref
  decreases _
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


function int___unbox__(box: Ref): Int
  decreases _
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==>
    __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==>
    __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  decreases _
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  decreases _
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function int___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

function int___gt__(self: Int, other: Int): Bool
  decreases _
{
  self > other
}

function int___le__(self: Int, other: Int): Bool
  decreases _
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool
  decreases _
{
  self < other
}

function int___add__(self: Int, other: Int): Int
  decreases _
{
  self + other
}

function int___sub__(self: Int, other: Int): Int
  decreases _
{
  self - other
}

function float___create__(i: Int): Ref
  decreases _
  ensures typeof(result) == float()


function object___eq__(self: Ref, other: Ref): Bool
  decreases _
  ensures self == other ==> result
  ensures (self == null) != (other == null) ==> !result


function object___cast__(typ: PyType, obj: Ref): Ref
  decreases _
  requires issubtype(typeof(obj), typ)
  ensures result == obj
  ensures issubtype(typeof(obj), typ)


function bytes___len__(self: Ref): Int
  decreases _
  requires issubtype(typeof(self), bytes())
  ensures result >= 0
{
  |bytes___val__(self)|
}

function bytes___val__(self: Ref): Seq[Ref]
  decreases _


function Level(r: Ref): Perm
  decreases _


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool
  decreases _
{
  (forall m: Measure$ ::
    { (m in map) }
    (m in map) ==>
    Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function PSeq___create__(prim: Seq[Ref], cont_type: PyType): Ref
  decreases _
  ensures typeof(result) == PSeq(cont_type)
  ensures PSeq___sil_seq__(result) == prim


function PSeq___sil_seq__(box: Ref): Seq[Ref]
  decreases _
  requires issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))


function PSet___create__(prim: Set[Ref], cont_type: PyType): Ref
  decreases _
  ensures typeof(result) == PSet(cont_type)
  ensures PSet___unbox__(result) == prim


function PSet___unbox__(box: Ref): Set[Ref]
  decreases _
  requires issubtype(typeof(box), PSet(PSet_arg(typeof(box), 0)))


function PSet___contains__(self: Ref, item: Ref): Bool
  decreases _
  requires issubtype(typeof(self), PSet(PSet_arg(typeof(self), 0)))
  ensures result == (item in PSet___unbox__(self))
  ensures result ==> issubtype(typeof(item), PSet_arg(typeof(self), 0))


function PSet___add__(self: Ref, other: Ref): Ref
  decreases _
  requires issubtype(typeof(self), PSet(PSet_arg(typeof(self), 0)))
  requires issubtype(typeof(other), PSet(PSet_arg(typeof(other), 0)))
  requires PSet_arg(typeof(self), 0) == PSet_arg(typeof(other), 0)
  ensures result ==
    PSet___create__((PSet___unbox__(self) union PSet___unbox__(other)), PSet_arg(typeof(self),
    0))


function str___len__(self: Ref): Int
  decreases _
  ensures result >= 0


function str___val__(self: Ref): Int
  decreases _


function str___create__(len: Int, value: Int): Ref
  decreases _
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


function str___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other)


function tuple___val__(self: Ref): Seq[Ref]
  decreases _


function tuple___create2__(arg0: Ref, arg1: Ref, t0: PyType, t1: PyType, ctr: Int): Ref
  decreases _
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1))
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple___val__(result) == Seq(arg0, arg1)
  ensures tuple___len__(result) == 2 &&
    (tuple___getitem__(result, 0) == arg0 &&
    tuple___getitem__(result, 1) == arg1)


function tuple___len__(self: Ref): Int
  decreases _
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)|


function tuple___getitem__(self: Ref, key: Int): Ref
  decreases _
  requires (let ln ==
      (tuple___len__(self)) in
      (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==>
    issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==>
    issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) +
    key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==>
    result == tuple___val__(self)[tuple___len__(self) + key]


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate UDP_send(t_pre: Ref, v_0: Ref) 

predicate UDP_receive(t_pre_0: Ref, v_1: Ref) 

predicate UDPr_send(t_pre_1: Ref, v_2: Ref) 

predicate UDPr_receive(t_pre_2: Ref, v_3: Ref) 

predicate m6i_init_start(t_1: Ref, s_0: Ref, A: Int, B_0: Int, Ra: Ref, addrB: Ref) 

predicate m6i_init_put_M1(t_2: Ref, s_1: Ref, A_0: Int, B_1: Int, Ra_0: Ref,
  addrB_0: Ref) 

predicate m6i_init_get_M2(t_3: Ref, s_2: Ref, A_1: Int, B_2: Int, Ra_1: Ref,
  addrB_1: Ref) 

predicate m6i_recv(t_4: Ref, s_3: Ref, A_2: Int, B_3: Int, Ra_2: Ref, addrB_2: Ref) 

predicate m6i_send(t_5: Ref, s_4: Ref, A_3: Int, B_4: Int, Ra_3: Ref, addrB_3: Ref) 

predicate m6i_iospec_ord(t_6: Ref, s_5: Ref, A_4: Int, B_5: Int, Ra_4: Ref,
  addrB_4: Ref) 

predicate m6r_resp_start(t_7: Ref, s_6: Ref, B_6: Int, Rb_0: Ref) 

predicate m6r_resp_get_M1(t_8: Ref, s_7: Ref, B_7: Int, Rb_1: Ref) 

predicate m6r_resp_put_M2(t_9: Ref, s_8: Ref, B_8: Int, Rb_2: Ref) 

predicate m6r_resp_recv(t_10: Ref, s_9: Ref, B_9: Int, Rb_3: Ref) 

predicate m6r_resp_send(t_11: Ref, s_10: Ref, B_10: Int, Rb_4: Ref) 

predicate m6r_iospec_ord(t_12: Ref, s_11: Ref, B_11: Int, Rb_5: Ref) 

predicate B_m5i_init_start(t_pre_9: Ref, v_30: Ref) 

predicate B_m5i_init_put_M1(t_pre_10: Ref, v_31: Ref) 

predicate B_m5i_init_get_M2(t_pre_11: Ref, v_32: Ref) 

predicate B_m5i_skip(t_pre_12: Ref, v_33: Ref) 

predicate B_m5r_resp_start(t_pre_13: Ref, v_34: Ref) 

predicate B_m5r_resp_get_M1(t_pre_14: Ref, v_35: Ref) 

predicate B_m5r_resp_put_M2(t_pre_15: Ref, v_36: Ref) 

predicate B_m5r_skip(t_pre_16: Ref, v_37: Ref) 

predicate timeout_abstract_rest(self_11: Ref) 

predicate socket_timeout(self_11: Ref) {
  true && issubtype(typeof(self_11), socket()) &&
  ((issubtype(typeof(self_11), socket()) ==> true) &&
  (true && typeof(self_11) != socket() ==>
  acc(timeout_abstract_rest(self_11), write)))
}

predicate sock_abstract_rest(self_12: Ref) 

predicate socket_sock(self_12: Ref) {
  true && issubtype(typeof(self_12), socket()) &&
  ((issubtype(typeof(self_12), socket()) ==> true) &&
  (true && typeof(self_12) != socket() ==>
  acc(sock_abstract_rest(self_12), write)))
}

predicate peer_abstract_rest(self_13: Ref) 

predicate socket_peer(self_13: Ref) {
  true && issubtype(typeof(self_13), socket()) &&
  ((issubtype(typeof(self_13), socket()) ==> true) &&
  (true && typeof(self_13) != socket() ==>
  acc(peer_abstract_rest(self_13), write)))
}

predicate seed_pred_abstract_rest(self_21: Ref) 

predicate SigningKey_seed_pred(self_21: Ref) {
  true && issubtype(typeof(self_21), SigningKey()) &&
  ((issubtype(typeof(self_21), SigningKey()) ==> true) &&
  (true && typeof(self_21) != SigningKey() ==>
  acc(seed_pred_abstract_rest(self_21), write)))
}

predicate key_pred_abstract_rest(self_25: Ref) 

predicate VerifyKey_key_pred(self_25: Ref) {
  true && issubtype(typeof(self_25), VerifyKey()) &&
  ((issubtype(typeof(self_25), VerifyKey()) ==> true) &&
  (true && typeof(self_25) != VerifyKey() ==>
  acc(key_pred_abstract_rest(self_25), write)))
}

method resp(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm,
  B: Ref, privkB: Ref, Rb: Ref, t_0: Ref)
  returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(B), int())
  requires issubtype(typeof(privkB), bytes())
  requires issubtype(typeof(Rb), int())
  requires issubtype(typeof(t_0), Place())
  requires int___le__(0, int___unbox__(B)) &&
    int___lt__(int___unbox__(B), 256)
  requires int___eq__(__prim__int___box__(bytes___len__(privkB)), __prim__int___box__(32))
  requires alpha(privkB) ==
    box_msg_1(msg_Key(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(int___unbox__(B)))))))
  requires acc(NONCE_MAKER_CREATED()._val, write) &&
    issubtype(typeof(NONCE_MAKER_CREATED()._val), bool()) &&
    !bool___unbox__(NONCE_MAKER_CREATED()._val)
  requires [acc(MustInvokeUnbounded(t_0), write),
    (perm(MustInvokeUnbounded(t_0)) > none ?
      acc(MustInvokeUnbounded(t_0), write) :
      acc(MustInvokeCredit(t_0), write))] &&
    acc(m6r_iospec_ord(t_0, null, int___unbox__(B), box_uid_type_0(uid_type_uid(int___unbox__(Rb)))), write)
  requires [true,
    perm(MustTerminate(_cthread_155)) == none &&
    ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) &&
    ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) &&
    ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) &&
    (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r: Ref [_r.MustReleaseBounded] :: Level(_r) <=
      _current_wait_level_155) &&
    ((forperm
      _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <=
      _current_wait_level_155) &&
    _residue_155 <= _current_wait_level_155),
    true]
  ensures _res == null || issubtype(typeof(_res), Place())
  ensures _res != null ==>
    [acc(MustInvokeBounded(_res), write),
    (perm(MustInvokeBounded(_res)) > none ?
      acc(MustInvokeBounded(_res), write) :
      (perm(MustInvokeUnbounded(_res)) > none ?
        acc(MustInvokeUnbounded(_res), write) :
        acc(MustInvokeCredit(_res), write)))]
  ensures [true,
    (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) &&
    ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) &&
    ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) &&
    (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var rec_socket: Ref
  var tp: Ref
  var s: Ref
  var rec_msg: Ref
  var add: Ref
  var bytes_a: Ref
  var bytes_pair: Ref
  var bytes_b: Ref
  var na: Ref
  var parsed_agent_a: Ref
  var parsed_agent_b: Ref
  var nonce_maker: Ref
  var nb: Ref
  var v: Ref
  var send_socket: Ref
  var m_0: Ref
  var signing_key: Ref
  var signed_msg: Ref
  var error: Ref
  var try_finally: Int
  var B_12: Ref
  var privkB_0: Ref
  var Rb_6: Ref
  var t_13: Ref
  var socket_res: Ref
  var tp_0: Ref
  var x_0: Ref
  var m5r_resp_start_res: Ref
  var wildcard_0: Ref
  var tp_1: Ref
  var x_1: Ref
  var recvfrom_rwrapper_res: Ref
  var parse_pair_res: Ref
  var parse_pair_res_0: Ref
  var parse_agent_res: Ref
  var parse_agent_res_0: Ref
  var NonceMaker_res: Ref
  var next_res: Ref
  var tp_2: Ref
  var x_2: Ref
  var m5r_resp_get_M1_res: Ref
  var wildcard_1: Ref
  var socket_res_0: Ref
  var create_pair_res: Ref
  var create_pair_res_0: Ref
  var SigningKey_res: Ref
  var sign_res: Ref
  var tp_3: Ref
  var x_3: Ref
  var m5r_resp_put_M2_res: Ref
  var wildcard_2: Ref
  var tp_4: Ref
  var x_4: Ref
  var send_rwrapper_res: Ref
  var InvalidDataException_res: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  if (perm(MustInvokeUnbounded(t_0)) > none) {
    exhale acc(MustInvokeUnbounded(t_0), write)
    inhale acc(MustInvokeBounded(t_0), write)
  }
  _method_measures_155 := Seq[Measure$]()
  _res := null
  _err := null
  B_12 := B
  privkB_0 := privkB
  Rb_6 := Rb
  t_13 := t_0
  socket_res := new()
  inhale typeof(socket_res) == socket()
  inhale acc(_MaySet(socket_res, 9620159499032407202939191652211), write)
  inhale acc(_MaySet(socket_res, 122632653268740875894353779), write)
  _cwl_155 := socket___init__(_cthread_155, _method_measures_155, _residue_155,
    socket_res, AF_INET(), SOCK_DGRAM(), __prim__int___box__(-1), null)
  rec_socket := socket_res
  inhale _isDefined(549665371315449574417778)
  _cwl_155 := socket_bind(_cthread_155, _method_measures_155, _residue_155,
    _checkDefined(rec_socket, 549665371315449574417778), tuple___create2__(str___create__(9,
    907218670520863502897), RESP_IN_PORT(), str(), int(), 0))
  exhale acc(m6r_iospec_ord(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
  inhale acc(m6r_resp_start(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    (acc(m6r_resp_get_M1(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    (acc(m6r_resp_put_M2(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    (acc(m6r_resp_send(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    acc(m6r_resp_recv(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))))
  exhale acc(m6r_resp_start(t_13, null, int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
  inhale true &&
    (forall v_9: Ref ::
      { m5r_resp_start_trigger(v_9) }
      issubtype(typeof(v_9), rv_Unit()) &&
      issubtype(typeof(v_9), rv_Unit()) &&
      null == null ==>
      acc(B_m5r_resp_start(t_13, v_9), write)) &&
    (forall v_9: Ref ::
      { m5r_resp_start_trigger(v_9) }
      issubtype(typeof(v_9), rv_Unit()) &&
      issubtype(typeof(v_9), rv_Unit()) &&
      null == null ==>
      acc(m6r_iospec_ord(get__B_m5r_resp_start__t_post_7(t_13, v_9), box_resp_run_state_type_0(resp_run_state_type_resp_run_state(PSeq___create__(Seq(B_12),
      int()), EMPTY_STORE(), EMPTY_IBUF(), null, null)), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))
  assert bool___unbox__(m5r_resp_start_trigger(box_rval_0(rval_rv_Unit())))
  _cwl_155, m5r_resp_start_res := m5r_resp_start(_cthread_155, _method_measures_155,
    _residue_155, t_13, box_rval_0(rval_rv_Unit()))
  assert 2 == tuple___len__(m5r_resp_start_res)
  wildcard_0 := tuple___getitem__(m5r_resp_start_res, 0)
  tp := tuple___getitem__(m5r_resp_start_res, 1)
  inhale _isDefined(28788)
  s := box_resp_run_state_type_0(resp_run_state_type_resp_run_state(PSeq___create__(Seq(B_12),
    int()), EMPTY_STORE(), EMPTY_IBUF(), null, null))
  inhale _isDefined(115)
  try_finally := 0
  exhale acc(m6r_iospec_ord(_checkDefined(tp, 28788), _checkDefined(s, 115),
    int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
  inhale acc(m6r_resp_start(_checkDefined(tp, 28788), _checkDefined(s, 115),
    int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    (acc(m6r_resp_get_M1(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
    box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    (acc(m6r_resp_put_M2(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
    box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    (acc(m6r_resp_send(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
    box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
    acc(m6r_resp_recv(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
    box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))))
  exhale acc(m6r_resp_recv(_checkDefined(tp, 28788), _checkDefined(s, 115),
    int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
  inhale true &&
    (forall v_12: Ref ::
      { m5r_resp_recv_trigger(v_12) }
      issubtype(typeof(v_12), rv_Unit()) &&
      issubtype(typeof(v_12), rv_Unit()) &&
      _checkDefined(s, 115) != null ==>
      acc(UDPr_receive(_checkDefined(tp, 28788), v_12), write)) &&
    (forall v_12: Ref ::
      { m5r_resp_recv_trigger(v_12) }
      issubtype(typeof(v_12), rv_Unit()) &&
      issubtype(typeof(v_12), rv_Unit()) &&
      _checkDefined(s, 115) != null ==>
      acc(m6r_iospec_ord(get__UDPr_receive__t_post_2(_checkDefined(tp, 28788),
      v_12), box_resp_run_state_type_0(resp_run_state_type_resp_run_state(resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), PSet___add__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), PSet___create__(Set(PSeq___create__(Seq(rval_rv_IO_address(unbox_rval_0(get__UDPr_receive__w_2(_checkDefined(tp,
      28788), v_12))), rval_rv_IO_msg(unbox_rval_0(get__UDPr_receive__w_2(_checkDefined(tp,
      28788), v_12)))), object())), PSeq(object()))), resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
      115))))), int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))
  assert bool___unbox__(m5r_resp_recv_trigger(box_rval_0(rval_rv_Unit())))
  _cwl_155, recvfrom_rwrapper_res, error := recvfrom_rwrapper(_cthread_155,
    _method_measures_155, _residue_155, _checkDefined(tp, 28788), _checkDefined(rec_socket,
    549665371315449574417778), __prim__int___box__(int___add__(int___unbox__(SecretBox_NONCE_SIZE(SecretBox())),
    9)))
  if (error != null) {
    if (issubtype(typeof(error), Exception())) {
      goto handlerException
    } else {
      exhale false
      goto __end
    }
  }
  assert 3 == tuple___len__(recvfrom_rwrapper_res)
  tp := tuple___getitem__(recvfrom_rwrapper_res, 0)
  inhale _isDefined(28788)
  rec_msg := tuple___getitem__(recvfrom_rwrapper_res, 1)
  inhale _isDefined(29118836190176626)
  add := tuple___getitem__(recvfrom_rwrapper_res, 2)
  inhale _isDefined(6579297)
  s := box_resp_run_state_type_0(resp_run_state_type_resp_run_state(PSeq___create__(Seq(B_12),
    int()), EMPTY_STORE(), PSet___add__(EMPTY_IBUF(), PSet___create__(Set(PSeq___create__(Seq(_checkDefined(add,
    6579297), _checkDefined(rec_msg, 29118836190176626)), object())), PSeq(object()))),
    null, null))
  inhale _isDefined(115)
  _cwl_155, parse_pair_res, error := parse_pair(_cthread_155, _method_measures_155,
    _residue_155, _checkDefined(rec_msg, 29118836190176626))
  if (error != null) {
    if (issubtype(typeof(error), Exception())) {
      goto handlerException
    } else {
      exhale false
      goto __end
    }
  }
  assert 2 == tuple___len__(parse_pair_res)
  bytes_a := tuple___getitem__(parse_pair_res, 0)
  inhale _isDefined(27408021968943458)
  bytes_pair := tuple___getitem__(parse_pair_res, 1)
  inhale _isDefined(540293708391647355894114)
  _cwl_155, parse_pair_res_0, error := parse_pair(_cthread_155, _method_measures_155,
    _residue_155, _checkDefined(bytes_pair, 540293708391647355894114))
  if (error != null) {
    if (issubtype(typeof(error), Exception())) {
      goto handlerException
    } else {
      exhale false
      goto __end
    }
  }
  assert 2 == tuple___len__(parse_pair_res_0)
  bytes_b := tuple___getitem__(parse_pair_res_0, 0)
  inhale _isDefined(27689496945654114)
  na := tuple___getitem__(parse_pair_res_0, 1)
  inhale _isDefined(24942)
  _cwl_155, parse_agent_res, error := parse_agent(_cthread_155, _method_measures_155,
    _residue_155, _checkDefined(bytes_a, 27408021968943458))
  if (error != null) {
    if (issubtype(typeof(error), Exception())) {
      goto handlerException
    } else {
      exhale false
      goto __end
    }
  }
  parsed_agent_a := parse_agent_res
  inhale _isDefined(1974956440714912622678008950579568)
  _cwl_155, parse_agent_res_0, error := parse_agent(_cthread_155, _method_measures_155,
    _residue_155, _checkDefined(bytes_b, 27689496945654114))
  if (error != null) {
    if (issubtype(typeof(error), Exception())) {
      goto handlerException
    } else {
      exhale false
      goto __end
    }
  }
  parsed_agent_b := parse_agent_res_0
  inhale _isDefined(1995238850318564293101956201865584)
  _cwl_155, error := parse_nonce(_cthread_155, _method_measures_155, _residue_155,
    _checkDefined(na, 24942))
  if (error != null) {
    if (issubtype(typeof(error), Exception())) {
      goto handlerException
    } else {
      exhale false
      goto __end
    }
  }
  if (_checkDefined(parsed_agent_b, 1995238850318564293101956201865584) ==
  B_12) {
    NonceMaker_res := new()
    inhale typeof(NonceMaker_res) == NonceMaker()
    inhale acc(_MaySet(NonceMaker_res, 35396679293134476923095641934), write)
    inhale acc(_MaySet(NonceMaker_res, 7955427565631176130658967646030), write)
    inhale acc(_MaySet(NonceMaker_res, 152136313469813113992956505228026212174), write)
    _cwl_155 := NonceMaker___init__(_cthread_155, _method_measures_155, _residue_155,
      NonceMaker_res, box_role_0(role_Resp()), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6))))
    nonce_maker := NonceMaker_res
    inhale _isDefined(138296483272825730210099054)
    _cwl_155, next_res := NonceMaker_next(_cthread_155, _method_measures_155,
      _residue_155, _checkDefined(nonce_maker, 138296483272825730210099054))
    nb := next_res
    inhale _isDefined(25198)
    exhale acc(m6r_iospec_ord(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
    inhale acc(m6r_resp_start(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_get_M1(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_put_M2(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_send(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      acc(m6r_resp_recv(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))))
    exhale acc(m6r_resp_get_M1(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
    inhale true &&
      (forall v_10: Ref ::
        { m5r_resp_get_M1_trigger(v_10) }
        issubtype(typeof(v_10), rv_Int()) &&
        issubtype(typeof(v_10), rv_Int()) &&
        (_checkDefined(s, 115) != null &&
        (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        PSeq___create__(Seq(B_12), int()) &&
        (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        EMPTY_STORE() &&
        (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        null &&
        (PSet___contains__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))), PSeq___create__(Seq(rval_rv_Int_address(unbox_rval_0(v_10)),
        rval_rv_Int_msg(unbox_rval_0(v_10))), object())) &&
        (alpha(rval_rv_Int_msg(unbox_rval_0(v_10))) ==
        box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_10))))),
        unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(int___unbox__(B_12)))),
        unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_10)))))))))) &&
        rval_rv_Int_n1(unbox_rval_0(v_10)) ==
        box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6))),
        0)))))))) ==>
        acc(B_m5r_resp_get_M1(_checkDefined(tp, 28788), v_10), write)) &&
      (forall v_10: Ref ::
        { m5r_resp_get_M1_trigger(v_10) }
        issubtype(typeof(v_10), rv_Int()) &&
        issubtype(typeof(v_10), rv_Int()) &&
        (_checkDefined(s, 115) != null &&
        (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        PSeq___create__(Seq(B_12), int()) &&
        (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        EMPTY_STORE() &&
        (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        null &&
        (PSet___contains__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))), PSeq___create__(Seq(rval_rv_Int_address(unbox_rval_0(v_10)),
        rval_rv_Int_msg(unbox_rval_0(v_10))), object())) &&
        (alpha(rval_rv_Int_msg(unbox_rval_0(v_10))) ==
        box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_10))))),
        unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(int___unbox__(B_12)))),
        unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_10)))))))))) &&
        rval_rv_Int_n1(unbox_rval_0(v_10)) ==
        box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6))),
        0)))))))) ==>
        acc(m6r_iospec_ord(get__B_m5r_resp_get_M1__t_post_8(_checkDefined(tp,
        28788), v_10), box_resp_run_state_type_0(resp_run_state_type_resp_run_state(PSeq___create__(Seq(B_12,
        __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_10)))), int()),
        PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_10))))),
        aNon()), resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))), null, rval_rv_Int_address(unbox_rval_0(v_10)))), int___unbox__(B_12),
        box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))
    v := box_rval_0(rval_rv_Int(_checkDefined(add, 6579297), _checkDefined(rec_msg,
      29118836190176626), int___unbox__(_checkDefined(parsed_agent_a, 1974956440714912622678008950579568)),
      msg_Nonce_Nonce_arg(unbox_msg_1(object___cast__(Nonce(), alpha(_checkDefined(nb,
      25198))))), msg_Nonce_Nonce_arg(unbox_msg_1(object___cast__(Nonce(), alpha(_checkDefined(na,
      24942)))))))
    inhale _isDefined(118)
    assert bool___unbox__(m5r_resp_get_M1_trigger(_checkDefined(v, 118)))
    _cwl_155, m5r_resp_get_M1_res := m5r_resp_get_M1(_cthread_155, _method_measures_155,
      _residue_155, _checkDefined(tp, 28788), _checkDefined(v, 118))
    assert 2 == tuple___len__(m5r_resp_get_M1_res)
    wildcard_1 := tuple___getitem__(m5r_resp_get_M1_res, 0)
    tp := tuple___getitem__(m5r_resp_get_M1_res, 1)
    inhale _isDefined(28788)
    s := box_resp_run_state_type_0(resp_run_state_type_resp_run_state(PSeq___create__(Seq(B_12,
      __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(_checkDefined(v, 118))))),
      int()), PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(_checkDefined(v,
      118)))))), aNon()), resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), null, rval_rv_Int_address(unbox_rval_0(_checkDefined(v, 118)))))
    inhale _isDefined(115)
    socket_res_0 := new()
    inhale typeof(socket_res_0) == socket()
    inhale acc(_MaySet(socket_res_0, 9620159499032407202939191652211), write)
    inhale acc(_MaySet(socket_res_0, 122632653268740875894353779), write)
    _cwl_155 := socket___init__(_cthread_155, _method_measures_155, _residue_155,
      socket_res_0, AF_INET(), SOCK_DGRAM(), __prim__int___box__(-1), null)
    send_socket := socket_res_0
    inhale _isDefined(140714335056755091068314995)
    _cwl_155 := socket_connect(_cthread_155, _method_measures_155, _residue_155,
      _checkDefined(send_socket, 140714335056755091068314995), tuple___create2__(_checkDefined(add,
      6579297), INIT_IN_PORT(), str(), int(), 1))
    _cwl_155, create_pair_res := create_pair(_cthread_155, _method_measures_155,
      _residue_155, _checkDefined(na, 24942), _checkDefined(bytes_a, 27408021968943458))
    _cwl_155, create_pair_res_0 := create_pair(_cthread_155, _method_measures_155,
      _residue_155, _checkDefined(nb, 25198), create_pair_res)
    m_0 := create_pair_res_0
    inhale _isDefined(3170157)
    SigningKey_res := new()
    inhale typeof(SigningKey_res) == SigningKey()
    _cwl_155 := SigningKey___init__(_cthread_155, _method_measures_155, _residue_155,
      SigningKey_res, privkB_0, HexEncoder())
    signing_key := SigningKey_res
    inhale _isDefined(146758963864340606535297395)
    _cwl_155, sign_res := sign(_cthread_155, _method_measures_155, _residue_155,
      _checkDefined(m_0, 3170157), _checkDefined(signing_key, 146758963864340606535297395))
    signed_msg := sign_res
    inhale _isDefined(488533004432309783849331)
    exhale acc(m6r_iospec_ord(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
    inhale acc(m6r_resp_start(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_get_M1(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_put_M2(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_send(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      acc(m6r_resp_recv(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))))
    exhale acc(m6r_resp_put_M2(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
    inhale true &&
      (forall v_11: Ref ::
        { m5r_resp_put_M2_trigger(v_11) }
        issubtype(typeof(v_11), rv_Int()) &&
        issubtype(typeof(v_11), rv_Int()) &&
        (_checkDefined(s, 115) != null &&
        (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        PSeq___create__(Seq(B_12, __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_11)))),
        int()) &&
        (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_11))))),
        aNon()) &&
        (resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        null &&
        (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        rval_rv_Int_address(unbox_rval_0(v_11)) &&
        (rval_rv_Int_n1(unbox_rval_0(v_11)) ==
        box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6))),
        0)) &&
        alpha(rval_rv_Int_msg(unbox_rval_0(v_11))) ==
        box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(int___unbox__(B_12))))),
        unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n1(unbox_rval_0(v_11))))),
        unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_11))))),
        unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_11))))))))))))))))))) ==>
        acc(B_m5r_resp_put_M2(_checkDefined(tp, 28788), v_11), write)) &&
      (forall v_11: Ref ::
        { m5r_resp_put_M2_trigger(v_11) }
        issubtype(typeof(v_11), rv_Int()) &&
        issubtype(typeof(v_11), rv_Int()) &&
        (_checkDefined(s, 115) != null &&
        (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        PSeq___create__(Seq(B_12, __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_11)))),
        int()) &&
        (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_11))))),
        aNon()) &&
        (resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        null &&
        (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        rval_rv_Int_address(unbox_rval_0(v_11)) &&
        (rval_rv_Int_n1(unbox_rval_0(v_11)) ==
        box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6))),
        0)) &&
        alpha(rval_rv_Int_msg(unbox_rval_0(v_11))) ==
        box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(int___unbox__(B_12))))),
        unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n1(unbox_rval_0(v_11))))),
        unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_11))))),
        unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_11))))))))))))))))))) ==>
        acc(m6r_iospec_ord(get__B_m5r_resp_put_M2__t_post_9(_checkDefined(tp,
        28788), v_11), box_resp_run_state_type_0(resp_run_state_type_resp_run_state(resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
        115))), resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
        115))), resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))), rval_rv_Int_msg(unbox_rval_0(v_11)), resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))))), int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))
    assert bool___unbox__(m5r_resp_put_M2_trigger(box_rval_0(rval_rv_Int(_checkDefined(add,
      6579297), _checkDefined(signed_msg, 488533004432309783849331), int___unbox__(_checkDefined(parsed_agent_a,
      1974956440714912622678008950579568)), msg_Nonce_Nonce_arg(unbox_msg_1(object___cast__(Nonce(),
      alpha(_checkDefined(nb, 25198))))), msg_Nonce_Nonce_arg(unbox_msg_1(object___cast__(Nonce(),
      alpha(_checkDefined(na, 24942)))))))))
    _cwl_155, m5r_resp_put_M2_res := m5r_resp_put_M2(_cthread_155, _method_measures_155,
      _residue_155, _checkDefined(tp, 28788), box_rval_0(rval_rv_Int(_checkDefined(add,
      6579297), _checkDefined(signed_msg, 488533004432309783849331), int___unbox__(_checkDefined(parsed_agent_a,
      1974956440714912622678008950579568)), msg_Nonce_Nonce_arg(unbox_msg_1(object___cast__(Nonce(),
      alpha(_checkDefined(nb, 25198))))), msg_Nonce_Nonce_arg(unbox_msg_1(object___cast__(Nonce(),
      alpha(_checkDefined(na, 24942))))))))
    assert 2 == tuple___len__(m5r_resp_put_M2_res)
    wildcard_2 := tuple___getitem__(m5r_resp_put_M2_res, 0)
    tp := tuple___getitem__(m5r_resp_put_M2_res, 1)
    inhale _isDefined(28788)
    s := box_resp_run_state_type_0(resp_run_state_type_resp_run_state(resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(_checkDefined(s,
      115))), _checkDefined(signed_msg, 488533004432309783849331), resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
      115)))))
    inhale _isDefined(115)
    exhale acc(m6r_iospec_ord(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
    inhale acc(m6r_resp_start(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_get_M1(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_put_M2(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      (acc(m6r_resp_send(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write) &&
      acc(m6r_resp_recv(_checkDefined(tp, 28788), _checkDefined(s, 115), int___unbox__(B_12),
      box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))))
    exhale acc(m6r_resp_send(_checkDefined(tp, 28788), _checkDefined(s, 115),
      int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write)
    inhale true &&
      (forall v_13: Ref ::
        { m5r_resp_send_trigger(v_13) }
        issubtype(typeof(v_13), rv_IO()) &&
        issubtype(typeof(v_13), rv_IO()) &&
        (_checkDefined(s, 115) != null &&
        (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        rval_rv_IO_address(unbox_rval_0(v_13)) &&
        resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        rval_rv_IO_msg(unbox_rval_0(v_13)))) ==>
        acc(UDPr_send(_checkDefined(tp, 28788), v_13), write)) &&
      (forall v_13: Ref ::
        { m5r_resp_send_trigger(v_13) }
        issubtype(typeof(v_13), rv_IO()) &&
        issubtype(typeof(v_13), rv_IO()) &&
        (_checkDefined(s, 115) != null &&
        (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        rval_rv_IO_address(unbox_rval_0(v_13)) &&
        resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(_checkDefined(s,
        115))) ==
        rval_rv_IO_msg(unbox_rval_0(v_13)))) ==>
        acc(m6r_iospec_ord(get__UDPr_send__t_post_1(_checkDefined(tp, 28788),
        v_13), _checkDefined(s, 115), int___unbox__(B_12), box_uid_type_0(uid_type_uid(int___unbox__(Rb_6)))), write))
    assert bool___unbox__(m5r_resp_send_trigger(box_rval_0(rval_rv_IO(_checkDefined(add,
      6579297), _checkDefined(signed_msg, 488533004432309783849331)))))
    _cwl_155, send_rwrapper_res, error := send_rwrapper(_cthread_155, _method_measures_155,
      _residue_155, _checkDefined(tp, 28788), _checkDefined(send_socket, 140714335056755091068314995),
      _checkDefined(signed_msg, 488533004432309783849331))
    if (error != null) {
      if (issubtype(typeof(error), Exception())) {
        goto handlerException
      } else {
        exhale false
        goto __end
      }
    }
    tp := send_rwrapper_res
    inhale _isDefined(28788)
    _cwl_155 := print(_cthread_155, _method_measures_155, _residue_155, str___create__(26,
      161330352828011314037074973319308217662700686345257363424109906))
  } else {
    InvalidDataException_res := new()
    inhale typeof(InvalidDataException_res) == InvalidDataException()
    inhale acc(_MaySet(InvalidDataException_res, 2536608384261775596614649924460124693269903412895642185289), write)
    _cwl_155 := InvalidDataException___init__(_cthread_155, _method_measures_155,
      _residue_155, InvalidDataException_res, str___create__(20, 664704844906470020926574887615651407677037438290))
    error := InvalidDataException_res
    if (error != null) {
      if (issubtype(typeof(error), Exception())) {
        goto handlerException
      } else {
        exhale false
        goto __end
      }
    }
  }
  label post_try
  _res := _checkDefined(tp, 28788)
  goto __end
  goto __end
  label handlerException
  inhale _isDefined(491496043109)
  _cwl_155 := print(_cthread_155, _method_measures_155, _residue_155, _checkDefined(error,
    491496043109))
  goto post_try
  label __end
}

method socket___init__(_cthread_160: Ref, _caller_measures_160: Seq[Measure$],
  _residue_160: Perm, self_3: Ref, family: Ref, type_0: Ref, proto: Ref, fileno: Ref)
  returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires self_3 != null
  requires acc(_MaySet(self_3, 9620159499032407202939191652211), write)
  requires acc(_MaySet(self_3, 122632653268740875894353779), write)
  requires issubtype(typeof(self_3), socket())
  requires issubtype(typeof(family), int())
  requires issubtype(typeof(type_0), int())
  requires issubtype(typeof(proto), int())
  requires fileno == null || issubtype(typeof(fileno), object())
  requires self_3 != null
  requires [acc(MustTerminate(_cthread_160), write), true]
  requires [true,
    Measure$check(_caller_measures_160, _cthread_160, 1) ||
    perm(MustTerminate(_cthread_160)) == none &&
    ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) &&
    ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) &&
    ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) &&
    (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <=
      _current_wait_level_160) &&
    ((forperm
      _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <=
      _current_wait_level_160) &&
    _residue_160 <= _current_wait_level_160),
    true]
  ensures acc(socket_timeout(self_3), write)
  ensures acc(self_3.socket_type, 1 / 2) &&
    issubtype(typeof(self_3.socket_type), int()) &&
    self_3.socket_type == type_0
  ensures acc(self_3.socket_family, 1 / 2) &&
    issubtype(typeof(self_3.socket_family), int()) &&
    self_3.socket_family == family
  ensures acc(socket_sock(self_3), write) &&
    acc(socket_peer(self_3), write)
{
  var _cwl_160: Perm
  inhale typeof(self_3) == socket()
  inhale false
}

method socket_settimeout(_cthread_161: Ref, _caller_measures_161: Seq[Measure$],
  _residue_161: Perm, self_4: Ref, timeout_0: Ref)
  returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires issubtype(typeof(self_4), socket())
  requires timeout_0 == null || issubtype(typeof(timeout_0), float())
  requires self_4 != null
  requires [acc(MustTerminate(_cthread_161), write), true]
  requires acc(socket_timeout(self_4), write)
  requires [true,
    Measure$check(_caller_measures_161, _cthread_161, 1) ||
    perm(MustTerminate(_cthread_161)) == none &&
    ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) &&
    (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <=
      _current_wait_level_161) &&
    ((forperm
      _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <=
      _current_wait_level_161) &&
    _residue_161 <= _current_wait_level_161),
    true]
  ensures acc(socket_timeout(self_4), write)
  ensures socket_gettimeout(self_4) == timeout_0
{
  var _cwl_161: Perm
  inhale typeof(self_4) == socket()
  inhale false
}

method socket_setblocking(_cthread_162: Ref, _caller_measures_162: Seq[Measure$],
  _residue_162: Perm, self_5: Ref, flag: Ref)
  returns (_current_wait_level_162: Perm)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires issubtype(typeof(self_5), socket())
  requires issubtype(typeof(flag), bool())
  requires self_5 != null
  requires [acc(MustTerminate(_cthread_162), write), true]
  requires acc(socket_timeout(self_5), write)
  requires [true,
    Measure$check(_caller_measures_162, _cthread_162, 1) ||
    perm(MustTerminate(_cthread_162)) == none &&
    ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) &&
    ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) &&
    ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) &&
    (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <=
      _current_wait_level_162) &&
    ((forperm
      _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <=
      _current_wait_level_162) &&
    _residue_162 <= _current_wait_level_162),
    true]
  ensures acc(socket_timeout(self_5), write)
  ensures socket_gettimeout(self_5) ==
    (bool___unbox__(flag) ? null : float___create__(2))
{
  var _cwl_162: Perm
  inhale typeof(self_5) == socket()
  inhale false
}

method socket_bind(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm,
  self_6: Ref, address: Ref)
  returns (_current_wait_level_163: Perm)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires issubtype(typeof(self_6), socket())
  requires issubtype(typeof(address), tuple(Seq(str(), int())))
  requires self_6 != null
  requires [acc(MustTerminate(_cthread_163), write), true]
  requires acc(socket_sock(self_6), write)
  requires [true,
    Measure$check(_caller_measures_163, _cthread_163, 1) ||
    perm(MustTerminate(_cthread_163)) == none &&
    ((forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) &&
    ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) &&
    ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) &&
    (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <=
      _current_wait_level_163) &&
    ((forperm
      _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <=
      _current_wait_level_163) &&
    _residue_163 <= _current_wait_level_163),
    true]
  ensures acc(socket_sock(self_6), 1 / 2)
  ensures socket_getsockname(self_6) == address
{
  var _cwl_163: Perm
  inhale typeof(self_6) == socket()
  inhale false
}

method socket_connect(_cthread_164: Ref, _caller_measures_164: Seq[Measure$],
  _residue_164: Perm, self_7: Ref, address_0: Ref)
  returns (_current_wait_level_164: Perm)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires issubtype(typeof(self_7), socket())
  requires issubtype(typeof(address_0), tuple(Seq(str(), int())))
  requires self_7 != null
  requires [acc(MustTerminate(_cthread_164), write), true]
  requires acc(socket_peer(self_7), write)
  requires [true,
    Measure$check(_caller_measures_164, _cthread_164, 1) ||
    perm(MustTerminate(_cthread_164)) == none &&
    ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) &&
    ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) &&
    ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) &&
    (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <=
      _current_wait_level_164) &&
    ((forperm
      _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <=
      _current_wait_level_164) &&
    _residue_164 <= _current_wait_level_164),
    true]
  ensures acc(socket_peer(self_7), 1 / 2)
  ensures socket_getpeername(self_7) == address_0
{
  var _cwl_164: Perm
  inhale typeof(self_7) == socket()
  inhale false
}

method socket_recv(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm,
  self_8: Ref, buffersize: Ref, flags: Ref)
  returns (_current_wait_level_165: Perm, _res: Ref)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires issubtype(typeof(self_8), socket())
  requires issubtype(typeof(buffersize), int())
  requires flags == null || issubtype(typeof(flags), object())
  requires self_8 != null
  requires [true,
    perm(MustTerminate(_cthread_165)) == none &&
    ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) &&
    ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) &&
    ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) &&
    (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <=
      _current_wait_level_165) &&
    ((forperm
      _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <=
      _current_wait_level_165) &&
    _residue_165 <= _current_wait_level_165),
    true]
  ensures issubtype(typeof(_res), bytes())
{
  var _cwl_165: Perm
  inhale typeof(self_8) == socket()
  _res := null
  inhale false
}

method socket_recvfrom(_cthread_166: Ref, _caller_measures_166: Seq[Measure$],
  _residue_166: Perm, self_9: Ref, buffersize_0: Ref, flags_0: Ref)
  returns (_current_wait_level_166: Perm, _res: Ref)
  requires _cthread_166 != null
  requires issubtype(typeof(_cthread_166), Thread_0())
  requires issubtype(typeof(self_9), socket())
  requires issubtype(typeof(buffersize_0), int())
  requires flags_0 == null || issubtype(typeof(flags_0), object())
  requires self_9 != null
  requires [true,
    perm(MustTerminate(_cthread_166)) == none &&
    ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) &&
    ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) &&
    ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) &&
    (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <=
      _current_wait_level_166) &&
    ((forperm
      _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <=
      _current_wait_level_166) &&
    _residue_166 <= _current_wait_level_166),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(bytes(), tuple(Seq(str(), int())))))
{
  var _cwl_166: Perm
  inhale typeof(self_9) == socket()
  _res := null
  inhale false
}

method socket_send(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm,
  self_10: Ref, data: Ref, flags_1: Ref)
  returns (_current_wait_level_167: Perm, _res: Ref)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires issubtype(typeof(self_10), socket())
  requires issubtype(typeof(data), bytes())
  requires flags_1 == null || issubtype(typeof(flags_1), object())
  requires self_10 != null
  requires [true,
    perm(MustTerminate(_cthread_167)) == none &&
    ((forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) &&
    ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) &&
    ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) &&
    (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <=
      _current_wait_level_167) &&
    ((forperm
      _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <=
      _current_wait_level_167) &&
    _residue_167 <= _current_wait_level_167),
    true]
  ensures issubtype(typeof(_res), int())
{
  var _cwl_167: Perm
  inhale typeof(self_10) == socket()
  _res := null
  inhale false
}

method send_wrapper(_cthread_172: Ref, _caller_measures_172: Seq[Measure$],
  _residue_172: Perm, t1: Ref, send_socket_0: Ref, to_send: Ref)
  returns (_current_wait_level_172: Perm, _res: Ref, _err: Ref)
  requires _cthread_172 != null
  requires issubtype(typeof(_cthread_172), Thread_0())
  requires issubtype(typeof(t1), Place())
  requires issubtype(typeof(send_socket_0), socket())
  requires issubtype(typeof(to_send), bytes())
  requires [acc(MustTerminate(_cthread_172), write), true]
  requires [acc(MustInvokeBounded(t1), write),
    (perm(MustInvokeBounded(t1)) > none &&
    Measure$check(_caller_measures_172, t1, 2) ?
      acc(MustInvokeBounded(t1), write) :
      (perm(MustInvokeUnbounded(t1)) > none ?
        acc(MustInvokeUnbounded(t1), write) :
        acc(MustInvokeCredit(t1), write)))]
  requires acc(send_socket_0.socket_type, 1 / 4) &&
    issubtype(typeof(send_socket_0.socket_type), int()) &&
    (acc(send_socket_0.socket_family, 1 / 4) &&
    issubtype(typeof(send_socket_0.socket_family), int()))
  requires acc(socket_peer(send_socket_0), 1 / 4)
  requires send_socket_0.socket_family == AF_INET()
  requires send_socket_0.socket_type == SOCK_DGRAM()
  requires int___eq__(tuple___getitem__(socket_getpeername(send_socket_0), 1),
    RESP_IN_PORT())
  requires acc(UDP_send(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send))), write)
  requires [true,
    Measure$check(_caller_measures_172, _cthread_172, 2) ||
    perm(MustTerminate(_cthread_172)) == none &&
    ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) &&
    ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) &&
    ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) &&
    (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_18: Ref [_r_18.MustReleaseBounded] :: Level(_r_18) <=
      _current_wait_level_172) &&
    ((forperm
      _r_18: Ref [_r_18.MustReleaseUnbounded] :: Level(_r_18) <=
      _current_wait_level_172) &&
    _residue_172 <= _current_wait_level_172),
    true]
  ensures _err == null ==> issubtype(typeof(_res), Place())
  ensures _err == null ==>
    _res ==
    old(get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send)))) &&
    [acc(MustInvokeUnbounded(old(get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send))))), write),
    (perm(MustInvokeUnbounded(old(get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send)))))) >
    none ?
      acc(MustInvokeUnbounded(old(get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
      0), to_send))))), write) :
      acc(MustInvokeCredit(old(get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
      0), to_send))))), write))]
  ensures _err == null ==>
    acc(send_socket_0.socket_type, 1 / 4) &&
    issubtype(typeof(send_socket_0.socket_type), int()) &&
    (acc(send_socket_0.socket_family, 1 / 4) &&
    issubtype(typeof(send_socket_0.socket_family), int()))
  ensures _err == null ==> acc(socket_peer(send_socket_0), 1 / 4)
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    [acc(MustInvokeUnbounded(t1), write),
    (perm(MustInvokeUnbounded(t1)) > none ?
      acc(MustInvokeUnbounded(t1), write) :
      acc(MustInvokeCredit(t1), write))]
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    acc(send_socket_0.socket_type, 1 / 4) &&
    issubtype(typeof(send_socket_0.socket_type), int()) &&
    (acc(send_socket_0.socket_family, 1 / 4) &&
    issubtype(typeof(send_socket_0.socket_family), int()))
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    acc(socket_peer(send_socket_0), 1 / 4)
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    acc(UDP_send(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send))), write) &&
    get__UDP_send__w(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send))) ==
    old(get__UDP_send__w(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send)))) &&
    get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send))) ==
    old(get__UDP_send__t_post(t1, box_ival_0(ival_iv_IO(tuple___getitem__(socket_getpeername(send_socket_0),
    0), to_send))))
  ensures _err != null ==>
    issubtype(typeof(_err), ConnectionRefusedError())
{
  var _cwl_172: Perm
  _res := null
  inhale false
}

method send_rwrapper(_cthread_173: Ref, _caller_measures_173: Seq[Measure$],
  _residue_173: Perm, t1_0: Ref, send_socket_1: Ref, to_send_0: Ref)
  returns (_current_wait_level_173: Perm, _res: Ref, _err: Ref)
  requires _cthread_173 != null
  requires issubtype(typeof(_cthread_173), Thread_0())
  requires issubtype(typeof(t1_0), Place())
  requires issubtype(typeof(send_socket_1), socket())
  requires issubtype(typeof(to_send_0), bytes())
  requires [acc(MustTerminate(_cthread_173), write), true]
  requires [acc(MustInvokeBounded(t1_0), write),
    (perm(MustInvokeBounded(t1_0)) > none &&
    Measure$check(_caller_measures_173, t1_0, 2) ?
      acc(MustInvokeBounded(t1_0), write) :
      (perm(MustInvokeUnbounded(t1_0)) > none ?
        acc(MustInvokeUnbounded(t1_0), write) :
        acc(MustInvokeCredit(t1_0), write)))]
  requires acc(send_socket_1.socket_type, 1 / 4) &&
    issubtype(typeof(send_socket_1.socket_type), int()) &&
    (acc(send_socket_1.socket_family, 1 / 4) &&
    issubtype(typeof(send_socket_1.socket_family), int()))
  requires acc(socket_peer(send_socket_1), 1 / 4)
  requires send_socket_1.socket_family == AF_INET()
  requires send_socket_1.socket_type == SOCK_DGRAM()
  requires int___eq__(tuple___getitem__(socket_getpeername(send_socket_1), 1),
    INIT_IN_PORT())
  requires acc(UDPr_send(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0))), write)
  requires [true,
    Measure$check(_caller_measures_173, _cthread_173, 2) ||
    perm(MustTerminate(_cthread_173)) == none &&
    ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) &&
    ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) &&
    ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) &&
    (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <=
      _current_wait_level_173) &&
    ((forperm
      _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <=
      _current_wait_level_173) &&
    _residue_173 <= _current_wait_level_173),
    true]
  ensures _err == null ==> issubtype(typeof(_res), Place())
  ensures _err == null ==>
    _res ==
    old(get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0)))) &&
    [acc(MustInvokeUnbounded(old(get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0))))), write),
    (perm(MustInvokeUnbounded(old(get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0)))))) >
    none ?
      acc(MustInvokeUnbounded(old(get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
      0), to_send_0))))), write) :
      acc(MustInvokeCredit(old(get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
      0), to_send_0))))), write))]
  ensures _err == null ==>
    acc(send_socket_1.socket_type, 1 / 4) &&
    issubtype(typeof(send_socket_1.socket_type), int()) &&
    (acc(send_socket_1.socket_family, 1 / 4) &&
    issubtype(typeof(send_socket_1.socket_family), int()))
  ensures _err == null ==> acc(socket_peer(send_socket_1), 1 / 4)
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    [acc(MustInvokeUnbounded(t1_0), write),
    (perm(MustInvokeUnbounded(t1_0)) > none ?
      acc(MustInvokeUnbounded(t1_0), write) :
      acc(MustInvokeCredit(t1_0), write))]
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    acc(send_socket_1.socket_type, 1 / 4) &&
    issubtype(typeof(send_socket_1.socket_type), int()) &&
    (acc(send_socket_1.socket_family, 1 / 4) &&
    issubtype(typeof(send_socket_1.socket_family), int()))
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    acc(socket_peer(send_socket_1), 1 / 4)
  ensures _err != null && issubtype(typeof(_err), ConnectionRefusedError()) ==>
    acc(UDPr_send(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0))), write) &&
    get__UDPr_send__w_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0))) ==
    old(get__UDPr_send__w_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0)))) &&
    get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0))) ==
    old(get__UDPr_send__t_post_1(t1_0, box_rval_0(rval_rv_IO(tuple___getitem__(socket_getpeername(send_socket_1),
    0), to_send_0))))
  ensures _err != null ==>
    issubtype(typeof(_err), ConnectionRefusedError())
{
  var _cwl_173: Perm
  _res := null
  inhale false
}

method recvfrom_wrapper(_cthread_174: Ref, _caller_measures_174: Seq[Measure$],
  _residue_174: Perm, t1_1: Ref, rec_socket_0: Ref, size: Ref)
  returns (_current_wait_level_174: Perm, _res: Ref, _err: Ref)
  requires _cthread_174 != null
  requires issubtype(typeof(_cthread_174), Thread_0())
  requires issubtype(typeof(t1_1), Place())
  requires issubtype(typeof(rec_socket_0), socket())
  requires issubtype(typeof(size), int())
  requires acc(socket_timeout(rec_socket_0), 1 / 4)
  requires acc(rec_socket_0.socket_type, 1 / 4) &&
    issubtype(typeof(rec_socket_0.socket_type), int()) &&
    (acc(rec_socket_0.socket_family, 1 / 4) &&
    issubtype(typeof(rec_socket_0.socket_family), int()))
  requires acc(socket_sock(rec_socket_0), 1 / 4)
  requires !bool___unbox__(socket_getblocking(rec_socket_0)) ==>
    [acc(MustTerminate(_cthread_174), write), true]
  requires [acc(MustInvokeBounded(t1_1), write),
    (perm(MustInvokeBounded(t1_1)) > none &&
    Measure$check(_caller_measures_174, t1_1, 2) ?
      acc(MustInvokeBounded(t1_1), write) :
      (perm(MustInvokeUnbounded(t1_1)) > none ?
        acc(MustInvokeUnbounded(t1_1), write) :
        acc(MustInvokeCredit(t1_1), write)))]
  requires rec_socket_0.socket_family == AF_INET()
  requires rec_socket_0.socket_type == SOCK_DGRAM()
  requires int___eq__(tuple___getitem__(socket_getsockname(rec_socket_0), 1),
    INIT_IN_PORT())
  requires acc(UDP_receive(t1_1, box_ival_0(ival_iv_Unit())), write)
  requires [true,
    !bool___unbox__(socket_getblocking(rec_socket_0)) &&
    Measure$check(_caller_measures_174, _cthread_174, 2) ||
    perm(MustTerminate(_cthread_174)) == none &&
    ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) &&
    ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) &&
    ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) &&
    (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <=
      _current_wait_level_174) &&
    ((forperm
      _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <=
      _current_wait_level_174) &&
    _residue_174 <= _current_wait_level_174),
    true]
  ensures _err == null ==>
    issubtype(typeof(_res), tuple(Seq(Place(), bytes(), str())))
  ensures _err == null ==> acc(socket_timeout(rec_socket_0), 1 / 4)
  ensures _err == null ==>
    acc(rec_socket_0.socket_type, 1 / 4) &&
    issubtype(typeof(rec_socket_0.socket_type), int()) &&
    (acc(rec_socket_0.socket_family, 1 / 4) &&
    issubtype(typeof(rec_socket_0.socket_family), int()))
  ensures _err == null ==> acc(socket_sock(rec_socket_0), 1 / 4)
  ensures _err == null ==>
    tuple___getitem__(_res, 0) ==
    old(get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit()))) &&
    (tuple___getitem__(_res, 1) ==
    ival_iv_IO_msg(unbox_ival_0(old(get__UDP_receive__w_0(t1_1, box_ival_0(ival_iv_Unit()))))) &&
    (int___eq__(__prim__int___box__(bytes___len__(tuple___getitem__(_res, 1))),
    size) &&
    (tuple___getitem__(_res, 2) ==
    ival_iv_IO_address(unbox_ival_0(old(get__UDP_receive__w_0(t1_1, box_ival_0(ival_iv_Unit()))))) &&
    [acc(MustInvokeUnbounded(old(get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit())))), write),
    (perm(MustInvokeUnbounded(old(get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit()))))) >
    none ?
      acc(MustInvokeUnbounded(old(get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit())))), write) :
      acc(MustInvokeCredit(old(get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit())))), write))])))
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(socket_timeout(rec_socket_0), 1 / 2)
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(rec_socket_0.socket_type, 1 / 4) &&
    issubtype(typeof(rec_socket_0.socket_type), int()) &&
    (acc(rec_socket_0.socket_family, 1 / 4) &&
    issubtype(typeof(rec_socket_0.socket_family), int()))
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(socket_sock(rec_socket_0), 1 / 4)
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    [acc(MustInvokeBounded(t1_1), write),
    (perm(MustInvokeBounded(t1_1)) > none ?
      acc(MustInvokeBounded(t1_1), write) :
      (perm(MustInvokeUnbounded(t1_1)) > none ?
        acc(MustInvokeUnbounded(t1_1), write) :
        acc(MustInvokeCredit(t1_1), write)))]
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(UDP_receive(t1_1, box_ival_0(ival_iv_Unit())), write) &&
    get__UDP_receive__w_0(t1_1, box_ival_0(ival_iv_Unit())) ==
    old(get__UDP_receive__w_0(t1_1, box_ival_0(ival_iv_Unit()))) &&
    get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit())) ==
    old(get__UDP_receive__t_post_0(t1_1, box_ival_0(ival_iv_Unit())))
  ensures _err != null ==> issubtype(typeof(_err), timeout())
{
  var _cwl_174: Perm
  _res := null
  inhale false
}

method recvfrom_rwrapper(_cthread_175: Ref, _caller_measures_175: Seq[Measure$],
  _residue_175: Perm, t1_2: Ref, rec_socket_1: Ref, size_0: Ref)
  returns (_current_wait_level_175: Perm, _res: Ref, _err: Ref)
  requires _cthread_175 != null
  requires issubtype(typeof(_cthread_175), Thread_0())
  requires issubtype(typeof(t1_2), Place())
  requires issubtype(typeof(rec_socket_1), socket())
  requires issubtype(typeof(size_0), int())
  requires acc(socket_timeout(rec_socket_1), 1 / 4)
  requires acc(rec_socket_1.socket_type, 1 / 4) &&
    issubtype(typeof(rec_socket_1.socket_type), int()) &&
    (acc(rec_socket_1.socket_family, 1 / 4) &&
    issubtype(typeof(rec_socket_1.socket_family), int()))
  requires acc(socket_sock(rec_socket_1), 1 / 4)
  requires !bool___unbox__(socket_getblocking(rec_socket_1)) ==>
    [acc(MustTerminate(_cthread_175), write), true]
  requires [acc(MustInvokeBounded(t1_2), write),
    (perm(MustInvokeBounded(t1_2)) > none &&
    Measure$check(_caller_measures_175, t1_2, 2) ?
      acc(MustInvokeBounded(t1_2), write) :
      (perm(MustInvokeUnbounded(t1_2)) > none ?
        acc(MustInvokeUnbounded(t1_2), write) :
        acc(MustInvokeCredit(t1_2), write)))]
  requires rec_socket_1.socket_family == AF_INET()
  requires rec_socket_1.socket_type == SOCK_DGRAM()
  requires int___eq__(tuple___getitem__(socket_getsockname(rec_socket_1), 1),
    RESP_IN_PORT())
  requires acc(UDPr_receive(t1_2, box_rval_0(rval_rv_Unit())), write)
  requires [true,
    !bool___unbox__(socket_getblocking(rec_socket_1)) &&
    Measure$check(_caller_measures_175, _cthread_175, 2) ||
    perm(MustTerminate(_cthread_175)) == none &&
    ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) &&
    ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) &&
    ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) &&
    (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <=
      _current_wait_level_175) &&
    ((forperm
      _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <=
      _current_wait_level_175) &&
    _residue_175 <= _current_wait_level_175),
    true]
  ensures _err == null ==>
    issubtype(typeof(_res), tuple(Seq(Place(), bytes(), str())))
  ensures _err == null ==> acc(socket_timeout(rec_socket_1), 1 / 4)
  ensures _err == null ==>
    acc(rec_socket_1.socket_type, 1 / 4) &&
    issubtype(typeof(rec_socket_1.socket_type), int()) &&
    (acc(rec_socket_1.socket_family, 1 / 4) &&
    issubtype(typeof(rec_socket_1.socket_family), int()))
  ensures _err == null ==> acc(socket_sock(rec_socket_1), 1 / 4)
  ensures _err == null ==>
    tuple___getitem__(_res, 0) ==
    old(get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit()))) &&
    (tuple___getitem__(_res, 1) ==
    rval_rv_IO_msg(unbox_rval_0(old(get__UDPr_receive__w_2(t1_2, box_rval_0(rval_rv_Unit()))))) &&
    (int___eq__(__prim__int___box__(bytes___len__(tuple___getitem__(_res, 1))),
    size_0) &&
    (tuple___getitem__(_res, 2) ==
    rval_rv_IO_address(unbox_rval_0(old(get__UDPr_receive__w_2(t1_2, box_rval_0(rval_rv_Unit()))))) &&
    [acc(MustInvokeUnbounded(old(get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit())))), write),
    (perm(MustInvokeUnbounded(old(get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit()))))) >
    none ?
      acc(MustInvokeUnbounded(old(get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit())))), write) :
      acc(MustInvokeCredit(old(get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit())))), write))])))
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(socket_timeout(rec_socket_1), 1 / 2)
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(rec_socket_1.socket_type, 1 / 4) &&
    issubtype(typeof(rec_socket_1.socket_type), int()) &&
    (acc(rec_socket_1.socket_family, 1 / 4) &&
    issubtype(typeof(rec_socket_1.socket_family), int()))
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(socket_sock(rec_socket_1), 1 / 4)
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    [acc(MustInvokeBounded(t1_2), write),
    (perm(MustInvokeBounded(t1_2)) > none ?
      acc(MustInvokeBounded(t1_2), write) :
      (perm(MustInvokeUnbounded(t1_2)) > none ?
        acc(MustInvokeUnbounded(t1_2), write) :
        acc(MustInvokeCredit(t1_2), write)))]
  ensures _err != null && issubtype(typeof(_err), timeout()) ==>
    acc(UDPr_receive(t1_2, box_rval_0(rval_rv_Unit())), write) &&
    get__UDPr_receive__w_2(t1_2, box_rval_0(rval_rv_Unit())) ==
    old(get__UDPr_receive__w_2(t1_2, box_rval_0(rval_rv_Unit()))) &&
    get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit())) ==
    old(get__UDPr_receive__t_post_2(t1_2, box_rval_0(rval_rv_Unit())))
  ensures _err != null ==> issubtype(typeof(_err), timeout())
{
  var _cwl_175: Perm
  _res := null
  inhale false
}

method create_pair(_cthread_180: Ref, _caller_measures_180: Seq[Measure$], _residue_180: Perm,
  b1: Ref, b2: Ref)
  returns (_current_wait_level_180: Perm, _res: Ref)
  requires _cthread_180 != null
  requires issubtype(typeof(_cthread_180), Thread_0())
  requires issubtype(typeof(b1), bytes())
  requires issubtype(typeof(b2), bytes())
  requires [acc(MustTerminate(_cthread_180), write), true]
  requires int___le__(bytes___len__(b1), 255)
  requires [true,
    Measure$check(_caller_measures_180, _cthread_180, 1) ||
    perm(MustTerminate(_cthread_180)) == none &&
    ((forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) &&
    ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) &&
    ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) &&
    (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <=
      _current_wait_level_180) &&
    ((forperm
      _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <=
      _current_wait_level_180) &&
    _residue_180 <= _current_wait_level_180),
    true]
  ensures issubtype(typeof(_res), bytes())
  ensures alpha(_res) ==
    box_msg_1(msg_MPair(unbox_msg_1(alpha(b1)), unbox_msg_1(alpha(b2))))
  ensures int___eq__(__prim__int___box__(bytes___len__(_res)), __prim__int___box__(int___add__(int___add__(2,
    bytes___len__(b1)), bytes___len__(b2))))
{
  var _cwl_180: Perm
  _res := null
  inhale false
}

method parse_pair(_cthread_181: Ref, _caller_measures_181: Seq[Measure$], _residue_181: Perm,
  b_0: Ref)
  returns (_current_wait_level_181: Perm, _res: Ref, _err: Ref)
  requires _cthread_181 != null
  requires issubtype(typeof(_cthread_181), Thread_0())
  requires issubtype(typeof(b_0), bytes())
  requires [acc(MustTerminate(_cthread_181), write), true]
  requires [true,
    Measure$check(_caller_measures_181, _cthread_181, 1) ||
    perm(MustTerminate(_cthread_181)) == none &&
    ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) &&
    ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) &&
    ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) &&
    (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_28: Ref [_r_28.MustReleaseBounded] :: Level(_r_28) <=
      _current_wait_level_181) &&
    ((forperm
      _r_28: Ref [_r_28.MustReleaseUnbounded] :: Level(_r_28) <=
      _current_wait_level_181) &&
    _residue_181 <= _current_wait_level_181),
    true]
  ensures _err == null ==>
    issubtype(typeof(_res), tuple(Seq(bytes(), bytes())))
  ensures _err == null ==>
    alpha(b_0) ==
    box_msg_1(msg_MPair(unbox_msg_1(alpha(tuple___getitem__(_res, 0))), unbox_msg_1(alpha(tuple___getitem__(_res,
    1)))))
  ensures _err == null ==>
    int___eq__(__prim__int___box__(bytes___len__(b_0)), __prim__int___box__(int___add__(int___add__(2,
    bytes___len__(tuple___getitem__(_res, 0))), bytes___len__(tuple___getitem__(_res,
    1)))))
  ensures _err != null && issubtype(typeof(_err), InvalidDataException()) ==>
    !issubtype(typeof(alpha(b_0)), MPair())
  ensures _err != null ==> issubtype(typeof(_err), InvalidDataException())
{
  var _cwl_181: Perm
  _res := null
  inhale false
}

method create_agent(_cthread_182: Ref, _caller_measures_182: Seq[Measure$],
  _residue_182: Perm, name: Ref)
  returns (_current_wait_level_182: Perm, _res: Ref)
  requires _cthread_182 != null
  requires issubtype(typeof(_cthread_182), Thread_0())
  requires issubtype(typeof(name), int())
  requires [acc(MustTerminate(_cthread_182), write), true]
  requires int___le__(0, int___unbox__(name)) &&
    int___le__(int___unbox__(name), 255)
  requires [true,
    Measure$check(_caller_measures_182, _cthread_182, 1) ||
    perm(MustTerminate(_cthread_182)) == none &&
    ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) &&
    ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) &&
    ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) &&
    (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_30: Ref [_r_30.MustReleaseBounded] :: Level(_r_30) <=
      _current_wait_level_182) &&
    ((forperm
      _r_30: Ref [_r_30.MustReleaseUnbounded] :: Level(_r_30) <=
      _current_wait_level_182) &&
    _residue_182 <= _current_wait_level_182),
    true]
  ensures issubtype(typeof(_res), bytes())
  ensures alpha(_res) == box_msg_1(msg_Agent(int___unbox__(name)))
  ensures int___eq__(__prim__int___box__(bytes___len__(_res)), __prim__int___box__(2))
{
  var _cwl_182: Perm
  _res := null
  inhale false
}

method parse_agent(_cthread_183: Ref, _caller_measures_183: Seq[Measure$], _residue_183: Perm,
  b_1: Ref)
  returns (_current_wait_level_183: Perm, _res: Ref, _err: Ref)
  requires _cthread_183 != null
  requires issubtype(typeof(_cthread_183), Thread_0())
  requires issubtype(typeof(b_1), bytes())
  requires [acc(MustTerminate(_cthread_183), write), true]
  requires [true,
    Measure$check(_caller_measures_183, _cthread_183, 1) ||
    perm(MustTerminate(_cthread_183)) == none &&
    ((forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) &&
    ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) &&
    ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) &&
    (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <=
      _current_wait_level_183) &&
    ((forperm
      _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <=
      _current_wait_level_183) &&
    _residue_183 <= _current_wait_level_183),
    true]
  ensures _err == null ==> issubtype(typeof(_res), int())
  ensures _err == null ==>
    alpha(b_1) == box_msg_1(msg_Agent(int___unbox__(_res))) &&
    int___eq__(__prim__int___box__(bytes___len__(b_1)), __prim__int___box__(2))
  ensures _err != null && issubtype(typeof(_err), InvalidDataException()) ==>
    !issubtype(typeof(alpha(b_1)), Agent())
  ensures _err != null ==> issubtype(typeof(_err), InvalidDataException())
{
  var _cwl_183: Perm
  _res := null
  inhale false
}

method parse_nonce(_cthread_184: Ref, _caller_measures_184: Seq[Measure$], _residue_184: Perm,
  b_2: Ref)
  returns (_current_wait_level_184: Perm, _err: Ref)
  requires _cthread_184 != null
  requires issubtype(typeof(_cthread_184), Thread_0())
  requires issubtype(typeof(b_2), bytes())
  requires [acc(MustTerminate(_cthread_184), write), true]
  requires [true,
    Measure$check(_caller_measures_184, _cthread_184, 1) ||
    perm(MustTerminate(_cthread_184)) == none &&
    ((forperm _r_35: Ref [MustInvokeBounded(_r_35)] :: false) &&
    ((forperm _r_35: Ref [MustInvokeUnbounded(_r_35)] :: false) &&
    ((forperm _r_35: Ref [_r_35.MustReleaseBounded] :: false) &&
    (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) <=
      _current_wait_level_184) &&
    ((forperm
      _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) <=
      _current_wait_level_184) &&
    _residue_184 <= _current_wait_level_184),
    true]
  ensures _err == null ==> issubtype(typeof(alpha(b_2)), Nonce())
  ensures _err == null ==>
    (exists lambda77_26$n: Ref :: { issubtype(typeof(lambda77_26$n), fresh_0()) } issubtype(typeof(lambda77_26$n),
      fresh_0()) &&
      (issubtype(typeof(lambda77_26$n), fresh_0()) &&
      alpha(b_2) == box_msg_1(msg_Nonce(lambda77_26$n))))
  ensures _err == null ==>
    int___eq__(__prim__int___box__(bytes___len__(b_2)), __prim__int___box__(int___add__(1,
    int___unbox__(SecretBox_NONCE_SIZE(SecretBox())))))
  ensures _err != null && issubtype(typeof(_err), InvalidDataException()) ==>
    !issubtype(typeof(alpha(b_2)), Nonce())
  ensures _err != null ==> issubtype(typeof(_err), InvalidDataException())
{
  var _cwl_184: Perm
  inhale false
}

method sign(_cthread_185: Ref, _caller_measures_185: Seq[Measure$], _residue_185: Perm,
  b_3: Ref, sk: Ref)
  returns (_current_wait_level_185: Perm, _res: Ref)
  requires _cthread_185 != null
  requires issubtype(typeof(_cthread_185), Thread_0())
  requires issubtype(typeof(b_3), bytes())
  requires issubtype(typeof(sk), SigningKey())
  requires [acc(MustTerminate(_cthread_185), write), true]
  requires acc(SigningKey_seed_pred(sk), 1 / 100) &&
    (issubtype(typeof(alpha(SigningKey_ghost_seed(sk))), Key()) &&
    (issubtype(typeof(msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(), alpha(SigningKey_ghost_seed(sk)))))),
    ltK()) &&
    issubtype(typeof(key_ltK_ltK_arg(unbox_key_2(object___cast__(ltK(), msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(),
    alpha(SigningKey_ghost_seed(sk))))))))), privK())))
  requires [true,
    Measure$check(_caller_measures_185, _cthread_185, 1) ||
    perm(MustTerminate(_cthread_185)) == none &&
    ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) &&
    ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) &&
    ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) &&
    (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <=
      _current_wait_level_185) &&
    ((forperm
      _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <=
      _current_wait_level_185) &&
    _residue_185 <= _current_wait_level_185),
    true]
  ensures issubtype(typeof(_res), bytes())
  ensures acc(SigningKey_seed_pred(sk), 1 / 100)
  ensures int___eq__(__prim__int___box__(bytes___len__(_res)), __prim__int___box__(int___add__(int___add__(1,
    bytes___len__(b_3)), int___unbox__(SIGNATURE_SIZE()))))
  ensures alpha(_res) ==
    box_msg_1(msg_Crypt(msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(), old(alpha(SigningKey_ghost_seed(sk)))))),
    unbox_msg_1(alpha(b_3))))
{
  var _cwl_185: Perm
  _res := null
  inhale false
}

method verify(_cthread_186: Ref, _caller_measures_186: Seq[Measure$], _residue_186: Perm,
  b_4: Ref, vk: Ref)
  returns (_current_wait_level_186: Perm, _res: Ref, _err: Ref)
  requires _cthread_186 != null
  requires issubtype(typeof(_cthread_186), Thread_0())
  requires issubtype(typeof(b_4), bytes())
  requires issubtype(typeof(vk), VerifyKey())
  requires [acc(MustTerminate(_cthread_186), write), true]
  requires acc(VerifyKey_key_pred(vk), 1 / 100) &&
    (issubtype(typeof(alpha(VerifyKey_ghost_key(vk))), Key()) &&
    (issubtype(typeof(msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(), alpha(VerifyKey_ghost_key(vk)))))),
    ltK()) &&
    issubtype(typeof(key_ltK_ltK_arg(unbox_key_2(object___cast__(ltK(), msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(),
    alpha(VerifyKey_ghost_key(vk))))))))), publK())))
  requires [true,
    Measure$check(_caller_measures_186, _cthread_186, 1) ||
    perm(MustTerminate(_cthread_186)) == none &&
    ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) &&
    ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) &&
    ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) &&
    (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <=
      _current_wait_level_186) &&
    ((forperm
      _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <=
      _current_wait_level_186) &&
    _residue_186 <= _current_wait_level_186),
    true]
  ensures _err == null ==> issubtype(typeof(_res), bytes())
  ensures _err == null ==> acc(VerifyKey_key_pred(vk), 1 / 100)
  ensures _err == null ==>
    alpha(b_4) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(ltkey_publK_publK_arg(unbox_ltkey_0(object___cast__(publK(),
    key_ltK_ltK_arg(unbox_key_2(object___cast__(ltK(), msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(),
    old(alpha(VerifyKey_ghost_key(vk)))))))))))))))), unbox_msg_1(alpha(_res))))
  ensures _err == null ==>
    int___eq__(__prim__int___box__(bytes___len__(_res)), __prim__int___box__(int___sub__(int___sub__(bytes___len__(b_4),
    int___unbox__(SIGNATURE_SIZE())), 1)))
  ensures _err != null && issubtype(typeof(_err), InvalidDataException()) ==>
    !issubtype(typeof(alpha(b_4)), Crypt())
  ensures _err != null && issubtype(typeof(_err), BadSignatureError()) ==>
    (forall lambda109_24$m: Ref ::
      { issubtype(typeof(lambda109_24$m), msg()) }
      issubtype(typeof(lambda109_24$m), msg()) ==>
      issubtype(typeof(lambda109_24$m), msg()) ==>
      alpha(b_4) !=
      box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(ltkey_publK_publK_arg(unbox_ltkey_0(object___cast__(publK(),
      key_ltK_ltK_arg(unbox_key_2(object___cast__(ltK(), msg_Key_Key_arg(unbox_msg_1(object___cast__(Key(),
      old(alpha(VerifyKey_ghost_key(vk)))))))))))))))), unbox_msg_1(lambda109_24$m))))
  ensures _err != null ==>
    issubtype(typeof(_err), InvalidDataException()) ||
    issubtype(typeof(_err), BadSignatureError())
{
  var _cwl_186: Perm
  _res := null
  inhale false
}

method InvalidDataException___init__(_cthread_176: Ref, _caller_measures_176: Seq[Measure$],
  _residue_176: Perm, self_14: Ref, msg_0: Ref)
  returns (_current_wait_level_176: Perm)
  requires _cthread_176 != null
  requires issubtype(typeof(_cthread_176), Thread_0())
  requires self_14 != null
  requires acc(_MaySet(self_14, 2536608384261775596614649924460124693269903412895642185289), write)
  requires issubtype(typeof(self_14), InvalidDataException())
  requires issubtype(typeof(msg_0), str())
  requires self_14 != null
  requires [acc(MustTerminate(_cthread_176), write), true]
  requires [true,
    Measure$check(_caller_measures_176, _cthread_176, 1) ||
    perm(MustTerminate(_cthread_176)) == none &&
    ((forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) &&
    ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) &&
    ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) &&
    (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <=
      _current_wait_level_176) &&
    ((forperm
      _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <=
      _current_wait_level_176) &&
    _residue_176 <= _current_wait_level_176),
    true]
{
  var _cwl_176: Perm
  inhale typeof(self_14) == InvalidDataException()
  inhale false
}

method InvalidDataException___str__(_cthread_177: Ref, _caller_measures_177: Seq[Measure$],
  _residue_177: Perm, self_15: Ref)
  returns (_current_wait_level_177: Perm, _res: Ref)
  requires _cthread_177 != null
  requires issubtype(typeof(_cthread_177), Thread_0())
  requires issubtype(typeof(self_15), InvalidDataException())
  requires self_15 != null
  requires [true,
    perm(MustTerminate(_cthread_177)) == none &&
    ((forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) &&
    ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) &&
    ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) &&
    (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_42: Ref [_r_42.MustReleaseBounded] :: Level(_r_42) <=
      _current_wait_level_177) &&
    ((forperm
      _r_42: Ref [_r_42.MustReleaseUnbounded] :: Level(_r_42) <=
      _current_wait_level_177) &&
    _residue_177 <= _current_wait_level_177),
    true]
  ensures issubtype(typeof(_res), str())
{
  var _cwl_177: Perm
  inhale typeof(self_15) == InvalidDataException()
  _res := null
  inhale false
}

method NonceMaker___init__(_cthread_178: Ref, _caller_measures_178: Seq[Measure$],
  _residue_178: Perm, self_16: Ref, r: Ref, id_0: Ref)
  returns (_current_wait_level_178: Perm)
  requires _cthread_178 != null
  requires issubtype(typeof(_cthread_178), Thread_0())
  requires self_16 != null
  requires acc(_MaySet(self_16, 35396679293134476923095641934), write)
  requires acc(_MaySet(self_16, 7955427565631176130658967646030), write)
  requires acc(_MaySet(self_16, 152136313469813113992956505228026212174), write)
  requires issubtype(typeof(self_16), NonceMaker())
  requires issubtype(typeof(r), role())
  requires issubtype(typeof(id_0), uid())
  requires self_16 != null
  requires [acc(MustTerminate(_cthread_178), write), true]
  requires acc(NONCE_MAKER_CREATED()._val, write) &&
    issubtype(typeof(NONCE_MAKER_CREATED()._val), bool()) &&
    !bool___unbox__(NONCE_MAKER_CREATED()._val)
  requires [true,
    Measure$check(_caller_measures_178, _cthread_178, 1) ||
    perm(MustTerminate(_cthread_178)) == none &&
    ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) &&
    ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) &&
    ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) &&
    (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <=
      _current_wait_level_178) &&
    ((forperm
      _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <=
      _current_wait_level_178) &&
    _residue_178 <= _current_wait_level_178),
    true]
  ensures acc(self_16.NonceMaker_r, write) &&
    issubtype(typeof(self_16.NonceMaker_r), role()) &&
    self_16.NonceMaker_r == r
  ensures acc(self_16.NonceMaker_id, write) &&
    issubtype(typeof(self_16.NonceMaker_id), uid()) &&
    self_16.NonceMaker_id == id_0
  ensures acc(self_16.NonceMaker___ctr, write) &&
    issubtype(typeof(self_16.NonceMaker___ctr), int()) &&
    int___eq__(self_16.NonceMaker___ctr, __prim__int___box__(0))
{
  var _cwl_178: Perm
  inhale typeof(self_16) == NonceMaker()
  inhale false
}

method NonceMaker_next(_cthread_179: Ref, _caller_measures_179: Seq[Measure$],
  _residue_179: Perm, self_17: Ref)
  returns (_current_wait_level_179: Perm, _res: Ref)
  requires _cthread_179 != null
  requires issubtype(typeof(_cthread_179), Thread_0())
  requires issubtype(typeof(self_17), NonceMaker())
  requires self_17 != null
  requires acc(self_17.NonceMaker_r, 1 / 100) &&
    issubtype(typeof(self_17.NonceMaker_r), role()) &&
    (acc(self_17.NonceMaker_id, 1 / 100) &&
    issubtype(typeof(self_17.NonceMaker_id), uid()))
  requires acc(self_17.NonceMaker___ctr, write) &&
    issubtype(typeof(self_17.NonceMaker___ctr), int())
  requires [acc(MustTerminate(_cthread_179), write), true]
  requires [true,
    Measure$check(_caller_measures_179, _cthread_179, 1) ||
    perm(MustTerminate(_cthread_179)) == none &&
    ((forperm _r_47: Ref [MustInvokeBounded(_r_47)] :: false) &&
    ((forperm _r_47: Ref [MustInvokeUnbounded(_r_47)] :: false) &&
    ((forperm _r_47: Ref [_r_47.MustReleaseBounded] :: false) &&
    (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_46: Ref [_r_46.MustReleaseBounded] :: Level(_r_46) <=
      _current_wait_level_179) &&
    ((forperm
      _r_46: Ref [_r_46.MustReleaseUnbounded] :: Level(_r_46) <=
      _current_wait_level_179) &&
    _residue_179 <= _current_wait_level_179),
    true]
  ensures issubtype(typeof(_res), bytes())
  ensures acc(self_17.NonceMaker___ctr, write) &&
    issubtype(typeof(self_17.NonceMaker___ctr), int()) &&
    int___eq__(self_17.NonceMaker___ctr, __prim__int___box__(int___add__(int___unbox__(old(self_17.NonceMaker___ctr)),
    1)))
  ensures acc(self_17.NonceMaker_r, 1 / 100) &&
    issubtype(typeof(self_17.NonceMaker_r), role()) &&
    (acc(self_17.NonceMaker_id, 1 / 100) &&
    issubtype(typeof(self_17.NonceMaker_id), uid()))
  ensures alpha(_res) ==
    box_msg_1(msg_Nonce(box_FreshType_0(FreshType_fresh(self_17.NonceMaker_r,
    self_17.NonceMaker_id, int___unbox__(old(self_17.NonceMaker___ctr))))))
  ensures int___eq__(__prim__int___box__(bytes___len__(_res)), __prim__int___box__(int___add__(1,
    int___unbox__(SecretBox_NONCE_SIZE(SecretBox())))))
{
  var _cwl_179: Perm
  inhale typeof(self_17) == NonceMaker()
  _res := null
  inhale false
}

method SigningKey___init__(_cthread_189: Ref, _caller_measures_189: Seq[Measure$],
  _residue_189: Perm, self_19: Ref, seed: Ref, encoder: PyType)
  returns (_current_wait_level_189: Perm)
  requires _cthread_189 != null
  requires issubtype(typeof(_cthread_189), Thread_0())
  requires self_19 != null
  requires issubtype(typeof(self_19), SigningKey())
  requires issubtype(typeof(seed), bytes())
  requires true
  requires self_19 != null
  requires [acc(MustTerminate(_cthread_189), write), true]
  requires [true,
    Measure$check(_caller_measures_189, _cthread_189, 1) ||
    perm(MustTerminate(_cthread_189)) == none &&
    ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) &&
    ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) &&
    ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) &&
    (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_48: Ref [_r_48.MustReleaseBounded] :: Level(_r_48) <=
      _current_wait_level_189) &&
    ((forperm
      _r_48: Ref [_r_48.MustReleaseUnbounded] :: Level(_r_48) <=
      _current_wait_level_189) &&
    _residue_189 <= _current_wait_level_189),
    true]
  ensures acc(SigningKey_seed_pred(self_19), write) &&
    SigningKey_ghost_seed(self_19) == seed
{
  var _cwl_189: Perm
  inhale typeof(self_19) == SigningKey()
  inhale false
}

method SigningKey_sign(_cthread_190: Ref, _caller_measures_190: Seq[Measure$],
  _residue_190: Perm, self_20: Ref, message: Ref)
  returns (_current_wait_level_190: Perm, _res: Ref)
  requires _cthread_190 != null
  requires issubtype(typeof(_cthread_190), Thread_0())
  requires issubtype(typeof(self_20), SigningKey())
  requires issubtype(typeof(message), bytes())
  requires self_20 != null
  requires [acc(MustTerminate(_cthread_190), write), true]
  requires acc(SigningKey_seed_pred(self_20), 1 / 100)
  requires [true,
    Measure$check(_caller_measures_190, _cthread_190, 1) ||
    perm(MustTerminate(_cthread_190)) == none &&
    ((forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) &&
    ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) &&
    ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) &&
    (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <=
      _current_wait_level_190) &&
    ((forperm
      _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <=
      _current_wait_level_190) &&
    _residue_190 <= _current_wait_level_190),
    true]
  ensures issubtype(typeof(_res), bytes())
  ensures acc(SigningKey_seed_pred(self_20), 1 / 100)
{
  var _cwl_190: Perm
  inhale typeof(self_20) == SigningKey()
  _res := null
  inhale false
}

method VerifyKey___init__(_cthread_193: Ref, _caller_measures_193: Seq[Measure$],
  _residue_193: Perm, self_23: Ref, key_1: Ref, encoder_0: PyType)
  returns (_current_wait_level_193: Perm)
  requires _cthread_193 != null
  requires issubtype(typeof(_cthread_193), Thread_0())
  requires self_23 != null
  requires issubtype(typeof(self_23), VerifyKey())
  requires issubtype(typeof(key_1), bytes())
  requires true
  requires self_23 != null
  requires [acc(MustTerminate(_cthread_193), write), true]
  requires [true,
    Measure$check(_caller_measures_193, _cthread_193, 1) ||
    perm(MustTerminate(_cthread_193)) == none &&
    ((forperm _r_53: Ref [MustInvokeBounded(_r_53)] :: false) &&
    ((forperm _r_53: Ref [MustInvokeUnbounded(_r_53)] :: false) &&
    ((forperm _r_53: Ref [_r_53.MustReleaseBounded] :: false) &&
    (forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <=
      _current_wait_level_193) &&
    ((forperm
      _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <=
      _current_wait_level_193) &&
    _residue_193 <= _current_wait_level_193),
    true]
  ensures acc(VerifyKey_key_pred(self_23), write) &&
    VerifyKey_ghost_key(self_23) == key_1
{
  var _cwl_193: Perm
  inhale typeof(self_23) == VerifyKey()
  inhale false
}

method VerifyKey_verify(_cthread_194: Ref, _caller_measures_194: Seq[Measure$],
  _residue_194: Perm, self_24: Ref, smessage: Ref)
  returns (_current_wait_level_194: Perm, _res: Ref)
  requires _cthread_194 != null
  requires issubtype(typeof(_cthread_194), Thread_0())
  requires issubtype(typeof(self_24), VerifyKey())
  requires issubtype(typeof(smessage), bytes())
  requires self_24 != null
  requires [acc(MustTerminate(_cthread_194), write), true]
  requires acc(VerifyKey_key_pred(self_24), 1 / 100)
  requires [true,
    Measure$check(_caller_measures_194, _cthread_194, 1) ||
    perm(MustTerminate(_cthread_194)) == none &&
    ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) &&
    ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) &&
    ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) &&
    (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <=
      _current_wait_level_194) &&
    ((forperm
      _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <=
      _current_wait_level_194) &&
    _residue_194 <= _current_wait_level_194),
    true]
  ensures issubtype(typeof(_res), bytes())
  ensures acc(VerifyKey_key_pred(self_24), 1 / 100)
{
  var _cwl_194: Perm
  inhale typeof(self_24) == VerifyKey()
  _res := null
  inhale false
}

method random(_cthread_196: Ref, _caller_measures_196: Seq[Measure$], _residue_196: Perm,
  size_1: Ref)
  returns (_current_wait_level_196: Perm, _res: Ref)
  requires _cthread_196 != null
  requires issubtype(typeof(_cthread_196), Thread_0())
  requires issubtype(typeof(size_1), int())
  requires [true,
    perm(MustTerminate(_cthread_196)) == none &&
    ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) &&
    ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) &&
    ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) &&
    (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <=
      _current_wait_level_196) &&
    ((forperm
      _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <=
      _current_wait_level_196) &&
    _residue_196 <= _current_wait_level_196),
    true]
  ensures issubtype(typeof(_res), bytes())
{
  var _cwl_196: Perm
  _res := null
  inhale false
}

method m5i_init_start(_cthread_207: Ref, _caller_measures_207: Seq[Measure$],
  _residue_207: Perm, t_pre_3: Ref, v_24: Ref)
  returns (_current_wait_level_207: Perm, _res: Ref)
  requires _cthread_207 != null
  requires issubtype(typeof(_cthread_207), Thread_0())
  requires issubtype(typeof(t_pre_3), Place())
  requires issubtype(typeof(v_24), ival())
  requires [acc(MustTerminate(_cthread_207), write), true]
  requires [acc(MustInvokeBounded(t_pre_3), write),
    (perm(MustInvokeBounded(t_pre_3)) > none &&
    Measure$check(_caller_measures_207, t_pre_3, 1) ?
      acc(MustInvokeBounded(t_pre_3), write) :
      (perm(MustInvokeUnbounded(t_pre_3)) > none ?
        acc(MustInvokeUnbounded(t_pre_3), write) :
        acc(MustInvokeCredit(t_pre_3), write)))] &&
    acc(B_m5i_init_start(t_pre_3, v_24), write)
  requires [true,
    Measure$check(_caller_measures_207, _cthread_207, 1) ||
    perm(MustTerminate(_cthread_207)) == none &&
    ((forperm _r_59: Ref [MustInvokeBounded(_r_59)] :: false) &&
    ((forperm _r_59: Ref [MustInvokeUnbounded(_r_59)] :: false) &&
    ((forperm _r_59: Ref [_r_59.MustReleaseBounded] :: false) &&
    (forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) <=
      _current_wait_level_207) &&
    ((forperm
      _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) <=
      _current_wait_level_207) &&
    _residue_207 <= _current_wait_level_207),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(ival(), Place())))
  ensures tuple___getitem__(_res, 0) ==
    old(get__B_m5i_init_start__w_3(t_pre_3, v_24)) &&
    (tuple___getitem__(_res, 1) ==
    old(get__B_m5i_init_start__t_post_3(t_pre_3, v_24)) &&
    [acc(MustInvokeUnbounded(old(get__B_m5i_init_start__t_post_3(t_pre_3, v_24))), write),
    (perm(MustInvokeUnbounded(old(get__B_m5i_init_start__t_post_3(t_pre_3, v_24)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__B_m5i_init_start__t_post_3(t_pre_3, v_24))), write) :
      acc(MustInvokeCredit(old(get__B_m5i_init_start__t_post_3(t_pre_3, v_24))), write))])
{
  var _cwl_207: Perm
  _res := null
  inhale false
}

method m5i_init_put_M1(_cthread_208: Ref, _caller_measures_208: Seq[Measure$],
  _residue_208: Perm, t_pre_4: Ref, v_25: Ref)
  returns (_current_wait_level_208: Perm, _res: Ref)
  requires _cthread_208 != null
  requires issubtype(typeof(_cthread_208), Thread_0())
  requires issubtype(typeof(t_pre_4), Place())
  requires issubtype(typeof(v_25), ival())
  requires [acc(MustTerminate(_cthread_208), write), true]
  requires [acc(MustInvokeBounded(t_pre_4), write),
    (perm(MustInvokeBounded(t_pre_4)) > none &&
    Measure$check(_caller_measures_208, t_pre_4, 1) ?
      acc(MustInvokeBounded(t_pre_4), write) :
      (perm(MustInvokeUnbounded(t_pre_4)) > none ?
        acc(MustInvokeUnbounded(t_pre_4), write) :
        acc(MustInvokeCredit(t_pre_4), write)))] &&
    acc(B_m5i_init_put_M1(t_pre_4, v_25), write)
  requires [true,
    Measure$check(_caller_measures_208, _cthread_208, 1) ||
    perm(MustTerminate(_cthread_208)) == none &&
    ((forperm _r_61: Ref [MustInvokeBounded(_r_61)] :: false) &&
    ((forperm _r_61: Ref [MustInvokeUnbounded(_r_61)] :: false) &&
    ((forperm _r_61: Ref [_r_61.MustReleaseBounded] :: false) &&
    (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_60: Ref [_r_60.MustReleaseBounded] :: Level(_r_60) <=
      _current_wait_level_208) &&
    ((forperm
      _r_60: Ref [_r_60.MustReleaseUnbounded] :: Level(_r_60) <=
      _current_wait_level_208) &&
    _residue_208 <= _current_wait_level_208),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(ival(), Place())))
  ensures tuple___getitem__(_res, 0) ==
    old(get__B_m5i_init_put_M1__w_4(t_pre_4, v_25)) &&
    (tuple___getitem__(_res, 1) ==
    old(get__B_m5i_init_put_M1__t_post_4(t_pre_4, v_25)) &&
    [acc(MustInvokeUnbounded(old(get__B_m5i_init_put_M1__t_post_4(t_pre_4, v_25))), write),
    (perm(MustInvokeUnbounded(old(get__B_m5i_init_put_M1__t_post_4(t_pre_4,
    v_25)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__B_m5i_init_put_M1__t_post_4(t_pre_4,
      v_25))), write) :
      acc(MustInvokeCredit(old(get__B_m5i_init_put_M1__t_post_4(t_pre_4, v_25))), write))])
{
  var _cwl_208: Perm
  _res := null
  inhale false
}

method m5i_init_get_M2(_cthread_209: Ref, _caller_measures_209: Seq[Measure$],
  _residue_209: Perm, t_pre_5: Ref, v_26: Ref)
  returns (_current_wait_level_209: Perm, _res: Ref)
  requires _cthread_209 != null
  requires issubtype(typeof(_cthread_209), Thread_0())
  requires issubtype(typeof(t_pre_5), Place())
  requires issubtype(typeof(v_26), ival())
  requires [acc(MustTerminate(_cthread_209), write), true]
  requires [acc(MustInvokeBounded(t_pre_5), write),
    (perm(MustInvokeBounded(t_pre_5)) > none &&
    Measure$check(_caller_measures_209, t_pre_5, 1) ?
      acc(MustInvokeBounded(t_pre_5), write) :
      (perm(MustInvokeUnbounded(t_pre_5)) > none ?
        acc(MustInvokeUnbounded(t_pre_5), write) :
        acc(MustInvokeCredit(t_pre_5), write)))] &&
    acc(B_m5i_init_get_M2(t_pre_5, v_26), write)
  requires [true,
    Measure$check(_caller_measures_209, _cthread_209, 1) ||
    perm(MustTerminate(_cthread_209)) == none &&
    ((forperm _r_63: Ref [MustInvokeBounded(_r_63)] :: false) &&
    ((forperm _r_63: Ref [MustInvokeUnbounded(_r_63)] :: false) &&
    ((forperm _r_63: Ref [_r_63.MustReleaseBounded] :: false) &&
    (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <=
      _current_wait_level_209) &&
    ((forperm
      _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <=
      _current_wait_level_209) &&
    _residue_209 <= _current_wait_level_209),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(ival(), Place())))
  ensures tuple___getitem__(_res, 0) ==
    old(get__B_m5i_init_get_M2__w_5(t_pre_5, v_26)) &&
    (tuple___getitem__(_res, 1) ==
    old(get__B_m5i_init_get_M2__t_post_5(t_pre_5, v_26)) &&
    [acc(MustInvokeUnbounded(old(get__B_m5i_init_get_M2__t_post_5(t_pre_5, v_26))), write),
    (perm(MustInvokeUnbounded(old(get__B_m5i_init_get_M2__t_post_5(t_pre_5,
    v_26)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__B_m5i_init_get_M2__t_post_5(t_pre_5,
      v_26))), write) :
      acc(MustInvokeCredit(old(get__B_m5i_init_get_M2__t_post_5(t_pre_5, v_26))), write))])
{
  var _cwl_209: Perm
  _res := null
  inhale false
}

method m5r_resp_start(_cthread_210: Ref, _caller_measures_210: Seq[Measure$],
  _residue_210: Perm, t_pre_6: Ref, v_27: Ref)
  returns (_current_wait_level_210: Perm, _res: Ref)
  requires _cthread_210 != null
  requires issubtype(typeof(_cthread_210), Thread_0())
  requires issubtype(typeof(t_pre_6), Place())
  requires issubtype(typeof(v_27), rval())
  requires [acc(MustTerminate(_cthread_210), write), true]
  requires [acc(MustInvokeBounded(t_pre_6), write),
    (perm(MustInvokeBounded(t_pre_6)) > none &&
    Measure$check(_caller_measures_210, t_pre_6, 1) ?
      acc(MustInvokeBounded(t_pre_6), write) :
      (perm(MustInvokeUnbounded(t_pre_6)) > none ?
        acc(MustInvokeUnbounded(t_pre_6), write) :
        acc(MustInvokeCredit(t_pre_6), write)))] &&
    acc(B_m5r_resp_start(t_pre_6, v_27), write)
  requires [true,
    Measure$check(_caller_measures_210, _cthread_210, 1) ||
    perm(MustTerminate(_cthread_210)) == none &&
    ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) &&
    ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) &&
    ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) &&
    (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <=
      _current_wait_level_210) &&
    ((forperm
      _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <=
      _current_wait_level_210) &&
    _residue_210 <= _current_wait_level_210),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(rval(), Place())))
  ensures tuple___getitem__(_res, 0) ==
    old(get__B_m5r_resp_start__w_7(t_pre_6, v_27)) &&
    (tuple___getitem__(_res, 1) ==
    old(get__B_m5r_resp_start__t_post_7(t_pre_6, v_27)) &&
    [acc(MustInvokeUnbounded(old(get__B_m5r_resp_start__t_post_7(t_pre_6, v_27))), write),
    (perm(MustInvokeUnbounded(old(get__B_m5r_resp_start__t_post_7(t_pre_6, v_27)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__B_m5r_resp_start__t_post_7(t_pre_6, v_27))), write) :
      acc(MustInvokeCredit(old(get__B_m5r_resp_start__t_post_7(t_pre_6, v_27))), write))])
{
  var _cwl_210: Perm
  _res := null
  inhale false
}

method m5r_resp_get_M1(_cthread_211: Ref, _caller_measures_211: Seq[Measure$],
  _residue_211: Perm, t_pre_7: Ref, v_28: Ref)
  returns (_current_wait_level_211: Perm, _res: Ref)
  requires _cthread_211 != null
  requires issubtype(typeof(_cthread_211), Thread_0())
  requires issubtype(typeof(t_pre_7), Place())
  requires issubtype(typeof(v_28), rval())
  requires [acc(MustTerminate(_cthread_211), write), true]
  requires [acc(MustInvokeBounded(t_pre_7), write),
    (perm(MustInvokeBounded(t_pre_7)) > none &&
    Measure$check(_caller_measures_211, t_pre_7, 1) ?
      acc(MustInvokeBounded(t_pre_7), write) :
      (perm(MustInvokeUnbounded(t_pre_7)) > none ?
        acc(MustInvokeUnbounded(t_pre_7), write) :
        acc(MustInvokeCredit(t_pre_7), write)))] &&
    acc(B_m5r_resp_get_M1(t_pre_7, v_28), write)
  requires [true,
    Measure$check(_caller_measures_211, _cthread_211, 1) ||
    perm(MustTerminate(_cthread_211)) == none &&
    ((forperm _r_67: Ref [MustInvokeBounded(_r_67)] :: false) &&
    ((forperm _r_67: Ref [MustInvokeUnbounded(_r_67)] :: false) &&
    ((forperm _r_67: Ref [_r_67.MustReleaseBounded] :: false) &&
    (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_66: Ref [_r_66.MustReleaseBounded] :: Level(_r_66) <=
      _current_wait_level_211) &&
    ((forperm
      _r_66: Ref [_r_66.MustReleaseUnbounded] :: Level(_r_66) <=
      _current_wait_level_211) &&
    _residue_211 <= _current_wait_level_211),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(rval(), Place())))
  ensures tuple___getitem__(_res, 0) ==
    old(get__B_m5r_resp_get_M1__w_8(t_pre_7, v_28)) &&
    (tuple___getitem__(_res, 1) ==
    old(get__B_m5r_resp_get_M1__t_post_8(t_pre_7, v_28)) &&
    [acc(MustInvokeUnbounded(old(get__B_m5r_resp_get_M1__t_post_8(t_pre_7, v_28))), write),
    (perm(MustInvokeUnbounded(old(get__B_m5r_resp_get_M1__t_post_8(t_pre_7,
    v_28)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__B_m5r_resp_get_M1__t_post_8(t_pre_7,
      v_28))), write) :
      acc(MustInvokeCredit(old(get__B_m5r_resp_get_M1__t_post_8(t_pre_7, v_28))), write))])
{
  var _cwl_211: Perm
  _res := null
  inhale false
}

method m5r_resp_put_M2(_cthread_212: Ref, _caller_measures_212: Seq[Measure$],
  _residue_212: Perm, t_pre_8: Ref, v_29: Ref)
  returns (_current_wait_level_212: Perm, _res: Ref)
  requires _cthread_212 != null
  requires issubtype(typeof(_cthread_212), Thread_0())
  requires issubtype(typeof(t_pre_8), Place())
  requires issubtype(typeof(v_29), rval())
  requires [acc(MustTerminate(_cthread_212), write), true]
  requires [acc(MustInvokeBounded(t_pre_8), write),
    (perm(MustInvokeBounded(t_pre_8)) > none &&
    Measure$check(_caller_measures_212, t_pre_8, 1) ?
      acc(MustInvokeBounded(t_pre_8), write) :
      (perm(MustInvokeUnbounded(t_pre_8)) > none ?
        acc(MustInvokeUnbounded(t_pre_8), write) :
        acc(MustInvokeCredit(t_pre_8), write)))] &&
    acc(B_m5r_resp_put_M2(t_pre_8, v_29), write)
  requires [true,
    Measure$check(_caller_measures_212, _cthread_212, 1) ||
    perm(MustTerminate(_cthread_212)) == none &&
    ((forperm _r_69: Ref [MustInvokeBounded(_r_69)] :: false) &&
    ((forperm _r_69: Ref [MustInvokeUnbounded(_r_69)] :: false) &&
    ((forperm _r_69: Ref [_r_69.MustReleaseBounded] :: false) &&
    (forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_68: Ref [_r_68.MustReleaseBounded] :: Level(_r_68) <=
      _current_wait_level_212) &&
    ((forperm
      _r_68: Ref [_r_68.MustReleaseUnbounded] :: Level(_r_68) <=
      _current_wait_level_212) &&
    _residue_212 <= _current_wait_level_212),
    true]
  ensures issubtype(typeof(_res), tuple(Seq(rval(), Place())))
  ensures tuple___getitem__(_res, 0) ==
    old(get__B_m5r_resp_put_M2__w_9(t_pre_8, v_29)) &&
    (tuple___getitem__(_res, 1) ==
    old(get__B_m5r_resp_put_M2__t_post_9(t_pre_8, v_29)) &&
    [acc(MustInvokeUnbounded(old(get__B_m5r_resp_put_M2__t_post_9(t_pre_8, v_29))), write),
    (perm(MustInvokeUnbounded(old(get__B_m5r_resp_put_M2__t_post_9(t_pre_8,
    v_29)))) >
    none ?
      acc(MustInvokeUnbounded(old(get__B_m5r_resp_put_M2__t_post_9(t_pre_8,
      v_29))), write) :
      acc(MustInvokeCredit(old(get__B_m5r_resp_put_M2__t_post_9(t_pre_8, v_29))), write))])
{
  var _cwl_212: Perm
  _res := null
  inhale false
}

method main(_cthread_213: Ref, _caller_measures_213: Seq[Measure$], _residue_213: Perm)
  returns (_current_wait_level_213: Perm)
  requires _cthread_213 != null
  requires issubtype(typeof(_cthread_213), Thread_0())
  requires [true,
    perm(MustTerminate(_cthread_213)) == none &&
    ((forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) &&
    ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) &&
    ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) &&
    (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_70: Ref [_r_70.MustReleaseBounded] :: Level(_r_70) <=
      _current_wait_level_213) &&
    ((forperm
      _r_70: Ref [_r_70.MustReleaseUnbounded] :: Level(_r_70) <=
      _current_wait_level_213) &&
    _residue_213 <= _current_wait_level_213),
    true]
  ensures [true,
    (forperm _r_71: Ref [MustInvokeBounded(_r_71)] :: false) &&
    ((forperm _r_71: Ref [MustInvokeUnbounded(_r_71)] :: false) &&
    ((forperm _r_71: Ref [_r_71.MustReleaseBounded] :: false) &&
    (forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: false)))]
{
  var new_set: Set[_Name]
  var new_set_0: Set[_Name]
  var new_set_1: Set[_Name]
  var new_set_2: Set[_Name]
  var new_set_3: Set[_Name]
  var new_set_4: Set[_Name]
  var new_set_5: Set[_Name]
  var new_set_6: Set[_Name]
  var new_set_7: Set[_Name]
  var new_set_8: Set[_Name]
  var new_set_9: Set[_Name]
  var new_set_10: Set[_Name]
  var new_set_11: Set[_Name]
  var new_set_12: Set[_Name]
  var new_set_13: Set[_Name]
  var new_set_14: Set[_Name]
  var new_set_15: Set[_Name]
  var new_set_16: Set[_Name]
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var module_defined_2: Bool
  var module_names_2: Set[_Name]
  var module_defined_3: Bool
  var module_names_3: Set[_Name]
  var module_defined_4: Bool
  var module_names_4: Set[_Name]
  var module_defined_5: Bool
  var module_names_5: Set[_Name]
  var module_defined_6: Bool
  var module_names_6: Set[_Name]
  var module_defined_7: Bool
  var module_names_7: Set[_Name]
  var module_defined_8: Bool
  var module_names_8: Set[_Name]
  var module_defined_9: Bool
  var module_names_9: Set[_Name]
  var module_defined_10: Bool
  var module_names_10: Set[_Name]
  var module_defined_11: Bool
  var module_names_11: Set[_Name]
  var module_defined_12: Bool
  var module_names_12: Set[_Name]
  var module_defined_13: Bool
  var module_names_13: Set[_Name]
  var _cwl_213: Perm
  var _method_measures_213: Seq[Measure$]
  _method_measures_213 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union
    Set(_single(6872323072689856351)))
  inhale acc(__file__()._val, 99 / 100) &&
    issubtype(typeof(__file__()._val), str()) &&
    issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union
    Set(_single(6872323076851130207)))
  inhale acc(__name__()._val, 99 / 100) &&
    issubtype(typeof(__name__()._val), str()) &&
    issubtype(typeof(__name__()._val), str()) &&
    str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___0()._val, 99 / 100) &&
    issubtype(typeof(__file___0()._val), str()) &&
    issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___0()._val, 99 / 100) &&
    issubtype(typeof(__name___0()._val), str()) &&
    issubtype(typeof(__name___0()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___0()._val)
  module_defined_2 := false
  module_names_2 := Set[_Name]()
  module_names_2 := (module_names_2 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___1()._val, 99 / 100) &&
    issubtype(typeof(__file___1()._val), str()) &&
    issubtype(typeof(__file___1()._val), str())
  module_names_2 := (module_names_2 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___1()._val, 99 / 100) &&
    issubtype(typeof(__name___1()._val), str()) &&
    issubtype(typeof(__name___1()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___1()._val)
  module_defined_3 := false
  module_names_3 := Set[_Name]()
  module_names_3 := (module_names_3 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___2()._val, 99 / 100) &&
    issubtype(typeof(__file___2()._val), str()) &&
    issubtype(typeof(__file___2()._val), str())
  module_names_3 := (module_names_3 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___2()._val, 99 / 100) &&
    issubtype(typeof(__name___2()._val), str()) &&
    issubtype(typeof(__name___2()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___2()._val)
  module_defined_4 := false
  module_names_4 := Set[_Name]()
  module_names_4 := (module_names_4 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___3()._val, 99 / 100) &&
    issubtype(typeof(__file___3()._val), str()) &&
    issubtype(typeof(__file___3()._val), str())
  module_names_4 := (module_names_4 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___3()._val, 99 / 100) &&
    issubtype(typeof(__name___3()._val), str()) &&
    issubtype(typeof(__name___3()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___3()._val)
  module_defined_5 := false
  module_names_5 := Set[_Name]()
  module_names_5 := (module_names_5 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___4()._val, 99 / 100) &&
    issubtype(typeof(__file___4()._val), str()) &&
    issubtype(typeof(__file___4()._val), str())
  module_names_5 := (module_names_5 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___4()._val, 99 / 100) &&
    issubtype(typeof(__name___4()._val), str()) &&
    issubtype(typeof(__name___4()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___4()._val)
  inhale acc(NONCE_MAKER_CREATED()._val, write) &&
    issubtype(typeof(NONCE_MAKER_CREATED()._val), bool())
  module_defined_6 := false
  module_names_6 := Set[_Name]()
  module_names_6 := (module_names_6 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___5()._val, 99 / 100) &&
    issubtype(typeof(__file___5()._val), str()) &&
    issubtype(typeof(__file___5()._val), str())
  module_names_6 := (module_names_6 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___5()._val, 99 / 100) &&
    issubtype(typeof(__name___5()._val), str()) &&
    issubtype(typeof(__name___5()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___5()._val)
  module_defined_7 := false
  module_names_7 := Set[_Name]()
  module_names_7 := (module_names_7 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___6()._val, 99 / 100) &&
    issubtype(typeof(__file___6()._val), str()) &&
    issubtype(typeof(__file___6()._val), str())
  module_names_7 := (module_names_7 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___6()._val, 99 / 100) &&
    issubtype(typeof(__name___6()._val), str()) &&
    issubtype(typeof(__name___6()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___6()._val)
  module_defined_8 := false
  module_names_8 := Set[_Name]()
  module_names_8 := (module_names_8 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___7()._val, 99 / 100) &&
    issubtype(typeof(__file___7()._val), str()) &&
    issubtype(typeof(__file___7()._val), str())
  module_names_8 := (module_names_8 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___7()._val, 99 / 100) &&
    issubtype(typeof(__name___7()._val), str()) &&
    issubtype(typeof(__name___7()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___7()._val)
  module_defined_9 := false
  module_names_9 := Set[_Name]()
  module_names_9 := (module_names_9 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___8()._val, 99 / 100) &&
    issubtype(typeof(__file___8()._val), str()) &&
    issubtype(typeof(__file___8()._val), str())
  module_names_9 := (module_names_9 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___8()._val, 99 / 100) &&
    issubtype(typeof(__name___8()._val), str()) &&
    issubtype(typeof(__name___8()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___8()._val)
  module_defined_10 := false
  module_names_10 := Set[_Name]()
  module_names_10 := (module_names_10 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___9()._val, 99 / 100) &&
    issubtype(typeof(__file___9()._val), str()) &&
    issubtype(typeof(__file___9()._val), str())
  module_names_10 := (module_names_10 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___9()._val, 99 / 100) &&
    issubtype(typeof(__name___9()._val), str()) &&
    issubtype(typeof(__name___9()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___9()._val)
  module_defined_11 := false
  module_names_11 := Set[_Name]()
  module_names_11 := (module_names_11 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___10()._val, 99 / 100) &&
    issubtype(typeof(__file___10()._val), str()) &&
    issubtype(typeof(__file___10()._val), str())
  module_names_11 := (module_names_11 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___10()._val, 99 / 100) &&
    issubtype(typeof(__name___10()._val), str()) &&
    issubtype(typeof(__name___10()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___10()._val)
  module_defined_12 := false
  module_names_12 := Set[_Name]()
  module_names_12 := (module_names_12 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___11()._val, 99 / 100) &&
    issubtype(typeof(__file___11()._val), str()) &&
    issubtype(typeof(__file___11()._val), str())
  module_names_12 := (module_names_12 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___11()._val, 99 / 100) &&
    issubtype(typeof(__name___11()._val), str()) &&
    issubtype(typeof(__name___11()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___11()._val)
  module_defined_13 := false
  module_names_13 := Set[_Name]()
  module_names_13 := (module_names_13 union
    Set(_single(6872323072689856351)))
  inhale acc(__file___12()._val, 99 / 100) &&
    issubtype(typeof(__file___12()._val), str()) &&
    issubtype(typeof(__file___12()._val), str())
  module_names_13 := (module_names_13 union
    Set(_single(6872323076851130207)))
  inhale acc(__name___12()._val, 99 / 100) &&
    issubtype(typeof(__name___12()._val), str()) &&
    issubtype(typeof(__name___12()._val), str()) &&
    !str___eq__(str___create__(8, 6872332955275845471), __name___12()._val)
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(1953718627)))
    module_names_1 := (module_names_1 union
      Set(_single(7809644653626814543)))
    module_names_1 := (module_names_1 union Set(_single(435611006292)))
    module_names_1 := (module_names_1 union
      Set(_single(133507968131445240481402697)))
    module_names_1 := (module_names_1 union Set(_single(435459026000)))
    module_names_1 := (module_names_1 union
      Set(_single(544943652786834091697492)))
    module_names_1 := (module_names_1 union
      Set(_single(930656604993964298057)))
    module_names_1 := (module_names_1 union Set(_single(474147942260)))
    module_names_1 := (module_names_1 union
      Set(_single(8038062462289584464661321053517)))
    if (!module_defined_2) {
      module_defined_2 := true
      module_names_2 := (module_names_2 union
        Set(_single(478959366605689496363342)))
      module_names_2 := (module_names_2 union
        Set(_single(7809644653626814543)))
      if (!module_defined_3) {
        module_defined_3 := true
        module_names_3 := (module_names_3 union Set(_single(5522497)))
      }
      assert (_single(5522497) in module_names_3)
      module_names_2 := (module_names_2 union Set(_single(5522497)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(521392583788)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(324041533555)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(323940939120)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(324109169264)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1701605234)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1953066569)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1886610770)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1987208531)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(7309475735945898357)))
      assert true && (_single(7309475735945898357) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(6580597)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(1871225753256683991622)))
      assert true && (_single(1871225753256683991622) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(448612627046)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(7955819)))
      assert true && (_single(7955819) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1265853811)))
      assert true && (_single(7955819) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(4945004)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1836020833)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1952924001)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1852788321)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(2036681569)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1836404321)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1818326642)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(32767019898074738)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(128017026217586)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(340533409394)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2262173169928120975082305025828642414348428658)))
      assert true &&
        (_single(2262173169928120975082305025828642414348428658) in
        module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2057743997646653667358856336074098)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1818326633)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(32767019898074729)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(211751499369)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(216046466665)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(340533409385)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2262173169928120975082305025828642414414884457)))
      assert true &&
        (_single(2262173169928120975082305025828642414414884457) in
        module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2057743997646653667358856402529897)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(6779757)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1802401098)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(500068345665)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(435459878734)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(7955787)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1752392008)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(491394256973)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(500103213635)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(418364025953)))
    }
    assert (_single(32767019898074729) in module_names_2)
    module_names_1 := (module_names_1 union
      Set(_single(32767019898074729)))
    assert (_single(1818326633) in module_names_2)
    module_names_1 := (module_names_1 union Set(_single(1818326633)))
    assert (_single(340533409385) in module_names_2)
    module_names_1 := (module_names_1 union Set(_single(340533409385)))
    assert (_single(32767019898074738) in module_names_2)
    module_names_1 := (module_names_1 union
      Set(_single(32767019898074738)))
    assert (_single(1818326642) in module_names_2)
    module_names_1 := (module_names_1 union Set(_single(1818326642)))
    assert (_single(340533409394) in module_names_2)
    module_names_1 := (module_names_1 union Set(_single(340533409394)))
    inhale AF_INET() == __prim__int___box__(2)
    module_names_1 := (module_names_1 union
      Set(_single(23720100584441409)))
    inhale SOCK_DGRAM() == __prim__int___box__(2)
    module_names_1 := (module_names_1 union
      Set(_single(364827186328364334141267)))
    module_names_1 := (module_names_1 union
      Set(_single(7236833197425706069)))
    module_names_1 := (module_names_1 union
      Set(_single(122660691239978466708309077)))
    module_names_1 := (module_names_1 union
      Set(_single(1852629298541551961173)))
    module_names_1 := (module_names_1 union
      Set(_single(31401136957434487477898331221)))
    module_names_1 := (module_names_1 union
      Set(_single(32780218601924980)))
    module_names_1 := (module_names_1 union
      Set(_single(6872339552563453791)))
    module_names_1 := (module_names_1 union
      Set(_single(549960808011713412883827)))
    module_names_1 := (module_names_1 union
      Set(_single(549960808011713412883815)))
    module_names_1 := (module_names_1 union
      Set(_single(125040764379701301522752883)))
    module_names_1 := (module_names_1 union
      Set(_single(125040764379701301522752871)))
    module_names_1 := (module_names_1 union
      Set(_single(122618043018447984809764199)))
    module_names_1 := (module_names_1 union Set(_single(1684957538)))
    module_names_1 := (module_names_1 union
      Set(_single(32760384594014051)))
    module_names_1 := (module_names_1 union
      Set(_single(122618043020420465669989735)))
    module_names_1 := (module_names_1 union Set(_single(1986225522)))
    module_names_1 := (module_names_1 union
      Set(_single(7885647256947484018)))
    module_names_1 := (module_names_1 union Set(_single(1684956531)))
    module_names_1 := (module_names_1 union Set(_single(127978942197619)))
  }
  inhale (forall _name: _Name ::
      { (_combine(_single(127978942197619), _name) in new_set) }
      (_name in module_names_1) ==
      (_combine(_single(127978942197619), _name) in new_set))
  module_names_0 := (module_names_0 union new_set)
  if (!module_defined_4) {
    module_defined_4 := true
    if (!module_defined_1) {
      module_defined_1 := true
      module_names_1 := (module_names_1 union Set(_single(1953718627)))
      module_names_1 := (module_names_1 union
        Set(_single(7809644653626814543)))
      module_names_1 := (module_names_1 union Set(_single(435611006292)))
      module_names_1 := (module_names_1 union
        Set(_single(133507968131445240481402697)))
      module_names_1 := (module_names_1 union Set(_single(435459026000)))
      module_names_1 := (module_names_1 union
        Set(_single(544943652786834091697492)))
      module_names_1 := (module_names_1 union
        Set(_single(930656604993964298057)))
      module_names_1 := (module_names_1 union Set(_single(474147942260)))
      module_names_1 := (module_names_1 union
        Set(_single(8038062462289584464661321053517)))
      if (!module_defined_2) {
        module_defined_2 := true
        module_names_2 := (module_names_2 union
          Set(_single(478959366605689496363342)))
        module_names_2 := (module_names_2 union
          Set(_single(7809644653626814543)))
        if (!module_defined_3) {
          module_defined_3 := true
          module_names_3 := (module_names_3 union Set(_single(5522497)))
        }
        assert (_single(5522497) in module_names_3)
        module_names_2 := (module_names_2 union Set(_single(5522497)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(521392583788)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324041533555)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(323940939120)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324109169264)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1701605234)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1953066569)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1886610770)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1987208531)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(7309475735945898357)))
        assert true && (_single(7309475735945898357) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6580597)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(1871225753256683991622)))
        assert true && (_single(1871225753256683991622) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(448612627046)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955819)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1265853811)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(4945004)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836020833)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1952924001)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1852788321)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(2036681569)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836404321)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326642)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074738)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(128017026217586)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409394)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414348428658)))
        assert true &&
          (_single(2262173169928120975082305025828642414348428658) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856336074098)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326633)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074729)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(211751499369)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(216046466665)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409385)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414414884457)))
        assert true &&
          (_single(2262173169928120975082305025828642414414884457) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856402529897)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6779757)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1802401098)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500068345665)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(435459878734)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955787)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1752392008)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(491394256973)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500103213635)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(418364025953)))
      }
      assert (_single(32767019898074729) in module_names_2)
      module_names_1 := (module_names_1 union
        Set(_single(32767019898074729)))
      assert (_single(1818326633) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(1818326633)))
      assert (_single(340533409385) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(340533409385)))
      assert (_single(32767019898074738) in module_names_2)
      module_names_1 := (module_names_1 union
        Set(_single(32767019898074738)))
      assert (_single(1818326642) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(1818326642)))
      assert (_single(340533409394) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(340533409394)))
      inhale AF_INET() == __prim__int___box__(2)
      module_names_1 := (module_names_1 union
        Set(_single(23720100584441409)))
      inhale SOCK_DGRAM() == __prim__int___box__(2)
      module_names_1 := (module_names_1 union
        Set(_single(364827186328364334141267)))
      module_names_1 := (module_names_1 union
        Set(_single(7236833197425706069)))
      module_names_1 := (module_names_1 union
        Set(_single(122660691239978466708309077)))
      module_names_1 := (module_names_1 union
        Set(_single(1852629298541551961173)))
      module_names_1 := (module_names_1 union
        Set(_single(31401136957434487477898331221)))
      module_names_1 := (module_names_1 union
        Set(_single(32780218601924980)))
      module_names_1 := (module_names_1 union
        Set(_single(6872339552563453791)))
      module_names_1 := (module_names_1 union
        Set(_single(549960808011713412883827)))
      module_names_1 := (module_names_1 union
        Set(_single(549960808011713412883815)))
      module_names_1 := (module_names_1 union
        Set(_single(125040764379701301522752883)))
      module_names_1 := (module_names_1 union
        Set(_single(125040764379701301522752871)))
      module_names_1 := (module_names_1 union
        Set(_single(122618043018447984809764199)))
      module_names_1 := (module_names_1 union Set(_single(1684957538)))
      module_names_1 := (module_names_1 union
        Set(_single(32760384594014051)))
      module_names_1 := (module_names_1 union
        Set(_single(122618043020420465669989735)))
      module_names_1 := (module_names_1 union Set(_single(1986225522)))
      module_names_1 := (module_names_1 union
        Set(_single(7885647256947484018)))
      module_names_1 := (module_names_1 union Set(_single(1684956531)))
      module_names_1 := (module_names_1 union
        Set(_single(127978942197619)))
    }
    inhale (forall _name: _Name ::
        { (_combine(_single(127978942197619), _name) in new_set_1) }
        (_name in module_names_1) ==
        (_combine(_single(127978942197619), _name) in new_set_1))
    module_names_4 := (module_names_4 union new_set_1)
    module_names_4 := (module_names_4 union Set(_single(435611006292)))
    module_names_4 := (module_names_4 union
      Set(_single(133507968131445240481402697)))
    module_names_4 := (module_names_4 union Set(_single(435459026000)))
    module_names_4 := (module_names_4 union
      Set(_single(544943652786834091697492)))
    module_names_4 := (module_names_4 union
      Set(_single(930656604993964298057)))
    module_names_4 := (module_names_4 union Set(_single(474147942260)))
    module_names_4 := (module_names_4 union
      Set(_single(8038062462289584464661321053517)))
    if (!module_defined_2) {
      module_defined_2 := true
      module_names_2 := (module_names_2 union
        Set(_single(478959366605689496363342)))
      module_names_2 := (module_names_2 union
        Set(_single(7809644653626814543)))
      if (!module_defined_3) {
        module_defined_3 := true
        module_names_3 := (module_names_3 union Set(_single(5522497)))
      }
      assert (_single(5522497) in module_names_3)
      module_names_2 := (module_names_2 union Set(_single(5522497)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(521392583788)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(324041533555)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(323940939120)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(324109169264)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1701605234)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1953066569)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1886610770)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1987208531)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(7309475735945898357)))
      assert true && (_single(7309475735945898357) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(6580597)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(1871225753256683991622)))
      assert true && (_single(1871225753256683991622) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(448612627046)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(7955819)))
      assert true && (_single(7955819) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1265853811)))
      assert true && (_single(7955819) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(4945004)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1836020833)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1952924001)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1852788321)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(2036681569)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1836404321)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1818326642)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(32767019898074738)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(128017026217586)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(340533409394)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2262173169928120975082305025828642414348428658)))
      assert true &&
        (_single(2262173169928120975082305025828642414348428658) in
        module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2057743997646653667358856336074098)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1818326633)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(32767019898074729)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(211751499369)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(216046466665)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(340533409385)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2262173169928120975082305025828642414414884457)))
      assert true &&
        (_single(2262173169928120975082305025828642414414884457) in
        module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2057743997646653667358856402529897)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(6779757)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1802401098)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(500068345665)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(435459878734)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(7955787)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1752392008)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(491394256973)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(500103213635)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(418364025953)))
    }
    assert (_single(32767019898074729) in module_names_2)
    module_names_4 := (module_names_4 union
      Set(_single(32767019898074729)))
    assert (_single(1818326633) in module_names_2)
    module_names_4 := (module_names_4 union Set(_single(1818326633)))
    assert (_single(340533409385) in module_names_2)
    module_names_4 := (module_names_4 union Set(_single(340533409385)))
    assert (_single(32767019898074738) in module_names_2)
    module_names_4 := (module_names_4 union
      Set(_single(32767019898074738)))
    assert (_single(1818326642) in module_names_2)
    module_names_4 := (module_names_4 union Set(_single(1818326642)))
    assert (_single(340533409394) in module_names_2)
    module_names_4 := (module_names_4 union Set(_single(340533409394)))
    if (!module_defined_5) {
      module_defined_5 := true
      if (!module_defined_7) {
        module_defined_7 := true
        module_names_7 := (module_names_7 union
          Set(_single(38940328376053817855040461321972507500866)))
      }
      inhale (forall _name: _Name ::
          { (_combine(_single(1818452334), _combine(_single(545109315453954101049445),
          _name)) in
          new_set_2) }
          (_name in module_names_7) ==
          (_combine(_single(1818452334), _combine(_single(545109315453954101049445),
          _name)) in
          new_set_2))
      module_names_5 := (module_names_5 union new_set_2)
      if (!module_defined_8) {
        module_defined_8 := true
        module_names_8 := (module_names_8 union
          Set(_single(37578771102893684825896415043)))
        module_names_8 := (module_names_8 union
          Set(_single(32481164592901701)))
        module_names_8 := (module_names_8 union Set(_single(1701999952)))
        module_names_8 := (module_names_8 union
          Set(_single(128009175786834)))
        module_names_8 := (module_names_8 union
          Set(_single(153388003874551132815899425385464424551)))
        inhale SecretBox_NONCE_SIZE(SecretBox()) ==
          _asserting(_asserting(ghost_noncebytes(), true), true &&
          (_single(153388003874551132815899425385464424551) in
          module_names_8))
        module_names_8 := (module_names_8 union
          Set(_single(327508777956178301701966)))
        module_names_8 := (module_names_8 union
          Set(_single(2221626387110878733651)))
      }
      inhale (forall _name: _Name ::
          { (_combine(_single(1818452334), _combine(_single(127979059635571),
          _name)) in
          new_set_3) }
          (_name in module_names_8) ==
          (_combine(_single(1818452334), _combine(_single(127979059635571),
          _name)) in
          new_set_3))
      module_names_5 := (module_names_5 union new_set_3)
      if (!module_defined_9) {
        module_defined_9 := true
        if (!module_defined_10) {
          module_defined_10 := true
          module_names_10 := (module_names_10 union
            Set(_single(32199629384937029)))
          assert true && (_single(32199629384937029) in module_names_10)
          module_names_10 := (module_names_10 union
            Set(_single(540220137311035689754962)))
          assert true && (_single(32199629384937029) in module_names_10)
          module_names_10 := (module_names_10 union
            Set(_single(540220137311035689821512)))
        }
        inhale (forall _name: _Name ::
            { (_combine(_single(1818452334), _combine(_single(7453010313431182949),
            _name)) in
            new_set_5) }
            (_name in module_names_10) ==
            (_combine(_single(1818452334), _combine(_single(7453010313431182949),
            _name)) in
            new_set_5))
        module_names_9 := (module_names_9 union new_set_5)
        module_names_9 := (module_names_9 union Set(_single(6513473)))
        module_names_9 := (module_names_9 union
          Set(_single(37578771102893684825896415043)))
        module_names_9 := (module_names_9 union
          Set(_single(32481164592901701)))
        module_names_9 := (module_names_9 union
          Set(_single(1871507244730112373328)))
        module_names_9 := (module_names_9 union Set(_single(1701999952)))
        module_names_9 := (module_names_9 union
          Set(_single(8315178084276987218)))
        module_names_9 := (module_names_9 union
          Set(_single(8038062462289584464661321053517)))
        module_names_9 := (module_names_9 union Set(_single(1701869908)))
        module_names_9 := (module_names_9 union
          Set(_single(474107079729983096055911)))
        module_names_9 := (module_names_9 union
          Set(_single(6872339552563453791)))
        module_names_9 := (module_names_9 union Set(_single(1852270963)))
        module_names_9 := (module_names_9 union
          Set(_single(573274899011546284255571)))
        module_names_9 := (module_names_9 union
          Set(_single(2239364072692952033383)))
        module_names_9 := (module_names_9 union
          Set(_single(6872339552563453791)))
        module_names_9 := (module_names_9 union
          Set(_single(133480762729846)))
        module_names_9 := (module_names_9 union
          Set(_single(2239355094020702496086)))
      }
      inhale (forall _name: _Name ::
          { (_combine(_single(1818452334), _combine(_single(29113321704089971),
          _name)) in
          new_set_4) }
          (_name in module_names_9) ==
          (_combine(_single(1818452334), _combine(_single(29113321704089971),
          _name)) in
          new_set_4))
      module_names_5 := (module_names_5 union new_set_4)
      if (!module_defined_11) {
        module_defined_11 := true
        module_names_11 := (module_names_11 union
          Set(_single(120325193752946)))
      }
      inhale (forall _name: _Name ::
          { (_combine(_single(1818452334), _combine(_single(495740089461), _name)) in
          new_set_6) }
          (_name in module_names_11) ==
          (_combine(_single(1818452334), _combine(_single(495740089461), _name)) in
          new_set_6))
      module_names_5 := (module_names_5 union new_set_6)
      if (!module_defined_12) {
        module_defined_12 := true
        if (!module_defined_2) {
          module_defined_2 := true
          module_names_2 := (module_names_2 union
            Set(_single(478959366605689496363342)))
          module_names_2 := (module_names_2 union
            Set(_single(7809644653626814543)))
          if (!module_defined_3) {
            module_defined_3 := true
            module_names_3 := (module_names_3 union Set(_single(5522497)))
          }
          assert (_single(5522497) in module_names_3)
          module_names_2 := (module_names_2 union Set(_single(5522497)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(521392583788)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(324041533555)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(323940939120)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(324109169264)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1701605234)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1953066569)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1886610770)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1987208531)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(7309475735945898357)))
          assert true && (_single(7309475735945898357) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(6580597)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(1871225753256683991622)))
          assert true &&
            (_single(1871225753256683991622) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(448612627046)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(7955819)))
          assert true && (_single(7955819) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1265853811)))
          assert true && (_single(7955819) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(4945004)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1836020833)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1952924001)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1852788321)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(2036681569)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1836404321)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1818326642)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(32767019898074738)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(128017026217586)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(340533409394)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2262173169928120975082305025828642414348428658)))
          assert true &&
            (_single(2262173169928120975082305025828642414348428658) in
            module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2057743997646653667358856336074098)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1818326633)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(32767019898074729)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(211751499369)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(216046466665)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(340533409385)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2262173169928120975082305025828642414414884457)))
          assert true &&
            (_single(2262173169928120975082305025828642414414884457) in
            module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2057743997646653667358856402529897)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(6779757)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1802401098)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(500068345665)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(435459878734)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(7955787)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1752392008)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(491394256973)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(500103213635)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(418364025953)))
        }
        module_names_12 := (module_names_12 union module_names_2)
        if (!module_defined_13) {
          module_defined_13 := true
          module_names_13 := (module_names_13 union
            Set(_single(478959366605689496363342)))
          module_names_13 := (module_names_13 union
            Set(_single(7809644653626814543)))
          module_names_13 := (module_names_13 union
            Set(_single(435611006292)))
          module_names_13 := (module_names_13 union
            Set(_single(8038062462289584464661321053517)))
          if (!module_defined_2) {
            module_defined_2 := true
            module_names_2 := (module_names_2 union
              Set(_single(478959366605689496363342)))
            module_names_2 := (module_names_2 union
              Set(_single(7809644653626814543)))
            if (!module_defined_3) {
              module_defined_3 := true
              module_names_3 := (module_names_3 union
                Set(_single(5522497)))
            }
            assert (_single(5522497) in module_names_3)
            module_names_2 := (module_names_2 union Set(_single(5522497)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(521392583788)))
            assert true && (_single(521392583788) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(324041533555)))
            assert true && (_single(521392583788) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(323940939120)))
            assert true && (_single(521392583788) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(324109169264)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1701605234)))
            assert true && (_single(1701605234) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1953066569)))
            assert true && (_single(1701605234) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1886610770)))
            assert true && (_single(1701605234) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1987208531)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(7309475735945898357)))
            assert true && (_single(7309475735945898357) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(6580597)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1871225753256683991622)))
            assert true &&
              (_single(1871225753256683991622) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(448612627046)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(7955819)))
            assert true && (_single(7955819) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1265853811)))
            assert true && (_single(7955819) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(4945004)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1836020833)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1952924001)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1852788321)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2036681569)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1836404321)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1818326642)))
            assert true && (_single(1818326642) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(32767019898074738)))
            assert true && (_single(1818326642) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(128017026217586)))
            assert true && (_single(1818326642) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(340533409394)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2262173169928120975082305025828642414348428658)))
            assert true &&
              (_single(2262173169928120975082305025828642414348428658) in
              module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2057743997646653667358856336074098)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1818326633)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(32767019898074729)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(211751499369)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(216046466665)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(340533409385)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2262173169928120975082305025828642414414884457)))
            assert true &&
              (_single(2262173169928120975082305025828642414414884457) in
              module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2057743997646653667358856402529897)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(6779757)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1802401098)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(500068345665)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(435459878734)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(7955787)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1752392008)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(491394256973)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(500103213635)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(418364025953)))
          }
          assert (_single(1818326633) in module_names_2)
          module_names_13 := (module_names_13 union
            Set(_single(1818326633)))
          assert (_single(1818326642) in module_names_2)
          module_names_13 := (module_names_13 union
            Set(_single(1818326642)))
          module_names_13 := (module_names_13 union
            Set(_single(154784345972827791294882587724017917762)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(2361821685376400624006387141784941)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(42800665781447379162461437097251359834437091366352237)))
          module_names_13 := (module_names_13 union
            Set(_single(16776682165066970797098586154484615700290)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(255991854325362713578774813148263789)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(10956970440050529065241493399765352271449035094637491565)))
          module_names_13 := (module_names_13 union
            Set(_single(17116964530717473295245339254801157676866)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(261184151164512226795125415875261805)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(10956970440050529065246685696604501784665385697364489581)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(167190100708778824853518807536910453582455290541421)))
          assert true && (_single(1818326633) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(167190100708778824852096104951484096784397117240685)))
          module_names_13 := (module_names_13 union
            Set(_single(530849696846229619433282)))
          module_names_13 := (module_names_13 union
            Set(_single(154784345972827772589238111949636329282)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(2361821685376400338580903807825261)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(42800665781447379162461437097251359549011608032392557)))
          module_names_13 := (module_names_13 union
            Set(_single(16776682163796534813076320171595007876930)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(255991854305977398881169436212082029)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(10956970440050529065241493399745966956751429717701309805)))
          module_names_13 := (module_names_13 union
            Set(_single(17116964531987909241856316286142002323266)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(261184151183897540921879826143524205)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(10956970440050529065246685696623887098792140107632751981)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(167190100708778824853518807536910168156971956581741)))
          assert true && (_single(1818326642) in module_names_13)
          module_names_13 := (module_names_13 union
            Set(_single(167190100708778824852096104951483811358913783281005)))
          module_names_13 := (module_names_13 union
            Set(_single(530849696846268274138946)))
        }
        module_names_12 := (module_names_12 union module_names_13)
        if (!module_defined_1) {
          module_defined_1 := true
          module_names_1 := (module_names_1 union Set(_single(1953718627)))
          module_names_1 := (module_names_1 union
            Set(_single(7809644653626814543)))
          module_names_1 := (module_names_1 union
            Set(_single(435611006292)))
          module_names_1 := (module_names_1 union
            Set(_single(133507968131445240481402697)))
          module_names_1 := (module_names_1 union
            Set(_single(435459026000)))
          module_names_1 := (module_names_1 union
            Set(_single(544943652786834091697492)))
          module_names_1 := (module_names_1 union
            Set(_single(930656604993964298057)))
          module_names_1 := (module_names_1 union
            Set(_single(474147942260)))
          module_names_1 := (module_names_1 union
            Set(_single(8038062462289584464661321053517)))
          if (!module_defined_2) {
            module_defined_2 := true
            module_names_2 := (module_names_2 union
              Set(_single(478959366605689496363342)))
            module_names_2 := (module_names_2 union
              Set(_single(7809644653626814543)))
            if (!module_defined_3) {
              module_defined_3 := true
              module_names_3 := (module_names_3 union
                Set(_single(5522497)))
            }
            assert (_single(5522497) in module_names_3)
            module_names_2 := (module_names_2 union Set(_single(5522497)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(521392583788)))
            assert true && (_single(521392583788) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(324041533555)))
            assert true && (_single(521392583788) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(323940939120)))
            assert true && (_single(521392583788) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(324109169264)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1701605234)))
            assert true && (_single(1701605234) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1953066569)))
            assert true && (_single(1701605234) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1886610770)))
            assert true && (_single(1701605234) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1987208531)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(7309475735945898357)))
            assert true && (_single(7309475735945898357) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(6580597)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1871225753256683991622)))
            assert true &&
              (_single(1871225753256683991622) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(448612627046)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(7955819)))
            assert true && (_single(7955819) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1265853811)))
            assert true && (_single(7955819) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(4945004)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1836020833)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1952924001)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1852788321)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2036681569)))
            assert true && (_single(1836020833) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1836404321)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1818326642)))
            assert true && (_single(1818326642) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(32767019898074738)))
            assert true && (_single(1818326642) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(128017026217586)))
            assert true && (_single(1818326642) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(340533409394)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2262173169928120975082305025828642414348428658)))
            assert true &&
              (_single(2262173169928120975082305025828642414348428658) in
              module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2057743997646653667358856336074098)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1818326633)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(32767019898074729)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(211751499369)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(216046466665)))
            assert true && (_single(1818326633) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(340533409385)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2262173169928120975082305025828642414414884457)))
            assert true &&
              (_single(2262173169928120975082305025828642414414884457) in
              module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(2057743997646653667358856402529897)))
            assert true && (_single(5522497) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(6779757)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1802401098)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(500068345665)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(435459878734)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union Set(_single(7955787)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(1752392008)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(491394256973)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(500103213635)))
            assert true && (_single(6779757) in module_names_2)
            module_names_2 := (module_names_2 union
              Set(_single(418364025953)))
          }
          assert (_single(32767019898074729) in module_names_2)
          module_names_1 := (module_names_1 union
            Set(_single(32767019898074729)))
          assert (_single(1818326633) in module_names_2)
          module_names_1 := (module_names_1 union Set(_single(1818326633)))
          assert (_single(340533409385) in module_names_2)
          module_names_1 := (module_names_1 union
            Set(_single(340533409385)))
          assert (_single(32767019898074738) in module_names_2)
          module_names_1 := (module_names_1 union
            Set(_single(32767019898074738)))
          assert (_single(1818326642) in module_names_2)
          module_names_1 := (module_names_1 union Set(_single(1818326642)))
          assert (_single(340533409394) in module_names_2)
          module_names_1 := (module_names_1 union
            Set(_single(340533409394)))
          inhale AF_INET() == __prim__int___box__(2)
          module_names_1 := (module_names_1 union
            Set(_single(23720100584441409)))
          inhale SOCK_DGRAM() == __prim__int___box__(2)
          module_names_1 := (module_names_1 union
            Set(_single(364827186328364334141267)))
          module_names_1 := (module_names_1 union
            Set(_single(7236833197425706069)))
          module_names_1 := (module_names_1 union
            Set(_single(122660691239978466708309077)))
          module_names_1 := (module_names_1 union
            Set(_single(1852629298541551961173)))
          module_names_1 := (module_names_1 union
            Set(_single(31401136957434487477898331221)))
          module_names_1 := (module_names_1 union
            Set(_single(32780218601924980)))
          module_names_1 := (module_names_1 union
            Set(_single(6872339552563453791)))
          module_names_1 := (module_names_1 union
            Set(_single(549960808011713412883827)))
          module_names_1 := (module_names_1 union
            Set(_single(549960808011713412883815)))
          module_names_1 := (module_names_1 union
            Set(_single(125040764379701301522752883)))
          module_names_1 := (module_names_1 union
            Set(_single(125040764379701301522752871)))
          module_names_1 := (module_names_1 union
            Set(_single(122618043018447984809764199)))
          module_names_1 := (module_names_1 union Set(_single(1684957538)))
          module_names_1 := (module_names_1 union
            Set(_single(32760384594014051)))
          module_names_1 := (module_names_1 union
            Set(_single(122618043020420465669989735)))
          module_names_1 := (module_names_1 union Set(_single(1986225522)))
          module_names_1 := (module_names_1 union
            Set(_single(7885647256947484018)))
          module_names_1 := (module_names_1 union Set(_single(1684956531)))
          module_names_1 := (module_names_1 union
            Set(_single(127978942197619)))
        }
        assert (_single(122660691239978466708309077) in module_names_1)
        module_names_12 := (module_names_12 union
          Set(_single(122660691239978466708309077)))
        assert (_single(7236833197425706069) in module_names_1)
        module_names_12 := (module_names_12 union
          Set(_single(7236833197425706069)))
        assert (_single(31401136957434487477898331221) in module_names_1)
        module_names_12 := (module_names_12 union
          Set(_single(31401136957434487477898331221)))
        assert (_single(1852629298541551961173) in module_names_1)
        module_names_12 := (module_names_12 union
          Set(_single(1852629298541551961173)))
        inhale EMPTY_STORE() == PSeq___create__(Seq[Ref](), atom())
        module_names_12 := (module_names_12 union
          Set(_single(83804578974091706541034821)))
        inhale EMPTY_IBUF() == PSet___create__(Set[Ref](), PSeq(object()))
        module_names_12 := (module_names_12 union
          Set(_single(332138403500857551244613)))
        module_names_12 := (module_names_12 union
          Set(_single(2361821685376400624006387141785197)))
        module_names_12 := (module_names_12 union
          Set(_single(255991854325362713578774813148264045)))
        module_names_12 := (module_names_12 union
          Set(_single(261184151164512226795125415875262061)))
        module_names_12 := (module_names_12 union
          Set(_single(8530773661071259245)))
        module_names_12 := (module_names_12 union
          Set(_single(7236833197427340909)))
        module_names_12 := (module_names_12 union
          Set(_single(2037307439045221715470981660227181)))
        module_names_12 := (module_names_12 union
          Set(_single(2361821685376400338580903807825517)))
        module_names_12 := (module_names_12 union
          Set(_single(255991854305977398881169436212082285)))
        module_names_12 := (module_names_12 union
          Set(_single(261184151183897540921879826143524461)))
        module_names_12 := (module_names_12 union
          Set(_single(9379684834273608741227018204781)))
        module_names_12 := (module_names_12 union
          Set(_single(7956982248847251943168844904045)))
        module_names_12 := (module_names_12 union
          Set(_single(2037307439045221715470981660817005)))
      }
      module_names_5 := (module_names_5 union module_names_12)
      module_names_5 := (module_names_5 union
        Set(_single(8038062462289584464661321053517)))
      module_names_5 := (module_names_5 union Set(_single(1953718627)))
      module_names_5 := (module_names_5 union Set(_single(435611006292)))
      inhale INIT_IN_PORT() == __prim__int___box__(1024)
      module_names_5 := (module_names_5 union
        Set(_single(26096247291760565119514922569)))
      inhale RESP_IN_PORT() == __prim__int___box__(1025)
      module_names_5 := (module_names_5 union
        Set(_single(26096247291760565119448466770)))
      inhale SIGNATURE_SIZE() == __prim__int___box__(64)
      module_names_5 := (module_names_5 union
        Set(_single(1406639490474712609794443551656275)))
      module_names_5 := (module_names_5 union
        Set(_single(6872339552563453791)))
      module_names_5 := (module_names_5 union
        Set(_single(26845067972140895)))
      module_names_5 := (module_names_5 union
        Set(_single(630473553919836619487141088200694305641100373577)))
      module_names_5 := (module_names_5 union
        Set(_single(138315189348246394050540131)))
      module_names_5 := (module_names_5 union
        Set(_single(540293708391587461095792)))
      module_names_5 := (module_names_5 union
        Set(_single(36033721845479484902533853795)))
      module_names_5 := (module_names_5 union
        Set(_single(140756725958904237884858736)))
      module_names_5 := (module_names_5 union
        Set(_single(122571059234189824553542000)))
      assert true &&
        (_combine(_single(1818452334), _combine(_single(29113321704089971),
        _single(573274899011546284255571))) in
        module_names_5)
      module_names_5 := (module_names_5 union Set(_single(1852270963)))
      assert true &&
        (_combine(_single(1818452334), _combine(_single(29113321704089971),
        _single(2239355094020702496086))) in
        module_names_5)
      module_names_5 := (module_names_5 union
        Set(_single(133480762729846)))
      NONCE_MAKER_CREATED()._val := __prim__bool___box__(false)
      module_names_5 := (module_names_5 union
        Set(_single(1522490091707951894107334634609059803287146318)))
      assert true && (_single(1701605234) in module_names_5) &&
        (_single(6580597) in module_names_5)
      module_names_5 := (module_names_5 union
        Set(_single(6872339552563453791)))
      module_names_5 := (module_names_5 union Set(_single(1954047342)))
      module_names_5 := (module_names_5 union
        Set(_single(540220637749316873514830)))
    }
    assert (_single(26096247291760565119514922569) in module_names_5)
    module_names_4 := (module_names_4 union
      Set(_single(26096247291760565119514922569)))
    assert (_single(26096247291760565119448466770) in module_names_5)
    module_names_4 := (module_names_4 union
      Set(_single(26096247291760565119448466770)))
    assert true &&
      (_combine(_single(127978942197619), _single(127978942197619)) in
      module_names_4)
    module_names_4 := (module_names_4 union
      Set(_single(35403923605517639057618658675)))
    assert true &&
      (_combine(_single(127978942197619), _single(127978942197619)) in
      module_names_4)
    module_names_4 := (module_names_4 union
      Set(_single(9063404443012515619619455526259)))
    assert true &&
      (_combine(_single(127978942197619), _single(127978942197619)) in
      module_names_4)
    module_names_4 := (module_names_4 union
      Set(_single(152058694035780664904253212709632566642)))
    assert true &&
      (_combine(_single(127978942197619), _single(127978942197619)) in
      module_names_4)
    module_names_4 := (module_names_4 union
      Set(_single(38927025673159850304955386264669995099506)))
  }
  inhale (forall _name: _Name ::
      { (_combine(_single(125780003415400), _name) in new_set_0) }
      (_name in module_names_4) ==
      (_combine(_single(125780003415400), _name) in new_set_0))
  module_names_0 := (module_names_0 union new_set_0)
  if (!module_defined_7) {
    module_defined_7 := true
    module_names_7 := (module_names_7 union
      Set(_single(38940328376053817855040461321972507500866)))
  }
  inhale (forall _name: _Name ::
      { (_combine(_single(1818452334), _combine(_single(545109315453954101049445),
      _name)) in
      new_set_7) }
      (_name in module_names_7) ==
      (_combine(_single(1818452334), _combine(_single(545109315453954101049445),
      _name)) in
      new_set_7))
  module_names_0 := (module_names_0 union new_set_7)
  if (!module_defined_8) {
    module_defined_8 := true
    module_names_8 := (module_names_8 union
      Set(_single(37578771102893684825896415043)))
    module_names_8 := (module_names_8 union
      Set(_single(32481164592901701)))
    module_names_8 := (module_names_8 union Set(_single(1701999952)))
    module_names_8 := (module_names_8 union Set(_single(128009175786834)))
    module_names_8 := (module_names_8 union
      Set(_single(153388003874551132815899425385464424551)))
    inhale SecretBox_NONCE_SIZE(SecretBox()) ==
      _asserting(_asserting(ghost_noncebytes(), true), true &&
      (_single(153388003874551132815899425385464424551) in module_names_8))
    module_names_8 := (module_names_8 union
      Set(_single(327508777956178301701966)))
    module_names_8 := (module_names_8 union
      Set(_single(2221626387110878733651)))
  }
  inhale (forall _name: _Name ::
      { (_combine(_single(1818452334), _combine(_single(127979059635571), _name)) in
      new_set_8) }
      (_name in module_names_8) ==
      (_combine(_single(1818452334), _combine(_single(127979059635571), _name)) in
      new_set_8))
  module_names_0 := (module_names_0 union new_set_8)
  if (!module_defined_9) {
    module_defined_9 := true
    if (!module_defined_10) {
      module_defined_10 := true
      module_names_10 := (module_names_10 union
        Set(_single(32199629384937029)))
      assert true && (_single(32199629384937029) in module_names_10)
      module_names_10 := (module_names_10 union
        Set(_single(540220137311035689754962)))
      assert true && (_single(32199629384937029) in module_names_10)
      module_names_10 := (module_names_10 union
        Set(_single(540220137311035689821512)))
    }
    inhale (forall _name: _Name ::
        { (_combine(_single(1818452334), _combine(_single(7453010313431182949),
        _name)) in
        new_set_10) }
        (_name in module_names_10) ==
        (_combine(_single(1818452334), _combine(_single(7453010313431182949),
        _name)) in
        new_set_10))
    module_names_9 := (module_names_9 union new_set_10)
    module_names_9 := (module_names_9 union Set(_single(6513473)))
    module_names_9 := (module_names_9 union
      Set(_single(37578771102893684825896415043)))
    module_names_9 := (module_names_9 union
      Set(_single(32481164592901701)))
    module_names_9 := (module_names_9 union
      Set(_single(1871507244730112373328)))
    module_names_9 := (module_names_9 union Set(_single(1701999952)))
    module_names_9 := (module_names_9 union
      Set(_single(8315178084276987218)))
    module_names_9 := (module_names_9 union
      Set(_single(8038062462289584464661321053517)))
    module_names_9 := (module_names_9 union Set(_single(1701869908)))
    module_names_9 := (module_names_9 union
      Set(_single(474107079729983096055911)))
    module_names_9 := (module_names_9 union
      Set(_single(6872339552563453791)))
    module_names_9 := (module_names_9 union Set(_single(1852270963)))
    module_names_9 := (module_names_9 union
      Set(_single(573274899011546284255571)))
    module_names_9 := (module_names_9 union
      Set(_single(2239364072692952033383)))
    module_names_9 := (module_names_9 union
      Set(_single(6872339552563453791)))
    module_names_9 := (module_names_9 union Set(_single(133480762729846)))
    module_names_9 := (module_names_9 union
      Set(_single(2239355094020702496086)))
  }
  inhale (forall _name: _Name ::
      { (_combine(_single(1818452334), _combine(_single(29113321704089971),
      _name)) in
      new_set_9) }
      (_name in module_names_9) ==
      (_combine(_single(1818452334), _combine(_single(29113321704089971), _name)) in
      new_set_9))
  module_names_0 := (module_names_0 union new_set_9)
  if (!module_defined_11) {
    module_defined_11 := true
    module_names_11 := (module_names_11 union
      Set(_single(120325193752946)))
  }
  inhale (forall _name: _Name ::
      { (_combine(_single(1818452334), _combine(_single(495740089461), _name)) in
      new_set_11) }
      (_name in module_names_11) ==
      (_combine(_single(1818452334), _combine(_single(495740089461), _name)) in
      new_set_11))
  module_names_0 := (module_names_0 union new_set_11)
  if (!module_defined_5) {
    module_defined_5 := true
    if (!module_defined_7) {
      module_defined_7 := true
      module_names_7 := (module_names_7 union
        Set(_single(38940328376053817855040461321972507500866)))
    }
    inhale (forall _name: _Name ::
        { (_combine(_single(1818452334), _combine(_single(545109315453954101049445),
        _name)) in
        new_set_12) }
        (_name in module_names_7) ==
        (_combine(_single(1818452334), _combine(_single(545109315453954101049445),
        _name)) in
        new_set_12))
    module_names_5 := (module_names_5 union new_set_12)
    if (!module_defined_8) {
      module_defined_8 := true
      module_names_8 := (module_names_8 union
        Set(_single(37578771102893684825896415043)))
      module_names_8 := (module_names_8 union
        Set(_single(32481164592901701)))
      module_names_8 := (module_names_8 union Set(_single(1701999952)))
      module_names_8 := (module_names_8 union
        Set(_single(128009175786834)))
      module_names_8 := (module_names_8 union
        Set(_single(153388003874551132815899425385464424551)))
      inhale SecretBox_NONCE_SIZE(SecretBox()) ==
        _asserting(_asserting(ghost_noncebytes(), true), true &&
        (_single(153388003874551132815899425385464424551) in
        module_names_8))
      module_names_8 := (module_names_8 union
        Set(_single(327508777956178301701966)))
      module_names_8 := (module_names_8 union
        Set(_single(2221626387110878733651)))
    }
    inhale (forall _name: _Name ::
        { (_combine(_single(1818452334), _combine(_single(127979059635571),
        _name)) in
        new_set_13) }
        (_name in module_names_8) ==
        (_combine(_single(1818452334), _combine(_single(127979059635571), _name)) in
        new_set_13))
    module_names_5 := (module_names_5 union new_set_13)
    if (!module_defined_9) {
      module_defined_9 := true
      if (!module_defined_10) {
        module_defined_10 := true
        module_names_10 := (module_names_10 union
          Set(_single(32199629384937029)))
        assert true && (_single(32199629384937029) in module_names_10)
        module_names_10 := (module_names_10 union
          Set(_single(540220137311035689754962)))
        assert true && (_single(32199629384937029) in module_names_10)
        module_names_10 := (module_names_10 union
          Set(_single(540220137311035689821512)))
      }
      inhale (forall _name: _Name ::
          { (_combine(_single(1818452334), _combine(_single(7453010313431182949),
          _name)) in
          new_set_15) }
          (_name in module_names_10) ==
          (_combine(_single(1818452334), _combine(_single(7453010313431182949),
          _name)) in
          new_set_15))
      module_names_9 := (module_names_9 union new_set_15)
      module_names_9 := (module_names_9 union Set(_single(6513473)))
      module_names_9 := (module_names_9 union
        Set(_single(37578771102893684825896415043)))
      module_names_9 := (module_names_9 union
        Set(_single(32481164592901701)))
      module_names_9 := (module_names_9 union
        Set(_single(1871507244730112373328)))
      module_names_9 := (module_names_9 union Set(_single(1701999952)))
      module_names_9 := (module_names_9 union
        Set(_single(8315178084276987218)))
      module_names_9 := (module_names_9 union
        Set(_single(8038062462289584464661321053517)))
      module_names_9 := (module_names_9 union Set(_single(1701869908)))
      module_names_9 := (module_names_9 union
        Set(_single(474107079729983096055911)))
      module_names_9 := (module_names_9 union
        Set(_single(6872339552563453791)))
      module_names_9 := (module_names_9 union Set(_single(1852270963)))
      module_names_9 := (module_names_9 union
        Set(_single(573274899011546284255571)))
      module_names_9 := (module_names_9 union
        Set(_single(2239364072692952033383)))
      module_names_9 := (module_names_9 union
        Set(_single(6872339552563453791)))
      module_names_9 := (module_names_9 union
        Set(_single(133480762729846)))
      module_names_9 := (module_names_9 union
        Set(_single(2239355094020702496086)))
    }
    inhale (forall _name: _Name ::
        { (_combine(_single(1818452334), _combine(_single(29113321704089971),
        _name)) in
        new_set_14) }
        (_name in module_names_9) ==
        (_combine(_single(1818452334), _combine(_single(29113321704089971),
        _name)) in
        new_set_14))
    module_names_5 := (module_names_5 union new_set_14)
    if (!module_defined_11) {
      module_defined_11 := true
      module_names_11 := (module_names_11 union
        Set(_single(120325193752946)))
    }
    inhale (forall _name: _Name ::
        { (_combine(_single(1818452334), _combine(_single(495740089461), _name)) in
        new_set_16) }
        (_name in module_names_11) ==
        (_combine(_single(1818452334), _combine(_single(495740089461), _name)) in
        new_set_16))
    module_names_5 := (module_names_5 union new_set_16)
    if (!module_defined_12) {
      module_defined_12 := true
      if (!module_defined_2) {
        module_defined_2 := true
        module_names_2 := (module_names_2 union
          Set(_single(478959366605689496363342)))
        module_names_2 := (module_names_2 union
          Set(_single(7809644653626814543)))
        if (!module_defined_3) {
          module_defined_3 := true
          module_names_3 := (module_names_3 union Set(_single(5522497)))
        }
        assert (_single(5522497) in module_names_3)
        module_names_2 := (module_names_2 union Set(_single(5522497)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(521392583788)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324041533555)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(323940939120)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324109169264)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1701605234)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1953066569)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1886610770)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1987208531)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(7309475735945898357)))
        assert true && (_single(7309475735945898357) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6580597)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(1871225753256683991622)))
        assert true && (_single(1871225753256683991622) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(448612627046)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955819)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1265853811)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(4945004)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836020833)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1952924001)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1852788321)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(2036681569)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836404321)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326642)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074738)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(128017026217586)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409394)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414348428658)))
        assert true &&
          (_single(2262173169928120975082305025828642414348428658) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856336074098)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326633)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074729)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(211751499369)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(216046466665)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409385)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414414884457)))
        assert true &&
          (_single(2262173169928120975082305025828642414414884457) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856402529897)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6779757)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1802401098)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500068345665)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(435459878734)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955787)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1752392008)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(491394256973)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500103213635)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(418364025953)))
      }
      module_names_12 := (module_names_12 union module_names_2)
      if (!module_defined_13) {
        module_defined_13 := true
        module_names_13 := (module_names_13 union
          Set(_single(478959366605689496363342)))
        module_names_13 := (module_names_13 union
          Set(_single(7809644653626814543)))
        module_names_13 := (module_names_13 union
          Set(_single(435611006292)))
        module_names_13 := (module_names_13 union
          Set(_single(8038062462289584464661321053517)))
        if (!module_defined_2) {
          module_defined_2 := true
          module_names_2 := (module_names_2 union
            Set(_single(478959366605689496363342)))
          module_names_2 := (module_names_2 union
            Set(_single(7809644653626814543)))
          if (!module_defined_3) {
            module_defined_3 := true
            module_names_3 := (module_names_3 union Set(_single(5522497)))
          }
          assert (_single(5522497) in module_names_3)
          module_names_2 := (module_names_2 union Set(_single(5522497)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(521392583788)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(324041533555)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(323940939120)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(324109169264)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1701605234)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1953066569)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1886610770)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1987208531)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(7309475735945898357)))
          assert true && (_single(7309475735945898357) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(6580597)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(1871225753256683991622)))
          assert true &&
            (_single(1871225753256683991622) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(448612627046)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(7955819)))
          assert true && (_single(7955819) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1265853811)))
          assert true && (_single(7955819) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(4945004)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1836020833)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1952924001)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1852788321)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(2036681569)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1836404321)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1818326642)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(32767019898074738)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(128017026217586)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(340533409394)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2262173169928120975082305025828642414348428658)))
          assert true &&
            (_single(2262173169928120975082305025828642414348428658) in
            module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2057743997646653667358856336074098)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1818326633)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(32767019898074729)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(211751499369)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(216046466665)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(340533409385)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2262173169928120975082305025828642414414884457)))
          assert true &&
            (_single(2262173169928120975082305025828642414414884457) in
            module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2057743997646653667358856402529897)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(6779757)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1802401098)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(500068345665)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(435459878734)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(7955787)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1752392008)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(491394256973)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(500103213635)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(418364025953)))
        }
        assert (_single(1818326633) in module_names_2)
        module_names_13 := (module_names_13 union Set(_single(1818326633)))
        assert (_single(1818326642) in module_names_2)
        module_names_13 := (module_names_13 union Set(_single(1818326642)))
        module_names_13 := (module_names_13 union
          Set(_single(154784345972827791294882587724017917762)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(2361821685376400624006387141784941)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(42800665781447379162461437097251359834437091366352237)))
        module_names_13 := (module_names_13 union
          Set(_single(16776682165066970797098586154484615700290)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(255991854325362713578774813148263789)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(10956970440050529065241493399765352271449035094637491565)))
        module_names_13 := (module_names_13 union
          Set(_single(17116964530717473295245339254801157676866)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(261184151164512226795125415875261805)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(10956970440050529065246685696604501784665385697364489581)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(167190100708778824853518807536910453582455290541421)))
        assert true && (_single(1818326633) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(167190100708778824852096104951484096784397117240685)))
        module_names_13 := (module_names_13 union
          Set(_single(530849696846229619433282)))
        module_names_13 := (module_names_13 union
          Set(_single(154784345972827772589238111949636329282)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(2361821685376400338580903807825261)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(42800665781447379162461437097251359549011608032392557)))
        module_names_13 := (module_names_13 union
          Set(_single(16776682163796534813076320171595007876930)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(255991854305977398881169436212082029)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(10956970440050529065241493399745966956751429717701309805)))
        module_names_13 := (module_names_13 union
          Set(_single(17116964531987909241856316286142002323266)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(261184151183897540921879826143524205)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(10956970440050529065246685696623887098792140107632751981)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(167190100708778824853518807536910168156971956581741)))
        assert true && (_single(1818326642) in module_names_13)
        module_names_13 := (module_names_13 union
          Set(_single(167190100708778824852096104951483811358913783281005)))
        module_names_13 := (module_names_13 union
          Set(_single(530849696846268274138946)))
      }
      module_names_12 := (module_names_12 union module_names_13)
      if (!module_defined_1) {
        module_defined_1 := true
        module_names_1 := (module_names_1 union Set(_single(1953718627)))
        module_names_1 := (module_names_1 union
          Set(_single(7809644653626814543)))
        module_names_1 := (module_names_1 union Set(_single(435611006292)))
        module_names_1 := (module_names_1 union
          Set(_single(133507968131445240481402697)))
        module_names_1 := (module_names_1 union Set(_single(435459026000)))
        module_names_1 := (module_names_1 union
          Set(_single(544943652786834091697492)))
        module_names_1 := (module_names_1 union
          Set(_single(930656604993964298057)))
        module_names_1 := (module_names_1 union Set(_single(474147942260)))
        module_names_1 := (module_names_1 union
          Set(_single(8038062462289584464661321053517)))
        if (!module_defined_2) {
          module_defined_2 := true
          module_names_2 := (module_names_2 union
            Set(_single(478959366605689496363342)))
          module_names_2 := (module_names_2 union
            Set(_single(7809644653626814543)))
          if (!module_defined_3) {
            module_defined_3 := true
            module_names_3 := (module_names_3 union Set(_single(5522497)))
          }
          assert (_single(5522497) in module_names_3)
          module_names_2 := (module_names_2 union Set(_single(5522497)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(521392583788)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(324041533555)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(323940939120)))
          assert true && (_single(521392583788) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(324109169264)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1701605234)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1953066569)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1886610770)))
          assert true && (_single(1701605234) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1987208531)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(7309475735945898357)))
          assert true && (_single(7309475735945898357) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(6580597)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(1871225753256683991622)))
          assert true &&
            (_single(1871225753256683991622) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(448612627046)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(7955819)))
          assert true && (_single(7955819) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1265853811)))
          assert true && (_single(7955819) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(4945004)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1836020833)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1952924001)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1852788321)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(2036681569)))
          assert true && (_single(1836020833) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1836404321)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1818326642)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(32767019898074738)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(128017026217586)))
          assert true && (_single(1818326642) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(340533409394)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2262173169928120975082305025828642414348428658)))
          assert true &&
            (_single(2262173169928120975082305025828642414348428658) in
            module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2057743997646653667358856336074098)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1818326633)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(32767019898074729)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(211751499369)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(216046466665)))
          assert true && (_single(1818326633) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(340533409385)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2262173169928120975082305025828642414414884457)))
          assert true &&
            (_single(2262173169928120975082305025828642414414884457) in
            module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(2057743997646653667358856402529897)))
          assert true && (_single(5522497) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(6779757)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1802401098)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(500068345665)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(435459878734)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(7955787)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union Set(_single(1752392008)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(491394256973)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(500103213635)))
          assert true && (_single(6779757) in module_names_2)
          module_names_2 := (module_names_2 union
            Set(_single(418364025953)))
        }
        assert (_single(32767019898074729) in module_names_2)
        module_names_1 := (module_names_1 union
          Set(_single(32767019898074729)))
        assert (_single(1818326633) in module_names_2)
        module_names_1 := (module_names_1 union Set(_single(1818326633)))
        assert (_single(340533409385) in module_names_2)
        module_names_1 := (module_names_1 union Set(_single(340533409385)))
        assert (_single(32767019898074738) in module_names_2)
        module_names_1 := (module_names_1 union
          Set(_single(32767019898074738)))
        assert (_single(1818326642) in module_names_2)
        module_names_1 := (module_names_1 union Set(_single(1818326642)))
        assert (_single(340533409394) in module_names_2)
        module_names_1 := (module_names_1 union Set(_single(340533409394)))
        inhale AF_INET() == __prim__int___box__(2)
        module_names_1 := (module_names_1 union
          Set(_single(23720100584441409)))
        inhale SOCK_DGRAM() == __prim__int___box__(2)
        module_names_1 := (module_names_1 union
          Set(_single(364827186328364334141267)))
        module_names_1 := (module_names_1 union
          Set(_single(7236833197425706069)))
        module_names_1 := (module_names_1 union
          Set(_single(122660691239978466708309077)))
        module_names_1 := (module_names_1 union
          Set(_single(1852629298541551961173)))
        module_names_1 := (module_names_1 union
          Set(_single(31401136957434487477898331221)))
        module_names_1 := (module_names_1 union
          Set(_single(32780218601924980)))
        module_names_1 := (module_names_1 union
          Set(_single(6872339552563453791)))
        module_names_1 := (module_names_1 union
          Set(_single(549960808011713412883827)))
        module_names_1 := (module_names_1 union
          Set(_single(549960808011713412883815)))
        module_names_1 := (module_names_1 union
          Set(_single(125040764379701301522752883)))
        module_names_1 := (module_names_1 union
          Set(_single(125040764379701301522752871)))
        module_names_1 := (module_names_1 union
          Set(_single(122618043018447984809764199)))
        module_names_1 := (module_names_1 union Set(_single(1684957538)))
        module_names_1 := (module_names_1 union
          Set(_single(32760384594014051)))
        module_names_1 := (module_names_1 union
          Set(_single(122618043020420465669989735)))
        module_names_1 := (module_names_1 union Set(_single(1986225522)))
        module_names_1 := (module_names_1 union
          Set(_single(7885647256947484018)))
        module_names_1 := (module_names_1 union Set(_single(1684956531)))
        module_names_1 := (module_names_1 union
          Set(_single(127978942197619)))
      }
      assert (_single(122660691239978466708309077) in module_names_1)
      module_names_12 := (module_names_12 union
        Set(_single(122660691239978466708309077)))
      assert (_single(7236833197425706069) in module_names_1)
      module_names_12 := (module_names_12 union
        Set(_single(7236833197425706069)))
      assert (_single(31401136957434487477898331221) in module_names_1)
      module_names_12 := (module_names_12 union
        Set(_single(31401136957434487477898331221)))
      assert (_single(1852629298541551961173) in module_names_1)
      module_names_12 := (module_names_12 union
        Set(_single(1852629298541551961173)))
      inhale EMPTY_STORE() == PSeq___create__(Seq[Ref](), atom())
      module_names_12 := (module_names_12 union
        Set(_single(83804578974091706541034821)))
      inhale EMPTY_IBUF() == PSet___create__(Set[Ref](), PSeq(object()))
      module_names_12 := (module_names_12 union
        Set(_single(332138403500857551244613)))
      module_names_12 := (module_names_12 union
        Set(_single(2361821685376400624006387141785197)))
      module_names_12 := (module_names_12 union
        Set(_single(255991854325362713578774813148264045)))
      module_names_12 := (module_names_12 union
        Set(_single(261184151164512226795125415875262061)))
      module_names_12 := (module_names_12 union
        Set(_single(8530773661071259245)))
      module_names_12 := (module_names_12 union
        Set(_single(7236833197427340909)))
      module_names_12 := (module_names_12 union
        Set(_single(2037307439045221715470981660227181)))
      module_names_12 := (module_names_12 union
        Set(_single(2361821685376400338580903807825517)))
      module_names_12 := (module_names_12 union
        Set(_single(255991854305977398881169436212082285)))
      module_names_12 := (module_names_12 union
        Set(_single(261184151183897540921879826143524461)))
      module_names_12 := (module_names_12 union
        Set(_single(9379684834273608741227018204781)))
      module_names_12 := (module_names_12 union
        Set(_single(7956982248847251943168844904045)))
      module_names_12 := (module_names_12 union
        Set(_single(2037307439045221715470981660817005)))
    }
    module_names_5 := (module_names_5 union module_names_12)
    module_names_5 := (module_names_5 union
      Set(_single(8038062462289584464661321053517)))
    module_names_5 := (module_names_5 union Set(_single(1953718627)))
    module_names_5 := (module_names_5 union Set(_single(435611006292)))
    inhale INIT_IN_PORT() == __prim__int___box__(1024)
    module_names_5 := (module_names_5 union
      Set(_single(26096247291760565119514922569)))
    inhale RESP_IN_PORT() == __prim__int___box__(1025)
    module_names_5 := (module_names_5 union
      Set(_single(26096247291760565119448466770)))
    inhale SIGNATURE_SIZE() == __prim__int___box__(64)
    module_names_5 := (module_names_5 union
      Set(_single(1406639490474712609794443551656275)))
    module_names_5 := (module_names_5 union
      Set(_single(6872339552563453791)))
    module_names_5 := (module_names_5 union
      Set(_single(26845067972140895)))
    module_names_5 := (module_names_5 union
      Set(_single(630473553919836619487141088200694305641100373577)))
    module_names_5 := (module_names_5 union
      Set(_single(138315189348246394050540131)))
    module_names_5 := (module_names_5 union
      Set(_single(540293708391587461095792)))
    module_names_5 := (module_names_5 union
      Set(_single(36033721845479484902533853795)))
    module_names_5 := (module_names_5 union
      Set(_single(140756725958904237884858736)))
    module_names_5 := (module_names_5 union
      Set(_single(122571059234189824553542000)))
    assert true &&
      (_combine(_single(1818452334), _combine(_single(29113321704089971), _single(573274899011546284255571))) in
      module_names_5)
    module_names_5 := (module_names_5 union Set(_single(1852270963)))
    assert true &&
      (_combine(_single(1818452334), _combine(_single(29113321704089971), _single(2239355094020702496086))) in
      module_names_5)
    module_names_5 := (module_names_5 union Set(_single(133480762729846)))
    NONCE_MAKER_CREATED()._val := __prim__bool___box__(false)
    module_names_5 := (module_names_5 union
      Set(_single(1522490091707951894107334634609059803287146318)))
    assert true && (_single(1701605234) in module_names_5) &&
      (_single(6580597) in module_names_5)
    module_names_5 := (module_names_5 union
      Set(_single(6872339552563453791)))
    module_names_5 := (module_names_5 union Set(_single(1954047342)))
    module_names_5 := (module_names_5 union
      Set(_single(540220637749316873514830)))
  }
  module_names_0 := (module_names_0 union module_names_5)
  if (!module_defined_12) {
    module_defined_12 := true
    if (!module_defined_2) {
      module_defined_2 := true
      module_names_2 := (module_names_2 union
        Set(_single(478959366605689496363342)))
      module_names_2 := (module_names_2 union
        Set(_single(7809644653626814543)))
      if (!module_defined_3) {
        module_defined_3 := true
        module_names_3 := (module_names_3 union Set(_single(5522497)))
      }
      assert (_single(5522497) in module_names_3)
      module_names_2 := (module_names_2 union Set(_single(5522497)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(521392583788)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(324041533555)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(323940939120)))
      assert true && (_single(521392583788) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(324109169264)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1701605234)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1953066569)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1886610770)))
      assert true && (_single(1701605234) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1987208531)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(7309475735945898357)))
      assert true && (_single(7309475735945898357) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(6580597)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(1871225753256683991622)))
      assert true && (_single(1871225753256683991622) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(448612627046)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(7955819)))
      assert true && (_single(7955819) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1265853811)))
      assert true && (_single(7955819) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(4945004)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1836020833)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1952924001)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1852788321)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(2036681569)))
      assert true && (_single(1836020833) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1836404321)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1818326642)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(32767019898074738)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(128017026217586)))
      assert true && (_single(1818326642) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(340533409394)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2262173169928120975082305025828642414348428658)))
      assert true &&
        (_single(2262173169928120975082305025828642414348428658) in
        module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2057743997646653667358856336074098)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1818326633)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(32767019898074729)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(211751499369)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(216046466665)))
      assert true && (_single(1818326633) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(340533409385)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2262173169928120975082305025828642414414884457)))
      assert true &&
        (_single(2262173169928120975082305025828642414414884457) in
        module_names_2)
      module_names_2 := (module_names_2 union
        Set(_single(2057743997646653667358856402529897)))
      assert true && (_single(5522497) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(6779757)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1802401098)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(500068345665)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(435459878734)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(7955787)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(1752392008)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(491394256973)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(500103213635)))
      assert true && (_single(6779757) in module_names_2)
      module_names_2 := (module_names_2 union Set(_single(418364025953)))
    }
    module_names_12 := (module_names_12 union module_names_2)
    if (!module_defined_13) {
      module_defined_13 := true
      module_names_13 := (module_names_13 union
        Set(_single(478959366605689496363342)))
      module_names_13 := (module_names_13 union
        Set(_single(7809644653626814543)))
      module_names_13 := (module_names_13 union Set(_single(435611006292)))
      module_names_13 := (module_names_13 union
        Set(_single(8038062462289584464661321053517)))
      if (!module_defined_2) {
        module_defined_2 := true
        module_names_2 := (module_names_2 union
          Set(_single(478959366605689496363342)))
        module_names_2 := (module_names_2 union
          Set(_single(7809644653626814543)))
        if (!module_defined_3) {
          module_defined_3 := true
          module_names_3 := (module_names_3 union Set(_single(5522497)))
        }
        assert (_single(5522497) in module_names_3)
        module_names_2 := (module_names_2 union Set(_single(5522497)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(521392583788)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324041533555)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(323940939120)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324109169264)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1701605234)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1953066569)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1886610770)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1987208531)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(7309475735945898357)))
        assert true && (_single(7309475735945898357) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6580597)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(1871225753256683991622)))
        assert true && (_single(1871225753256683991622) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(448612627046)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955819)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1265853811)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(4945004)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836020833)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1952924001)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1852788321)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(2036681569)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836404321)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326642)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074738)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(128017026217586)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409394)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414348428658)))
        assert true &&
          (_single(2262173169928120975082305025828642414348428658) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856336074098)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326633)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074729)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(211751499369)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(216046466665)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409385)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414414884457)))
        assert true &&
          (_single(2262173169928120975082305025828642414414884457) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856402529897)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6779757)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1802401098)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500068345665)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(435459878734)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955787)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1752392008)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(491394256973)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500103213635)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(418364025953)))
      }
      assert (_single(1818326633) in module_names_2)
      module_names_13 := (module_names_13 union Set(_single(1818326633)))
      assert (_single(1818326642) in module_names_2)
      module_names_13 := (module_names_13 union Set(_single(1818326642)))
      module_names_13 := (module_names_13 union
        Set(_single(154784345972827791294882587724017917762)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(2361821685376400624006387141784941)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(42800665781447379162461437097251359834437091366352237)))
      module_names_13 := (module_names_13 union
        Set(_single(16776682165066970797098586154484615700290)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(255991854325362713578774813148263789)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(10956970440050529065241493399765352271449035094637491565)))
      module_names_13 := (module_names_13 union
        Set(_single(17116964530717473295245339254801157676866)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(261184151164512226795125415875261805)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(10956970440050529065246685696604501784665385697364489581)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(167190100708778824853518807536910453582455290541421)))
      assert true && (_single(1818326633) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(167190100708778824852096104951484096784397117240685)))
      module_names_13 := (module_names_13 union
        Set(_single(530849696846229619433282)))
      module_names_13 := (module_names_13 union
        Set(_single(154784345972827772589238111949636329282)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(2361821685376400338580903807825261)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(42800665781447379162461437097251359549011608032392557)))
      module_names_13 := (module_names_13 union
        Set(_single(16776682163796534813076320171595007876930)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(255991854305977398881169436212082029)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(10956970440050529065241493399745966956751429717701309805)))
      module_names_13 := (module_names_13 union
        Set(_single(17116964531987909241856316286142002323266)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(261184151183897540921879826143524205)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(10956970440050529065246685696623887098792140107632751981)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(167190100708778824853518807536910168156971956581741)))
      assert true && (_single(1818326642) in module_names_13)
      module_names_13 := (module_names_13 union
        Set(_single(167190100708778824852096104951483811358913783281005)))
      module_names_13 := (module_names_13 union
        Set(_single(530849696846268274138946)))
    }
    module_names_12 := (module_names_12 union module_names_13)
    if (!module_defined_1) {
      module_defined_1 := true
      module_names_1 := (module_names_1 union Set(_single(1953718627)))
      module_names_1 := (module_names_1 union
        Set(_single(7809644653626814543)))
      module_names_1 := (module_names_1 union Set(_single(435611006292)))
      module_names_1 := (module_names_1 union
        Set(_single(133507968131445240481402697)))
      module_names_1 := (module_names_1 union Set(_single(435459026000)))
      module_names_1 := (module_names_1 union
        Set(_single(544943652786834091697492)))
      module_names_1 := (module_names_1 union
        Set(_single(930656604993964298057)))
      module_names_1 := (module_names_1 union Set(_single(474147942260)))
      module_names_1 := (module_names_1 union
        Set(_single(8038062462289584464661321053517)))
      if (!module_defined_2) {
        module_defined_2 := true
        module_names_2 := (module_names_2 union
          Set(_single(478959366605689496363342)))
        module_names_2 := (module_names_2 union
          Set(_single(7809644653626814543)))
        if (!module_defined_3) {
          module_defined_3 := true
          module_names_3 := (module_names_3 union Set(_single(5522497)))
        }
        assert (_single(5522497) in module_names_3)
        module_names_2 := (module_names_2 union Set(_single(5522497)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(521392583788)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324041533555)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(323940939120)))
        assert true && (_single(521392583788) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(324109169264)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1701605234)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1953066569)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1886610770)))
        assert true && (_single(1701605234) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1987208531)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(7309475735945898357)))
        assert true && (_single(7309475735945898357) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6580597)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(1871225753256683991622)))
        assert true && (_single(1871225753256683991622) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(448612627046)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955819)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1265853811)))
        assert true && (_single(7955819) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(4945004)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836020833)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1952924001)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1852788321)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(2036681569)))
        assert true && (_single(1836020833) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1836404321)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326642)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074738)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(128017026217586)))
        assert true && (_single(1818326642) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409394)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414348428658)))
        assert true &&
          (_single(2262173169928120975082305025828642414348428658) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856336074098)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1818326633)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(32767019898074729)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(211751499369)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(216046466665)))
        assert true && (_single(1818326633) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(340533409385)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2262173169928120975082305025828642414414884457)))
        assert true &&
          (_single(2262173169928120975082305025828642414414884457) in
          module_names_2)
        module_names_2 := (module_names_2 union
          Set(_single(2057743997646653667358856402529897)))
        assert true && (_single(5522497) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(6779757)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1802401098)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500068345665)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(435459878734)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(7955787)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(1752392008)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(491394256973)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(500103213635)))
        assert true && (_single(6779757) in module_names_2)
        module_names_2 := (module_names_2 union Set(_single(418364025953)))
      }
      assert (_single(32767019898074729) in module_names_2)
      module_names_1 := (module_names_1 union
        Set(_single(32767019898074729)))
      assert (_single(1818326633) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(1818326633)))
      assert (_single(340533409385) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(340533409385)))
      assert (_single(32767019898074738) in module_names_2)
      module_names_1 := (module_names_1 union
        Set(_single(32767019898074738)))
      assert (_single(1818326642) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(1818326642)))
      assert (_single(340533409394) in module_names_2)
      module_names_1 := (module_names_1 union Set(_single(340533409394)))
      inhale AF_INET() == __prim__int___box__(2)
      module_names_1 := (module_names_1 union
        Set(_single(23720100584441409)))
      inhale SOCK_DGRAM() == __prim__int___box__(2)
      module_names_1 := (module_names_1 union
        Set(_single(364827186328364334141267)))
      module_names_1 := (module_names_1 union
        Set(_single(7236833197425706069)))
      module_names_1 := (module_names_1 union
        Set(_single(122660691239978466708309077)))
      module_names_1 := (module_names_1 union
        Set(_single(1852629298541551961173)))
      module_names_1 := (module_names_1 union
        Set(_single(31401136957434487477898331221)))
      module_names_1 := (module_names_1 union
        Set(_single(32780218601924980)))
      module_names_1 := (module_names_1 union
        Set(_single(6872339552563453791)))
      module_names_1 := (module_names_1 union
        Set(_single(549960808011713412883827)))
      module_names_1 := (module_names_1 union
        Set(_single(549960808011713412883815)))
      module_names_1 := (module_names_1 union
        Set(_single(125040764379701301522752883)))
      module_names_1 := (module_names_1 union
        Set(_single(125040764379701301522752871)))
      module_names_1 := (module_names_1 union
        Set(_single(122618043018447984809764199)))
      module_names_1 := (module_names_1 union Set(_single(1684957538)))
      module_names_1 := (module_names_1 union
        Set(_single(32760384594014051)))
      module_names_1 := (module_names_1 union
        Set(_single(122618043020420465669989735)))
      module_names_1 := (module_names_1 union Set(_single(1986225522)))
      module_names_1 := (module_names_1 union
        Set(_single(7885647256947484018)))
      module_names_1 := (module_names_1 union Set(_single(1684956531)))
      module_names_1 := (module_names_1 union
        Set(_single(127978942197619)))
    }
    assert (_single(122660691239978466708309077) in module_names_1)
    module_names_12 := (module_names_12 union
      Set(_single(122660691239978466708309077)))
    assert (_single(7236833197425706069) in module_names_1)
    module_names_12 := (module_names_12 union
      Set(_single(7236833197425706069)))
    assert (_single(31401136957434487477898331221) in module_names_1)
    module_names_12 := (module_names_12 union
      Set(_single(31401136957434487477898331221)))
    assert (_single(1852629298541551961173) in module_names_1)
    module_names_12 := (module_names_12 union
      Set(_single(1852629298541551961173)))
    inhale EMPTY_STORE() == PSeq___create__(Seq[Ref](), atom())
    module_names_12 := (module_names_12 union
      Set(_single(83804578974091706541034821)))
    inhale EMPTY_IBUF() == PSet___create__(Set[Ref](), PSeq(object()))
    module_names_12 := (module_names_12 union
      Set(_single(332138403500857551244613)))
    module_names_12 := (module_names_12 union
      Set(_single(2361821685376400624006387141785197)))
    module_names_12 := (module_names_12 union
      Set(_single(255991854325362713578774813148264045)))
    module_names_12 := (module_names_12 union
      Set(_single(261184151164512226795125415875262061)))
    module_names_12 := (module_names_12 union
      Set(_single(8530773661071259245)))
    module_names_12 := (module_names_12 union
      Set(_single(7236833197427340909)))
    module_names_12 := (module_names_12 union
      Set(_single(2037307439045221715470981660227181)))
    module_names_12 := (module_names_12 union
      Set(_single(2361821685376400338580903807825517)))
    module_names_12 := (module_names_12 union
      Set(_single(255991854305977398881169436212082285)))
    module_names_12 := (module_names_12 union
      Set(_single(261184151183897540921879826143524461)))
    module_names_12 := (module_names_12 union
      Set(_single(9379684834273608741227018204781)))
    module_names_12 := (module_names_12 union
      Set(_single(7956982248847251943168844904045)))
    module_names_12 := (module_names_12 union
      Set(_single(2037307439045221715470981660817005)))
  }
  assert (_single(2037307439045221715470981660817005) in module_names_12)
  module_names_0 := (module_names_0 union
    Set(_single(2037307439045221715470981660817005)))
  assert (_single(2361821685376400338580903807825517) in module_names_12)
  module_names_0 := (module_names_0 union
    Set(_single(2361821685376400338580903807825517)))
  assert (_single(255991854305977398881169436212082285) in module_names_12)
  module_names_0 := (module_names_0 union
    Set(_single(255991854305977398881169436212082285)))
  assert (_single(7956982248847251943168844904045) in module_names_12)
  module_names_0 := (module_names_0 union
    Set(_single(7956982248847251943168844904045)))
  assert (_single(9379684834273608741227018204781) in module_names_12)
  module_names_0 := (module_names_0 union
    Set(_single(9379684834273608741227018204781)))
  assert (_single(261184151183897540921879826143524461) in module_names_12)
  module_names_0 := (module_names_0 union
    Set(_single(261184151183897540921879826143524461)))
  module_names_0 := (module_names_0 union Set(_single(1953718627)))
  module_names_0 := (module_names_0 union Set(_single(435611006292)))
  module_names_0 := (module_names_0 union Set(_single(1886610802)))
  goto __end
  label __end
}

method UDP_send__termination_check(t_pre: Ref, v_0: Ref)
  requires issubtype(typeof(t_pre), Place())
  requires issubtype(typeof(v_0), ival())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method UDP_receive__termination_check(t_pre_0: Ref, v_1: Ref)
  requires issubtype(typeof(t_pre_0), Place())
  requires issubtype(typeof(v_1), iv_Unit())
{
  // Termination measure must be positive.
  assert false ==> 1 > 0
}

method UDPr_send__termination_check(t_pre_1: Ref, v_2: Ref)
  requires issubtype(typeof(t_pre_1), Place())
  requires issubtype(typeof(v_2), rval())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method UDPr_receive__termination_check(t_pre_2: Ref, v_3: Ref)
  requires issubtype(typeof(t_pre_2), Place())
  requires issubtype(typeof(v_3), rv_Unit())
{
  // Termination measure must be positive.
  assert false ==> 1 > 0
}

method m6i_init_start__termination_check(t_1: Ref, s_0: Ref, A: Int, B_0: Int,
  Ra: Ref, addrB: Ref)
  requires issubtype(typeof(t_1), Place())
  requires s_0 == null || issubtype(typeof(s_0), init_run_state())
  requires issubtype(typeof(Ra), uid())
  requires issubtype(typeof(addrB), str())
{
  var v_4: Ref
  inhale issubtype(typeof(v_4), ival())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of B_m5i_init_start (26:24).
  assert false &&
    (object___eq__(s_0, null) && v_4 == box_ival_0(ival_iv_Unit())) ==>
    true
  // Termination measure of B_m5i_init_start (26:24).
  assert false &&
    (object___eq__(s_0, null) && v_4 == box_ival_0(ival_iv_Unit())) ==>
    1 > 1
  // Termination condition of m6i_iospec_ord (27:24).
  assert false &&
    (object___eq__(s_0, null) && v_4 == box_ival_0(ival_iv_Unit())) ==>
    false
  // Termination measure of m6i_iospec_ord (27:24).
  assert false &&
    (object___eq__(s_0, null) && v_4 == box_ival_0(ival_iv_Unit())) ==>
    1 > 1
}

method m6i_init_put_M1__termination_check(t_2: Ref, s_1: Ref, A_0: Int, B_1: Int,
  Ra_0: Ref, addrB_0: Ref)
  requires issubtype(typeof(t_2), Place())
  requires s_1 == null || issubtype(typeof(s_1), init_run_state())
  requires issubtype(typeof(Ra_0), uid())
  requires issubtype(typeof(addrB_0), str())
{
  var v_5: Ref
  inhale issubtype(typeof(v_5), iv_M1())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of B_m5i_init_put_M1 (44:24).
  assert false &&
    (s_1 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_1)) ==
    PSeq___create__(Seq(__prim__int___box__(A_0), __prim__int___box__(B_1)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_1)) ==
    EMPTY_STORE() &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_1)) ==
    null &&
    (ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Init()), Ra_0, 0)) &&
    alpha(ival_iv_M1_iv_M1_arg1(unbox_ival_0(v_5))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(A_0))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_1))),
    unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5))))))))))))))) ==>
    true
  // Termination measure of B_m5i_init_put_M1 (44:24).
  assert false &&
    (s_1 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_1)) ==
    PSeq___create__(Seq(__prim__int___box__(A_0), __prim__int___box__(B_1)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_1)) ==
    EMPTY_STORE() &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_1)) ==
    null &&
    (ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Init()), Ra_0, 0)) &&
    alpha(ival_iv_M1_iv_M1_arg1(unbox_ival_0(v_5))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(A_0))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_1))),
    unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5))))))))))))))) ==>
    1 > 1
  // Termination condition of m6i_iospec_ord (45:24).
  assert false &&
    (s_1 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_1)) ==
    PSeq___create__(Seq(__prim__int___box__(A_0), __prim__int___box__(B_1)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_1)) ==
    EMPTY_STORE() &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_1)) ==
    null &&
    (ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Init()), Ra_0, 0)) &&
    alpha(ival_iv_M1_iv_M1_arg1(unbox_ival_0(v_5))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(A_0))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_1))),
    unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5))))))))))))))) ==>
    false
  // Termination measure of m6i_iospec_ord (45:24).
  assert false &&
    (s_1 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_1)) ==
    PSeq___create__(Seq(__prim__int___box__(A_0), __prim__int___box__(B_1)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_1)) ==
    EMPTY_STORE() &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_1)) ==
    null &&
    (ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Init()), Ra_0, 0)) &&
    alpha(ival_iv_M1_iv_M1_arg1(unbox_ival_0(v_5))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(A_0))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_1))),
    unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M1_iv_M1_arg2(unbox_ival_0(v_5))))))))))))))) ==>
    1 > 1
}

method m6i_init_get_M2__termination_check(t_3: Ref, s_2: Ref, A_1: Int, B_2: Int,
  Ra_1: Ref, addrB_1: Ref)
  requires issubtype(typeof(t_3), Place())
  requires s_2 == null || issubtype(typeof(s_2), init_run_state())
  requires issubtype(typeof(Ra_1), uid())
  requires issubtype(typeof(addrB_1), str())
{
  var v_6: Ref
  var ad: Ref
  inhale issubtype(typeof(v_6), iv_M2())
  inhale issubtype(typeof(ad), str())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of B_m5i_init_get_M2 (62:24).
  assert false &&
    (alpha(ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_2)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg3(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg2(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_Agent(A_1))))))))))) &&
    (s_2 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_2)) ==
    PSeq___create__(Seq(__prim__int___box__(A_1), __prim__int___box__(B_2)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_2)) ==
    EMPTY_STORE() &&
    (exists adp: Ref :: { issubtype(typeof(adp), str()) } issubtype(typeof(adp),
      str()) &&
      (issubtype(typeof(adp), str()) &&
      PSet___contains__(init_run_state_type_init_run_state_ibuf(unbox_init_run_state_type_0(s_2)),
      PSeq___create__(Seq(adp, ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))), object())))))))) ==>
    true
  // Termination measure of B_m5i_init_get_M2 (62:24).
  assert false &&
    (alpha(ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_2)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg3(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg2(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_Agent(A_1))))))))))) &&
    (s_2 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_2)) ==
    PSeq___create__(Seq(__prim__int___box__(A_1), __prim__int___box__(B_2)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_2)) ==
    EMPTY_STORE() &&
    (exists adp: Ref :: { issubtype(typeof(adp), str()) } issubtype(typeof(adp),
      str()) &&
      (issubtype(typeof(adp), str()) &&
      PSet___contains__(init_run_state_type_init_run_state_ibuf(unbox_init_run_state_type_0(s_2)),
      PSeq___create__(Seq(adp, ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))), object())))))))) ==>
    1 > 1
  // Termination condition of m6i_iospec_ord (63:24).
  assert false &&
    (alpha(ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_2)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg3(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg2(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_Agent(A_1))))))))))) &&
    (s_2 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_2)) ==
    PSeq___create__(Seq(__prim__int___box__(A_1), __prim__int___box__(B_2)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_2)) ==
    EMPTY_STORE() &&
    (exists adp: Ref :: { issubtype(typeof(adp), str()) } issubtype(typeof(adp),
      str()) &&
      (issubtype(typeof(adp), str()) &&
      PSet___contains__(init_run_state_type_init_run_state_ibuf(unbox_init_run_state_type_0(s_2)),
      PSeq___create__(Seq(adp, ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))), object())))))))) ==>
    false
  // Termination measure of m6i_iospec_ord (63:24).
  assert false &&
    (alpha(ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_2)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg3(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(ival_iv_M2_iv_M2_arg2(unbox_ival_0(v_6))))),
    unbox_msg_1(box_msg_1(msg_Agent(A_1))))))))))) &&
    (s_2 != null &&
    (init_run_state_type_init_run_state_agts(unbox_init_run_state_type_0(s_2)) ==
    PSeq___create__(Seq(__prim__int___box__(A_1), __prim__int___box__(B_2)),
    int()) &&
    (init_run_state_type_init_run_state_store(unbox_init_run_state_type_0(s_2)) ==
    EMPTY_STORE() &&
    (exists adp: Ref :: { issubtype(typeof(adp), str()) } issubtype(typeof(adp),
      str()) &&
      (issubtype(typeof(adp), str()) &&
      PSet___contains__(init_run_state_type_init_run_state_ibuf(unbox_init_run_state_type_0(s_2)),
      PSeq___create__(Seq(adp, ival_iv_M2_iv_M2_arg1(unbox_ival_0(v_6))), object())))))))) ==>
    1 > 1
}

method m6i_recv__termination_check(t_4: Ref, s_3: Ref, A_2: Int, B_3: Int, Ra_2: Ref,
  addrB_2: Ref)
  requires issubtype(typeof(t_4), Place())
  requires s_3 == null || issubtype(typeof(s_3), init_run_state())
  requires issubtype(typeof(Ra_2), uid())
  requires issubtype(typeof(addrB_2), str())
{
  var v_7: Ref
  inhale issubtype(typeof(v_7), iv_Unit())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of UDP_receive (78:24).
  assert false && s_3 != null ==> false
  // Termination measure of UDP_receive (78:24).
  assert false && s_3 != null ==> 1 > 1
  // Termination condition of m6i_iospec_ord (79:24).
  assert false && s_3 != null ==> false
  // Termination measure of m6i_iospec_ord (79:24).
  assert false && s_3 != null ==> 1 > 1
}

method m6i_send__termination_check(t_5: Ref, s_4: Ref, A_3: Int, B_4: Int, Ra_3: Ref,
  addrB_3: Ref)
  requires issubtype(typeof(t_5), Place())
  requires s_4 == null || issubtype(typeof(s_4), init_run_state())
  requires issubtype(typeof(Ra_3), uid())
  requires issubtype(typeof(addrB_3), str())
{
  var v_8: Ref
  inhale issubtype(typeof(v_8), iv_IO())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of UDP_send (94:24).
  assert false &&
    (s_4 != null &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_4)) ==
    ival_iv_IO_msg(unbox_ival_0(v_8)) &&
    addrB_3 == ival_iv_IO_address(unbox_ival_0(v_8)))) ==>
    true
  // Termination measure of UDP_send (94:24).
  assert false &&
    (s_4 != null &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_4)) ==
    ival_iv_IO_msg(unbox_ival_0(v_8)) &&
    addrB_3 == ival_iv_IO_address(unbox_ival_0(v_8)))) ==>
    1 > 1
  // Termination condition of m6i_iospec_ord (94:50).
  assert false &&
    (s_4 != null &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_4)) ==
    ival_iv_IO_msg(unbox_ival_0(v_8)) &&
    addrB_3 == ival_iv_IO_address(unbox_ival_0(v_8)))) ==>
    false
  // Termination measure of m6i_iospec_ord (94:50).
  assert false &&
    (s_4 != null &&
    (init_run_state_type_init_run_state_obuf(unbox_init_run_state_type_0(s_4)) ==
    ival_iv_IO_msg(unbox_ival_0(v_8)) &&
    addrB_3 == ival_iv_IO_address(unbox_ival_0(v_8)))) ==>
    1 > 1
}

method m6i_iospec_ord__termination_check(t_6: Ref, s_5: Ref, A_4: Int, B_5: Int,
  Ra_4: Ref, addrB_4: Ref)
  requires issubtype(typeof(t_6), Place())
  requires s_5 == null || issubtype(typeof(s_5), init_run_state())
  requires issubtype(typeof(Ra_4), uid())
  requires issubtype(typeof(addrB_4), str())
{
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of m6i_init_start (104:12).
  assert false ==> false
  // Termination measure of m6i_init_start (104:12).
  assert false ==> 1 > 1
  // Termination condition of m6i_init_put_M1 (105:12).
  assert false ==> false
  // Termination measure of m6i_init_put_M1 (105:12).
  assert false ==> 1 > 1
  // Termination condition of m6i_init_get_M2 (106:12).
  assert false ==> false
  // Termination measure of m6i_init_get_M2 (106:12).
  assert false ==> 1 > 1
  // Termination condition of m6i_recv (107:12).
  assert false ==> false
  // Termination measure of m6i_recv (107:12).
  assert false ==> 1 > 1
  // Termination condition of m6i_send (108:12).
  assert false ==> false
  // Termination measure of m6i_send (108:12).
  assert false ==> 1 > 1
}

method m6r_resp_start__termination_check(t_7: Ref, s_6: Ref, B_6: Int, Rb_0: Ref)
  requires issubtype(typeof(t_7), Place())
  requires s_6 == null || issubtype(typeof(s_6), resp_run_state())
  requires issubtype(typeof(Rb_0), uid())
{
  var v_9: Ref
  inhale issubtype(typeof(v_9), rv_Unit())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of B_m5r_resp_start (123:24).
  assert false && s_6 == null ==> true
  // Termination measure of B_m5r_resp_start (123:24).
  assert false && s_6 == null ==> 1 > 1
  // Termination condition of m6r_iospec_ord (124:24).
  assert false && s_6 == null ==> false
  // Termination measure of m6r_iospec_ord (124:24).
  assert false && s_6 == null ==> 1 > 1
}

method m6r_resp_get_M1__termination_check(t_8: Ref, s_7: Ref, B_7: Int, Rb_1: Ref)
  requires issubtype(typeof(t_8), Place())
  requires s_7 == null || issubtype(typeof(s_7), resp_run_state())
  requires issubtype(typeof(Rb_1), uid())
{
  var v_10: Ref
  inhale issubtype(typeof(v_10), rv_Int())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of B_m5r_resp_get_M1 (142:24).
  assert false &&
    (s_7 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_7)) ==
    PSeq___create__(Seq(__prim__int___box__(B_7)), int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_7)) ==
    EMPTY_STORE() &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_7)) ==
    null &&
    (PSet___contains__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(s_7)),
    PSeq___create__(Seq(rval_rv_Int_address(unbox_rval_0(v_10)), rval_rv_Int_msg(unbox_rval_0(v_10))),
    object())) &&
    (alpha(rval_rv_Int_msg(unbox_rval_0(v_10))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_10))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_7))),
    unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_10)))))))))) &&
    rval_rv_Int_n1(unbox_rval_0(v_10)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_1, 0)))))))) ==>
    true
  // Termination measure of B_m5r_resp_get_M1 (142:24).
  assert false &&
    (s_7 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_7)) ==
    PSeq___create__(Seq(__prim__int___box__(B_7)), int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_7)) ==
    EMPTY_STORE() &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_7)) ==
    null &&
    (PSet___contains__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(s_7)),
    PSeq___create__(Seq(rval_rv_Int_address(unbox_rval_0(v_10)), rval_rv_Int_msg(unbox_rval_0(v_10))),
    object())) &&
    (alpha(rval_rv_Int_msg(unbox_rval_0(v_10))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_10))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_7))),
    unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_10)))))))))) &&
    rval_rv_Int_n1(unbox_rval_0(v_10)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_1, 0)))))))) ==>
    1 > 1
  // Termination condition of m6r_iospec_ord (143:24).
  assert false &&
    (s_7 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_7)) ==
    PSeq___create__(Seq(__prim__int___box__(B_7)), int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_7)) ==
    EMPTY_STORE() &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_7)) ==
    null &&
    (PSet___contains__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(s_7)),
    PSeq___create__(Seq(rval_rv_Int_address(unbox_rval_0(v_10)), rval_rv_Int_msg(unbox_rval_0(v_10))),
    object())) &&
    (alpha(rval_rv_Int_msg(unbox_rval_0(v_10))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_10))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_7))),
    unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_10)))))))))) &&
    rval_rv_Int_n1(unbox_rval_0(v_10)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_1, 0)))))))) ==>
    false
  // Termination measure of m6r_iospec_ord (143:24).
  assert false &&
    (s_7 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_7)) ==
    PSeq___create__(Seq(__prim__int___box__(B_7)), int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_7)) ==
    EMPTY_STORE() &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_7)) ==
    null &&
    (PSet___contains__(resp_run_state_type_resp_run_state_ibuf(unbox_resp_run_state_type_0(s_7)),
    PSeq___create__(Seq(rval_rv_Int_address(unbox_rval_0(v_10)), rval_rv_Int_msg(unbox_rval_0(v_10))),
    object())) &&
    (alpha(rval_rv_Int_msg(unbox_rval_0(v_10))) ==
    box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_10))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Agent(B_7))),
    unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_10)))))))))) &&
    rval_rv_Int_n1(unbox_rval_0(v_10)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_1, 0)))))))) ==>
    1 > 1
}

method m6r_resp_put_M2__termination_check(t_9: Ref, s_8: Ref, B_8: Int, Rb_2: Ref)
  requires issubtype(typeof(t_9), Place())
  requires s_8 == null || issubtype(typeof(s_8), resp_run_state())
  requires issubtype(typeof(Rb_2), uid())
{
  var v_11: Ref
  inhale issubtype(typeof(v_11), rv_Int())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of B_m5r_resp_put_M2 (161:24).
  assert false &&
    (s_8 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(__prim__int___box__(B_8), __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_11)))),
    int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    aNon()) &&
    (resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_8)) ==
    null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_8)) ==
    rval_rv_Int_address(unbox_rval_0(v_11)) &&
    (rval_rv_Int_n1(unbox_rval_0(v_11)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_2, 0)) &&
    alpha(rval_rv_Int_msg(unbox_rval_0(v_11))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_8)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n1(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_11))))))))))))))))))) ==>
    true
  // Termination measure of B_m5r_resp_put_M2 (161:24).
  assert false &&
    (s_8 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(__prim__int___box__(B_8), __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_11)))),
    int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    aNon()) &&
    (resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_8)) ==
    null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_8)) ==
    rval_rv_Int_address(unbox_rval_0(v_11)) &&
    (rval_rv_Int_n1(unbox_rval_0(v_11)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_2, 0)) &&
    alpha(rval_rv_Int_msg(unbox_rval_0(v_11))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_8)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n1(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_11))))))))))))))))))) ==>
    1 > 1
  // Termination condition of m6r_iospec_ord (162:24).
  assert false &&
    (s_8 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(__prim__int___box__(B_8), __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_11)))),
    int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    aNon()) &&
    (resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_8)) ==
    null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_8)) ==
    rval_rv_Int_address(unbox_rval_0(v_11)) &&
    (rval_rv_Int_n1(unbox_rval_0(v_11)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_2, 0)) &&
    alpha(rval_rv_Int_msg(unbox_rval_0(v_11))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_8)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n1(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_11))))))))))))))))))) ==>
    false
  // Termination measure of m6r_iospec_ord (162:24).
  assert false &&
    (s_8 != null &&
    (resp_run_state_type_resp_run_state_agts(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(__prim__int___box__(B_8), __prim__int___box__(rval_rv_Int_agent(unbox_rval_0(v_11)))),
    int()) &&
    (resp_run_state_type_resp_run_state_store(unbox_resp_run_state_type_0(s_8)) ==
    PSeq___create__(Seq(box_atom_0(atom_aNon(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    aNon()) &&
    (resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_8)) ==
    null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_8)) ==
    rval_rv_Int_address(unbox_rval_0(v_11)) &&
    (rval_rv_Int_n1(unbox_rval_0(v_11)) ==
    box_FreshType_0(FreshType_fresh(box_role_0(role_Resp()), Rb_2, 0)) &&
    alpha(rval_rv_Int_msg(unbox_rval_0(v_11))) ==
    box_msg_1(msg_Crypt(box_key_2(key_ltK(box_ltkey_0(ltkey_privK(B_8)))), unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n1(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_MPair(unbox_msg_1(box_msg_1(msg_Nonce(rval_rv_Int_n2(unbox_rval_0(v_11))))),
    unbox_msg_1(box_msg_1(msg_Agent(rval_rv_Int_agent(unbox_rval_0(v_11))))))))))))))))))) ==>
    1 > 1
}

method m6r_resp_recv__termination_check(t_10: Ref, s_9: Ref, B_9: Int, Rb_3: Ref)
  requires issubtype(typeof(t_10), Place())
  requires s_9 == null || issubtype(typeof(s_9), resp_run_state())
  requires issubtype(typeof(Rb_3), uid())
{
  var v_12: Ref
  inhale issubtype(typeof(v_12), rv_Unit())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of UDPr_receive (178:24).
  assert false && s_9 != null ==> false
  // Termination measure of UDPr_receive (178:24).
  assert false && s_9 != null ==> 1 > 1
  // Termination condition of m6r_iospec_ord (179:24).
  assert false && s_9 != null ==> false
  // Termination measure of m6r_iospec_ord (179:24).
  assert false && s_9 != null ==> 1 > 1
}

method m6r_resp_send__termination_check(t_11: Ref, s_10: Ref, B_10: Int, Rb_4: Ref)
  requires issubtype(typeof(t_11), Place())
  requires s_10 == null || issubtype(typeof(s_10), resp_run_state())
  requires issubtype(typeof(Rb_4), uid())
{
  var v_13: Ref
  inhale issubtype(typeof(v_13), rv_IO())
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of UDPr_send (195:34).
  assert false &&
    (s_10 != null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_address(unbox_rval_0(v_13)) &&
    resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_msg(unbox_rval_0(v_13)))) ==>
    true
  // Termination measure of UDPr_send (195:34).
  assert false &&
    (s_10 != null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_address(unbox_rval_0(v_13)) &&
    resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_msg(unbox_rval_0(v_13)))) ==>
    1 > 1
  // Termination condition of m6r_iospec_ord (195:61).
  assert false &&
    (s_10 != null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_address(unbox_rval_0(v_13)) &&
    resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_msg(unbox_rval_0(v_13)))) ==>
    false
  // Termination measure of m6r_iospec_ord (195:61).
  assert false &&
    (s_10 != null &&
    (resp_run_state_type_resp_run_state_addrA(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_address(unbox_rval_0(v_13)) &&
    resp_run_state_type_resp_run_state_obuf(unbox_resp_run_state_type_0(s_10)) ==
    rval_rv_IO_msg(unbox_rval_0(v_13)))) ==>
    1 > 1
}

method m6r_iospec_ord__termination_check(t_12: Ref, s_11: Ref, B_11: Int, Rb_5: Ref)
  requires issubtype(typeof(t_12), Place())
  requires s_11 == null || issubtype(typeof(s_11), resp_run_state())
  requires issubtype(typeof(Rb_5), uid())
{
  // Termination measure must be positive.
  assert false ==> 1 > 0
  // Termination condition of m6r_resp_start (205:12).
  assert false ==> false
  // Termination measure of m6r_resp_start (205:12).
  assert false ==> 1 > 1
  // Termination condition of m6r_resp_get_M1 (206:12).
  assert false ==> false
  // Termination measure of m6r_resp_get_M1 (206:12).
  assert false ==> 1 > 1
  // Termination condition of m6r_resp_put_M2 (207:12).
  assert false ==> false
  // Termination measure of m6r_resp_put_M2 (207:12).
  assert false ==> 1 > 1
  // Termination condition of m6r_resp_send (208:12).
  assert false ==> false
  // Termination measure of m6r_resp_send (208:12).
  assert false ==> 1 > 1
  // Termination condition of m6r_resp_recv (209:12).
  assert false ==> false
  // Termination measure of m6r_resp_recv (209:12).
  assert false ==> 1 > 1
}

method B_m5i_init_start__termination_check(t_pre_9: Ref, v_30: Ref)
  requires issubtype(typeof(t_pre_9), Place())
  requires issubtype(typeof(v_30), ival())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5i_init_put_M1__termination_check(t_pre_10: Ref, v_31: Ref)
  requires issubtype(typeof(t_pre_10), Place())
  requires issubtype(typeof(v_31), ival())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5i_init_get_M2__termination_check(t_pre_11: Ref, v_32: Ref)
  requires issubtype(typeof(t_pre_11), Place())
  requires issubtype(typeof(v_32), ival())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5i_skip__termination_check(t_pre_12: Ref, v_33: Ref)
  requires issubtype(typeof(t_pre_12), Place())
  requires issubtype(typeof(v_33), ival())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5r_resp_start__termination_check(t_pre_13: Ref, v_34: Ref)
  requires issubtype(typeof(t_pre_13), Place())
  requires issubtype(typeof(v_34), rval())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5r_resp_get_M1__termination_check(t_pre_14: Ref, v_35: Ref)
  requires issubtype(typeof(t_pre_14), Place())
  requires issubtype(typeof(v_35), rval())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5r_resp_put_M2__termination_check(t_pre_15: Ref, v_36: Ref)
  requires issubtype(typeof(t_pre_15), Place())
  requires issubtype(typeof(v_36), rval())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method B_m5r_skip__termination_check(t_pre_16: Ref, v_37: Ref)
  requires issubtype(typeof(t_pre_16), Place())
  requires issubtype(typeof(v_37), rval())
{
  // Termination measure must be positive.
  assert true ==> 1 > 0
}

method timeout_timeoutframe_check(self_11: Ref)
  requires true && issubtype(typeof(self_11), socket())
  requires issubtype(typeof(self_11), socket())
  requires true && true


method sock_sockframe_check(self_12: Ref)
  requires true && issubtype(typeof(self_12), socket())
  requires issubtype(typeof(self_12), socket())
  requires true && true


method peer_peerframe_check(self_13: Ref)
  requires true && issubtype(typeof(self_13), socket())
  requires issubtype(typeof(self_13), socket())
  requires true && true


method seed_pred_seed_predframe_check(self_21: Ref)
  requires true && issubtype(typeof(self_21), SigningKey())
  requires issubtype(typeof(self_21), SigningKey())
  requires true && true


method key_pred_key_predframe_check(self_25: Ref)
  requires true && issubtype(typeof(self_25), VerifyKey())
  requires issubtype(typeof(self_25), VerifyKey())
  requires true && true


method print(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm,
  r: Ref)
  returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires Measure$check(_caller_measures_154, _cthread_154, 1)
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires (Low(r): Bool)
  requires (LowEvent(): Bool)
  requires [true, Measure$check(_caller_measures_154, _cthread_154, 1)]
  ensures [(forperm
      _r_73: Ref [_r_73.MustReleaseBounded] :: Level(_r_73) <=
      _current_wait_level_154) &&
    ((forperm
      _r_73: Ref [_r_73.MustReleaseUnbounded] :: Level(_r_73) <=
      _current_wait_level_154) &&
    _residue_154 <= _current_wait_level_154),
    true]
