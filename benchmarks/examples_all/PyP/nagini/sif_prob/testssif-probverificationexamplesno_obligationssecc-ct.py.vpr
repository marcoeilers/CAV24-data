domain PyType  {
  
  function extends_(sub: PyType, super: PyType): Bool 
  
  function issubtype(sub: PyType, super: PyType): Bool 
  
  function isnotsubtype(sub: PyType, super: PyType): Bool 
  
  function tuple_args(t: PyType): Seq[PyType] 
  
  function typeof(obj: Ref): PyType 
  
  function get_basic(t: PyType): PyType 
  
  function union_type_1(arg_1: PyType): PyType 
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType 
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType 
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType 
  
  unique function object(): PyType 
  
  unique function list_basic(): PyType 
  
  function list(arg0: PyType): PyType 
  
  function list_arg(typ: PyType, index: Int): PyType 
  
  unique function set_basic(): PyType 
  
  function set(arg0: PyType): PyType 
  
  function set_arg(typ: PyType, index: Int): PyType 
  
  unique function dict_basic(): PyType 
  
  function dict(arg0: PyType, arg1: PyType): PyType 
  
  function dict_arg(typ: PyType, index: Int): PyType 
  
  unique function int(): PyType 
  
  unique function float(): PyType 
  
  unique function bool(): PyType 
  
  unique function NoneType(): PyType 
  
  unique function Exception(): PyType 
  
  unique function ConnectionRefusedError(): PyType 
  
  unique function traceback(): PyType 
  
  unique function str(): PyType 
  
  unique function bytes(): PyType 
  
  unique function tuple_basic(): PyType 
  
  function tuple(args: Seq[PyType]): PyType 
  
  function tuple_arg(typ: PyType, index: Int): PyType 
  
  unique function PSeq_basic(): PyType 
  
  function PSeq(arg0: PyType): PyType 
  
  function PSeq_arg(typ: PyType, index: Int): PyType 
  
  unique function PSet_basic(): PyType 
  
  function PSet(arg0: PyType): PyType 
  
  function PSet_arg(typ: PyType, index: Int): PyType 
  
  unique function PMultiset_basic(): PyType 
  
  function PMultiset(arg0: PyType): PyType 
  
  function PMultiset_arg(typ: PyType, index: Int): PyType 
  
  unique function slice(): PyType 
  
  unique function range_0(): PyType 
  
  unique function Iterator_basic(): PyType 
  
  function Iterator(arg0: PyType): PyType 
  
  function Iterator_arg(typ: PyType, index: Int): PyType 
  
  unique function Thread_0(): PyType 
  
  unique function LevelType(): PyType 
  
  unique function type(): PyType 
  
  unique function Place(): PyType 
  
  unique function __prim__Seq_type(): PyType 
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), issubtype(middle, super) }
      issubtype(sub, middle) && issubtype(middle, super) ==>
      issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType ::
      { issubtype(type_, type_) }
      issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType ::
      { extends_(sub, sub2) }
      extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref ::
      { typeof(r) }
      issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType ::
      { issubtype(type_, object()) }
      issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType ::
      { extends_(sub, super), extends_(sub2, super) }
      extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==>
      isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType ::
      { issubtype(sub, super) }
      { issubtype(super, sub) }
      issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), isnotsubtype(middle, super) }
      issubtype(sub, middle) && isnotsubtype(middle, super) ==>
      !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType ::
      { tuple(seq), tuple_arg(Z, i) }
      issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType ::
      { issubtype(Z, tuple(seq)) }
      issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] ::seq1 != seq2 &&
      |seq1| == |seq2| &&
      (forall i: Int ::i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==>
      issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(X, union_type_1(arg_1)) }
      issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(X, union_type_2(arg_1, arg_2)) }
      issubtype(X, union_type_2(arg_1, arg_2)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) }
      issubtype(X, union_type_3(arg_1, arg_2, arg_3)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) }
      issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3) ||
      issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(union_type_1(arg_1), X) }
      issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(union_type_2(arg_1, arg_2), X) }
      issubtype(union_type_2(arg_1, arg_2), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(union_type_3(arg_1, arg_2, arg_3), X) }
      issubtype(union_type_3(arg_1, arg_2, arg_3), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) }
      issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X) &&
      issubtype(arg_4, X)))
  }
  
  axiom subtype_list {
    (forall var0: PyType ::
      { list(var0) }
      extends_(list(var0), object()) &&
      get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType ::
      { list(arg0), list_arg(Z, 0) }
      issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType ::
      { set(var0) }
      extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType ::
      { set(arg0), set_arg(Z, 0) }
      issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType ::
      { dict(var0, var1) }
      extends_(dict(var0, var1), object()) &&
      get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 0) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 1) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) &&
    get_basic(Exception()) == Exception()
  }
  
  axiom subtype_ConnectionRefusedError {
    extends_(ConnectionRefusedError(), Exception()) &&
    get_basic(ConnectionRefusedError()) == ConnectionRefusedError()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) &&
    get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] ::
      { tuple(args) }
      ((forall e: PyType ::(e in args) ==> e == object()) ==>
      extends_(tuple(args), object())) &&
      get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_PSeq {
    (forall var0: PyType ::
      { PSeq(var0) }
      extends_(PSeq(var0), object()) &&
      get_basic(PSeq(var0)) == PSeq_basic())
  }
  
  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSeq(arg0), PSeq_arg(Z, 0) }
      issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType ::
      { PSet(var0) }
      extends_(PSet(var0), object()) &&
      get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSet(arg0), PSet_arg(Z, 0) }
      issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PMultiset {
    (forall var0: PyType ::
      { PMultiset(var0) }
      extends_(PMultiset(var0), object()) &&
      get_basic(PMultiset(var0)) == PMultiset_basic())
  }
  
  axiom PMultiset_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PMultiset(arg0), PMultiset_arg(Z, 0) }
      issubtype(Z, PMultiset(arg0)) ==> PMultiset_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range_0 {
    extends_(range_0(), object()) && get_basic(range_0()) == range_0()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType ::
      { Iterator(var0) }
      extends_(Iterator(var0), object()) &&
      get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType ::
      { Iterator(arg0), Iterator_arg(Z, 0) }
      issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_LevelType {
    extends_(LevelType(), object()) &&
    get_basic(LevelType()) == LevelType()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype___prim__Seq_type {
    extends_(__prim__Seq_type(), object()) &&
    get_basic(__prim__Seq_type()) == __prim__Seq_type()
  }
}

domain SIFDomain[T]  {
  
  function Low(x: T): Bool 
  
  function LowEvent(): Bool 
}

domain _list_ce_helper  {
  
  function seq_ref_length(___s: Seq[Ref]): Int 
  
  function seq_ref_index(___s: Seq[Ref], i: Int): Ref 
  
  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }
  
  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int ::
      { ___s[___i] }
      ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$  {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$ 
  
  function Measure$guard(m: Measure$): Bool 
  
  function Measure$key(m: Measure$): Ref 
  
  function Measure$value(m: Measure$): Int 
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$guard(Measure$create(g, k, v)) }
      Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$key(Measure$create(g, k, v)) }
      Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$value(Measure$create(g, k, v)) }
      Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain __MSHelper[T$]  {
  
  function __toMS(s: Seq[T$]): Multiset[T$] 
  
  axiom __toMS_def_1 {
    (__toMS(Seq[T$]()): Multiset[T$]) == Multiset[T$]()
  }
  
  axiom __toMS_def_2 {
    (forall __t: T$ ::
      { (__toMS(Seq(__t)): Multiset[T$]) }
      (__toMS(Seq(__t)): Multiset[T$]) == Multiset(__t))
  }
  
  axiom __toMS_def_3 {
    (forall __ss1: Seq[T$], __ss2: Seq[T$] ::
      { (__toMS(__ss1 ++ __ss2): Multiset[T$]) }
      (__toMS(__ss1 ++ __ss2): Multiset[T$]) ==
      ((__toMS(__ss1): Multiset[T$]) union (__toMS(__ss2): Multiset[T$])))
  }
  
  axiom __toMS_def_4 {
    (forall __ss1: Seq[T$] ::
      { (__toMS(__ss1): Multiset[T$]) }
      |(__toMS(__ss1): Multiset[T$])| == |__ss1|)
  }
}

domain _Name  {
  
  function _combine(n1: _Name, n2: _Name): _Name 
  
  function _single(n: Int): _Name 
  
  function _get_combined_prefix(n: _Name): _Name 
  
  function _get_combined_name(n: _Name): _Name 
  
  function _get_value(n: _Name): Int 
  
  function _name_type(n: _Name): Bool 
  
  function _is_single(n: _Name): Bool 
  
  function _is_combined(n: _Name): Bool 
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom compose_single {
    (forall n: _Name ::
      { _get_value(n) }
      _is_single(n) ==> n == _single(_get_value(n)))
  }
  
  axiom type_of_single {
    (forall i: Int :: { _single(i) } _name_type(_single(i)))
  }
  
  axiom decompose_combined {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      _get_combined_prefix(_combine(n1, n2)) == n1 &&
      _get_combined_name(_combine(n1, n2)) == n2)
  }
  
  axiom compose_combined {
    (forall n: _Name ::
      { _get_combined_prefix(n) }
      { _get_combined_name(n) }
      _is_combined(n) ==>
      n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom type_of_composed {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      !_name_type(_combine(n1, n2)))
  }
  
  axiom type_is_single {
    (forall n: _Name :: { _name_type(n) } _name_type(n) == _is_single(n))
  }
  
  axiom type_is_combined {
    (forall n: _Name ::
      { _name_type(n) }
      !_name_type(n) == _is_combined(n))
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
}

domain PredicateInstance  {
  
  
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Map[Ref,Ref]

field dict_accp: Map[Ref,Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function abs_choose(c: Ref, a: Ref, b: Ref): Ref
  requires issubtype(typeof(c), bool())
  requires issubtype(typeof(a), int())
  requires issubtype(typeof(b), int())
  ensures issubtype(typeof(result), int())
{
  (let cond_0 ==
    (c) in
    (true && bool___unbox__(cond_0) ? a : b))
}

function abs_max_list(s: Ref): Ref
  requires issubtype(typeof(s), PSeq(int()))
  requires int___gt__(PSeq___len__(s), 0)
  ensures issubtype(typeof(result), int())
{
  (let cond_1_0 ==
    (__prim__bool___box__(int___eq__(__prim__int___box__(PSeq___len__(s)), __prim__int___box__(1)))) in
    (true && bool___unbox__(cond_1_0) ?
      PSeq___getitem__(s, __prim__int___box__(0)) :
      __prim__int___box__(max(PSeq___getitem__(s, __prim__int___box__(0)), abs_max_list(PSeq_drop(s,
      1))))))
}

function __file__(): Ref


function __name__(): Ref


function __prim__int___box__(prim: Int): Ref
  decreases _
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


function int___unbox__(box: Ref): Int
  decreases _
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==>
    __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==>
    __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  decreases _
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  decreases _
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function int___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool
  decreases _
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool
  decreases _
{
  self > other
}

function int___lt__(self: Int, other: Int): Bool
  decreases _
{
  self < other
}

function int___add__(self: Int, other: Int): Int
  decreases _
{
  self + other
}

function int___sub__(self: Int, other: Int): Int
  decreases _
{
  self - other
}

function int___mul__(self: Int, other: Int): Int
  decreases _
{
  self * other
}

function max(a: Ref, b: Ref): Int
  decreases _
  requires issubtype(typeof(a), int()) && issubtype(typeof(b), int()) ||
    issubtype(typeof(a), list(int())) && b == null
  requires issubtype(typeof(a), list(int())) ==>
    acc(a.list_acc, 1 / 100) && list___len__(a) > 0
  ensures issubtype(typeof(a), int()) ==>
    result ==
    (int___unbox__(a) > int___unbox__(b) ?
      int___unbox__(a) :
      int___unbox__(b))
  ensures issubtype(typeof(a), list(int())) ==>
    list___contains__(a, __prim__int___box__(result))


function max_0(a: Ref, b: Ref): Int
  decreases _
  requires issubtype(typeof(a), int()) && issubtype(typeof(b), int()) ||
    issubtype(typeof(a), list(int())) && b == null
  requires issubtype(typeof(a), list(int())) ==>
    acc(a.list_accp, 1 / 100) && list___len___0(a) > 0
  ensures issubtype(typeof(a), int()) ==>
    result ==
    (int___unbox__(a) > int___unbox__(b) ?
      int___unbox__(a) :
      int___unbox__(b))
  ensures issubtype(typeof(a), list(int())) ==>
    list___contains___0(a, __prim__int___box__(result))


function list___contains__(self: Ref, item: Ref): Bool
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard)
  ensures result == (item in self.list_acc)


function list___contains___0(self: Ref, item: Ref): Bool
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_accp, wildcard)
  ensures result == (item in self.list_accp)


function list___len__(self: Ref): Int
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard)
{
  |self.list_acc|
}

function list___len___0(self: Ref): Int
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_accp, wildcard)
{
  |self.list_accp|
}

function list___getitem__(self: Ref, key: Ref): Ref
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_acc, wildcard)
  requires (let ln ==
      (list___len__(self)) in
      (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) &&
      (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result ==
    (int___unbox__(key) >= 0 ?
      self.list_acc[int___unbox__(key)] :
      self.list_acc[list___len__(self) + int___unbox__(key)])
  ensures issubtype(typeof(result), list_arg(typeof(self), 0))


function list___getitem___0(self: Ref, key: Ref): Ref
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_accp, wildcard)
  requires (let ln ==
      (list___len___0(self)) in
      (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) &&
      (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result ==
    (int___unbox__(key) >= 0 ?
      self.list_accp[int___unbox__(key)] :
      self.list_accp[list___len___0(self) + int___unbox__(key)])
  ensures issubtype(typeof(result), list_arg(typeof(self), 0))


function Level(r: Ref): Perm
  decreases _


function PSeq___create__(prim: Seq[Ref], cont_type: PyType): Ref
  decreases _
  ensures typeof(result) == PSeq(cont_type)
  ensures PSeq___sil_seq__(result) == prim


function PSeq___sil_seq__(box: Ref): Seq[Ref]
  decreases _
  requires issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))


function PSeq___getitem__(self: Ref, index: Ref): Ref
  decreases _
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  requires issubtype(typeof(index), int())
  requires (let ln ==
      (PSeq___len__(self)) in
      (int___unbox__(index) < 0 ==> int___unbox__(index) >= -ln) &&
      (int___unbox__(index) >= 0 ==> int___unbox__(index) < ln))
  ensures result ==
    (int___unbox__(index) >= 0 ?
      PSeq___sil_seq__(self)[int___unbox__(index)] :
      PSeq___sil_seq__(self)[PSeq___len__(self) + int___unbox__(index)])
  ensures issubtype(typeof(result), PSeq_arg(typeof(self), 0))


function PSeq___len__(self: Ref): Int
  decreases _
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  ensures result == |PSeq___sil_seq__(self)|


function PSeq_drop(self: Ref, no: Int): Ref
  decreases _
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  ensures result ==
    PSeq___create__(PSeq___sil_seq__(self)[no..], PSeq_arg(typeof(self), 0))


function PSeq___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  requires issubtype(typeof(other), PSeq(PSeq_arg(typeof(other), 0)))
  requires PSeq_arg(typeof(self), 0) == PSeq_arg(typeof(other), 0)
  ensures result == (PSeq___sil_seq__(self) == PSeq___sil_seq__(other))
  ensures result ==> self == other


function str___len__(self: Ref): Int
  decreases _
  ensures result >= 0


function str___val__(self: Ref): Int
  decreases _


function str___create__(len: Int, value: Int): Ref
  decreases _
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


function str___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other)


predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method choose_ct(p1: Bool, p2: Bool, c_0: Ref, c_0_0: Ref, a_0: Ref, a_0_0: Ref,
  b_0: Ref, b_0_0: Ref)
  returns (_res: Ref, _res_0: Ref)
  requires (p1 ==> issubtype(typeof(c_0), bool())) &&
    (p2 ==> issubtype(typeof(c_0_0), bool()))
  requires (p1 ==> issubtype(typeof(a_0), int())) &&
    (p2 ==> issubtype(typeof(a_0_0), int()))
  requires (p1 ==> issubtype(typeof(b_0), int())) &&
    (p2 ==> issubtype(typeof(b_0_0), int()))
  ensures (p1 ==> issubtype(typeof(_res), int())) &&
    (p2 ==> issubtype(typeof(_res_0), int()))
  ensures (p1 ==> int___eq__(_res, abs_choose(c_0, a_0, b_0))) &&
    (p2 ==> int___eq__(_res_0, abs_choose(c_0_0, a_0_0, b_0_0)))
{
  var ret1: Bool
  var ret2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  {
    var _err: Ref
    var _err_0: Ref
    var c_2: Ref
    var c_2_0: Ref
    var a_5: Ref
    var a_5_0: Ref
    var b_4: Ref
    var b_4_0: Ref
    if (p1 && !ret1) {
      _res := null
      _err := null
      c_2 := c_0
      a_5 := a_0
      b_4 := b_0
      _res := __prim__int___box__(int___add__(int___mul__(int___unbox__(c_2),
        int___unbox__(a_5)), int___mul__(int___sub__(1, int___unbox__(c_2)),
        int___unbox__(b_4))))
      ret1 := true
    }
    if (p2 && !ret2) {
      _res_0 := null
      _err_0 := null
      c_2_0 := c_0_0
      a_5_0 := a_0_0
      b_4_0 := b_0_0
      _res_0 := __prim__int___box__(int___add__(int___mul__(int___unbox__(c_2_0),
        int___unbox__(a_5_0)), int___mul__(int___sub__(1, int___unbox__(c_2_0)),
        int___unbox__(b_4_0))))
      ret2 := true
    }
    exhale true
  }
}

method not_ct(p1_0: Bool, p2_0: Bool, a_1: Ref, a_1_0: Ref)
  returns (_res: Ref, _res_1: Ref)
  requires (p1_0 ==> issubtype(typeof(a_1), bool())) &&
    (p2_0 ==> issubtype(typeof(a_1_0), bool()))
  ensures (p1_0 ==> issubtype(typeof(_res), int())) &&
    (p2_0 ==> issubtype(typeof(_res_1), int()))
  ensures (p1_0 ==>
    int___eq__(_res, __prim__bool___box__(!bool___unbox__(a_1)))) &&
    (p2_0 ==>
    int___eq__(_res_1, __prim__bool___box__(!bool___unbox__(a_1_0))))
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_0
  ret1_0 := false
  ret2_0 := false
  {
    var _err: Ref
    var _err_1: Ref
    var a_6: Ref
    var a_6_0: Ref
    if (p1_0 && !ret1_0) {
      _res := null
      _err := null
      a_6 := a_1
      _res := __prim__int___box__(int___sub__(1, int___unbox__(a_6)))
      ret1_0 := true
    }
    if (p2_0 && !ret2_0) {
      _res_1 := null
      _err_1 := null
      a_6_0 := a_1_0
      _res_1 := __prim__int___box__(int___sub__(1, int___unbox__(a_6_0)))
      ret2_0 := true
    }
    exhale true
  }
}

method max_ct(p1_1: Bool, p2_1: Bool, a_2: Ref, a_2_0: Ref, b_1: Ref, b_1_0: Ref)
  returns (_res: Ref, _res_2: Ref)
  requires (p1_1 ==> issubtype(typeof(a_2), int())) &&
    (p2_1 ==> issubtype(typeof(a_2_0), int()))
  requires (p1_1 ==> issubtype(typeof(b_1), int())) &&
    (p2_1 ==> issubtype(typeof(b_1_0), int()))
  ensures (p1_1 ==> issubtype(typeof(_res), int())) &&
    (p2_1 ==> issubtype(typeof(_res_2), int()))
  ensures (p1_1 ==>
    int___eq__(_res, (int___gt__(int___unbox__(a_2), int___unbox__(b_1)) ?
      a_2 :
      b_1))) &&
    (p2_1 ==>
    int___eq__(_res_2, (int___gt__(int___unbox__(a_2_0), int___unbox__(b_1_0)) ?
      a_2_0 :
      b_1_0)))
{
  var ret1_1: Bool
  var ret2_1: Bool
  inhale p1_1
  ret1_1 := false
  ret2_1 := false
  {
    var _err: Ref
    var _err_2: Ref
    var a_7: Ref
    var a_7_0: Ref
    var b_5: Ref
    var b_5_0: Ref
    var choose_ct_res: Ref
    var choose_ct_res_1: Ref
    if (p1_1 && !ret1_1) {
      _res := null
      _err := null
      a_7 := a_2
      b_5 := b_1
    }
    if (p2_1 && !ret2_1) {
      _res_2 := null
      _err_2 := null
      a_7_0 := a_2_0
      b_5_0 := b_1_0
    }
    // Method call: choose_ct
  
    if (p1_1 && !ret1_1 || p2_1 && !ret2_1) {
      var tmp1: Ref
      var tmp2: Ref
      var tmp1_0: Ref
      var tmp2_0: Ref
      var tmp1_1: Ref
      var tmp2_1: Ref
      var tmp1_2: Ref
      var tmp2_2: Ref
      if (p1_1 && !ret1_1) {
        tmp1 := __prim__bool___box__(int___gt__(int___unbox__(a_7), int___unbox__(b_5)))
        tmp1_0 := a_7
        tmp1_1 := b_5
      }
      if (p2_1 && !ret2_1) {
        tmp2 := __prim__bool___box__(int___gt__(int___unbox__(a_7_0), int___unbox__(b_5_0)))
        tmp2_0 := a_7_0
        tmp2_1 := b_5_0
      }
      tmp1_2, tmp2_2 := choose_ct(p1_1 && !ret1_1, p2_1 && !ret2_1, tmp1, tmp2,
        tmp1_0, tmp2_0, tmp1_1, tmp2_1)
      if (p1_1 && !ret1_1) {
        choose_ct_res := tmp1_2
      }
      if (p2_1 && !ret2_1) {
        choose_ct_res_1 := tmp2_2
      }
    }
    if (p1_1 && !ret1_1) {
      _res := choose_ct_res
      ret1_1 := true
    }
    if (p2_1 && !ret2_1) {
      _res_2 := choose_ct_res_1
      ret2_1 := true
    }
    exhale true
  }
}

method min_ct(p1_2: Bool, p2_2: Bool, a_3: Ref, a_3_0: Ref, b_2: Ref, b_2_0: Ref)
  returns (_res: Ref, _res_3: Ref)
  requires (p1_2 ==> issubtype(typeof(a_3), int())) &&
    (p2_2 ==> issubtype(typeof(a_3_0), int()))
  requires (p1_2 ==> issubtype(typeof(b_2), int())) &&
    (p2_2 ==> issubtype(typeof(b_2_0), int()))
  ensures (p1_2 ==> issubtype(typeof(_res), int())) &&
    (p2_2 ==> issubtype(typeof(_res_3), int()))
  ensures (p1_2 ==>
    int___eq__(_res, (int___lt__(int___unbox__(a_3), int___unbox__(b_2)) ?
      a_3 :
      b_2))) &&
    (p2_2 ==>
    int___eq__(_res_3, (int___lt__(int___unbox__(a_3_0), int___unbox__(b_2_0)) ?
      a_3_0 :
      b_2_0)))
{
  var ret1_2: Bool
  var ret2_2: Bool
  inhale p1_2
  ret1_2 := false
  ret2_2 := false
  {
    var _err: Ref
    var _err_3: Ref
    var a_8: Ref
    var a_8_0: Ref
    var b_6: Ref
    var b_6_0: Ref
    var choose_ct_res_0: Ref
    var choose_ct_res_0_0: Ref
    if (p1_2 && !ret1_2) {
      _res := null
      _err := null
      a_8 := a_3
      b_6 := b_2
    }
    if (p2_2 && !ret2_2) {
      _res_3 := null
      _err_3 := null
      a_8_0 := a_3_0
      b_6_0 := b_2_0
    }
    // Method call: choose_ct
  
    if (p1_2 && !ret1_2 || p2_2 && !ret2_2) {
      var tmp1_3: Ref
      var tmp2_3: Ref
      var tmp1_4: Ref
      var tmp2_4: Ref
      var tmp1_5: Ref
      var tmp2_5: Ref
      var tmp1_6: Ref
      var tmp2_6: Ref
      if (p1_2 && !ret1_2) {
        tmp1_3 := __prim__bool___box__(int___lt__(int___unbox__(a_8), int___unbox__(b_6)))
        tmp1_4 := a_8
        tmp1_5 := b_6
      }
      if (p2_2 && !ret2_2) {
        tmp2_3 := __prim__bool___box__(int___lt__(int___unbox__(a_8_0), int___unbox__(b_6_0)))
        tmp2_4 := a_8_0
        tmp2_5 := b_6_0
      }
      tmp1_6, tmp2_6 := choose_ct(p1_2 && !ret1_2, p2_2 && !ret2_2, tmp1_3,
        tmp2_3, tmp1_4, tmp2_4, tmp1_5, tmp2_5)
      if (p1_2 && !ret1_2) {
        choose_ct_res_0 := tmp1_6
      }
      if (p2_2 && !ret2_2) {
        choose_ct_res_0_0 := tmp2_6
      }
    }
    if (p1_2 && !ret1_2) {
      _res := choose_ct_res_0
      ret1_2 := true
    }
    if (p2_2 && !ret2_2) {
      _res_3 := choose_ct_res_0_0
      ret2_2 := true
    }
    exhale true
  }
}

method memcmp_ct(p1_3: Bool, p2_3: Bool, l1: Ref, l1_1: Ref, l2: Ref, l2_1: Ref,
  i: Ref, i_3: Ref, n_0: Ref, n_0_0: Ref)
  returns (_res: Ref, _res_4: Ref)
  requires (p1_3 ==> issubtype(typeof(l1), list(int()))) &&
    (p2_3 ==> issubtype(typeof(l1_1), list(int())))
  requires (p1_3 ==> issubtype(typeof(l2), list(int()))) &&
    (p2_3 ==> issubtype(typeof(l2_1), list(int())))
  requires (p1_3 ==> issubtype(typeof(i), int())) &&
    (p2_3 ==> issubtype(typeof(i_3), int()))
  requires (p1_3 ==> issubtype(typeof(n_0), int())) &&
    (p2_3 ==> issubtype(typeof(n_0_0), int()))
  requires (p1_3 ==> acc(l1.list_acc, write)) &&
    (p2_3 ==> acc(l1_1.list_accp, write)) &&
    ((p1_3 ==> acc(l2.list_acc, write)) &&
    (p2_3 ==> acc(l2_1.list_accp, write)))
  requires (p1_3 ==> int___ge__(int___unbox__(n_0), 0)) &&
    (p2_3 ==> int___ge__(int___unbox__(n_0_0), 0)) &&
    ((p1_3 ==> int___ge__(int___unbox__(i), 0)) &&
    (p2_3 ==> int___ge__(int___unbox__(i_3), 0)))
  requires (p1_3 && p2_3 ==> n_0 == n_0_0) &&
    ((p1_3 ==>
    int___eq__(__prim__int___box__(list___len__(l1)), __prim__int___box__(int___add__(int___unbox__(i),
    int___unbox__(n_0))))) &&
    (p2_3 ==>
    int___eq__(__prim__int___box__(list___len___0(l1_1)), __prim__int___box__(int___add__(int___unbox__(i_3),
    int___unbox__(n_0_0))))) &&
    ((p1_3 ==>
    int___eq__(__prim__int___box__(list___len__(l2)), __prim__int___box__(int___add__(int___unbox__(i),
    int___unbox__(n_0))))) &&
    (p2_3 ==>
    int___eq__(__prim__int___box__(list___len___0(l2_1)), __prim__int___box__(int___add__(int___unbox__(i_3),
    int___unbox__(n_0_0)))))))
  ensures (p1_3 ==> issubtype(typeof(_res), int())) &&
    (p2_3 ==> issubtype(typeof(_res_4), int()))
  ensures (p1_3 ==> acc(l1.list_acc, write)) &&
    (p2_3 ==> acc(l1_1.list_accp, write)) &&
    ((p1_3 ==> acc(l2.list_acc, write)) &&
    (p2_3 ==> acc(l2_1.list_accp, write)))
  ensures (p1_3 ==>
    PSeq___create__(l1.list_acc, int()) ==
    old(PSeq___create__(l1.list_acc, int()))) &&
    (p2_3 ==>
    PSeq___create__(l1_1.list_accp, int()) ==
    old(PSeq___create__(l1_1.list_accp, int()))) &&
    ((p1_3 ==>
    PSeq___create__(l2.list_acc, int()) ==
    old(PSeq___create__(l2.list_acc, int()))) &&
    (p2_3 ==>
    PSeq___create__(l2_1.list_accp, int()) ==
    old(PSeq___create__(l2_1.list_accp, int()))))
  ensures (p1_3 ==>
    int___eq__(_res, __prim__bool___box__(!PSeq___eq__(PSeq_drop(PSeq___create__(l1.list_acc,
    int()), int___unbox__(i)), PSeq_drop(PSeq___create__(l2.list_acc, int()),
    int___unbox__(i)))))) &&
    (p2_3 ==>
    int___eq__(_res_4, __prim__bool___box__(!PSeq___eq__(PSeq_drop(PSeq___create__(l1_1.list_accp,
    int()), int___unbox__(i_3)), PSeq_drop(PSeq___create__(l2_1.list_accp, int()),
    int___unbox__(i_3))))))
{
  var ret1_3: Bool
  var ret2_3: Bool
  inhale p1_3
  ret1_3 := false
  ret2_3 := false
  {
    var _err: Ref
    var _err_4: Ref
    var a_4: Ref
    var a_4_0: Ref
    var b_3: Ref
    var b_3_0: Ref
    var c_1: Ref
    var c_1_0: Ref
    var d: Ref
    var d_0: Ref
    var m_0: Ref
    var m_0_0: Ref
    var l1_0: Ref
    var l1_0_0: Ref
    var l2_0: Ref
    var l2_0_0: Ref
    var i_1: Ref
    var i_1_0: Ref
    var n_2: Ref
    var n_2_0: Ref
    var memcmp_ct_res: Ref
    var memcmp_ct_res_1: Ref
    var max_ct_res: Ref
    var max_ct_res_1: Ref
    if (p1_3 && !ret1_3) {
      _res := null
      _err := null
      l1_0 := l1
      l2_0 := l2
      i_1 := i
      n_2 := n_0
    }
    if (p2_3 && !ret2_3) {
      _res_4 := null
      _err_4 := null
      l1_0_0 := l1_1
      l2_0_0 := l2_1
      i_1_0 := i_3
      n_2_0 := n_0_0
    }
    assert p1_3 && !ret1_3 && (p2_3 && !ret2_3) ==>
      !int___eq__(n_2, __prim__int___box__(0)) ==
      !int___eq__(n_2_0, __prim__int___box__(0))
    {
      var p1_4: Bool
      var p2_4: Bool
      var p3: Bool
      var p4: Bool
      p1_4 := p1_3 && !ret1_3 && !int___eq__(n_2, __prim__int___box__(0))
      p2_4 := p2_3 && !ret2_3 && !int___eq__(n_2_0, __prim__int___box__(0))
      p3 := p1_3 && !ret1_3 && !!int___eq__(n_2, __prim__int___box__(0))
      p4 := p2_3 && !ret2_3 && !!int___eq__(n_2_0, __prim__int___box__(0))
      if (p1_4 && !ret1_3) {
        a_4 := list___getitem__(l1_0, i_1)
        inhale _isDefined(3432289)
        b_3 := list___getitem__(l2_0, i_1)
        inhale _isDefined(3366754)
        c_1 := __prim__bool___box__(_checkDefined(a_4, 3432289) !=
          _checkDefined(b_3, 3366754))
        inhale _isDefined(3235683)
      }
      if (p2_4 && !ret2_3) {
        a_4_0 := list___getitem___0(l1_0_0, i_1_0)
        inhale true
        b_3_0 := list___getitem___0(l2_0_0, i_1_0)
        inhale true
        c_1_0 := __prim__bool___box__(a_4_0 != b_3_0)
        inhale true
      }
      // Method call: memcmp_ct
  
      if (p1_4 && !ret1_3 || p2_4 && !ret2_3) {
        var tmp1_7: Ref
        var tmp2_7: Ref
        var tmp1_8: Ref
        var tmp2_8: Ref
        var tmp1_9: Ref
        var tmp2_9: Ref
        var tmp1_10: Ref
        var tmp2_10: Ref
        var tmp1_11: Ref
        var tmp2_11: Ref
        if (p1_4 && !ret1_3) {
          tmp1_7 := l1_0
          tmp1_8 := l2_0
          tmp1_9 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
          tmp1_10 := __prim__int___box__(int___sub__(int___unbox__(n_2), 1))
        }
        if (p2_4 && !ret2_3) {
          tmp2_7 := l1_0_0
          tmp2_8 := l2_0_0
          tmp2_9 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
          tmp2_10 := __prim__int___box__(int___sub__(int___unbox__(n_2_0), 1))
        }
        tmp1_11, tmp2_11 := memcmp_ct(p1_4 && !ret1_3, p2_4 && !ret2_3, tmp1_7,
          tmp2_7, tmp1_8, tmp2_8, tmp1_9, tmp2_9, tmp1_10, tmp2_10)
        if (p1_4 && !ret1_3) {
          memcmp_ct_res := tmp1_11
        }
        if (p2_4 && !ret2_3) {
          memcmp_ct_res_1 := tmp2_11
        }
      }
      if (p1_4 && !ret1_3) {
        d := memcmp_ct_res
        inhale _isDefined(100)
      }
      if (p2_4 && !ret2_3) {
        d_0 := memcmp_ct_res_1
        inhale true
      }
      // Method call: max_ct
  
      if (p1_4 && !ret1_3 || p2_4 && !ret2_3) {
        var tmp1_12: Ref
        var tmp2_12: Ref
        var tmp1_13: Ref
        var tmp2_13: Ref
        var tmp1_14: Ref
        var tmp2_14: Ref
        if (p1_4 && !ret1_3) {
          tmp1_12 := _checkDefined(c_1, 3235683)
          tmp1_13 := _checkDefined(d, 100)
        }
        if (p2_4 && !ret2_3) {
          tmp2_12 := c_1_0
          tmp2_13 := d_0
        }
        tmp1_14, tmp2_14 := max_ct(p1_4 && !ret1_3, p2_4 && !ret2_3, tmp1_12,
          tmp2_12, tmp1_13, tmp2_13)
        if (p1_4 && !ret1_3) {
          max_ct_res := tmp1_14
        }
        if (p2_4 && !ret2_3) {
          max_ct_res_1 := tmp2_14
        }
      }
      if (p1_4 && !ret1_3) {
        m_0 := max_ct_res
        inhale _isDefined(3170157)
        _res := _checkDefined(m_0, 3170157)
        ret1_3 := true
      }
      if (p2_4 && !ret2_3) {
        m_0_0 := max_ct_res_1
        inhale true
        _res_4 := m_0_0
        ret2_3 := true
      }
      if (p3 && !ret1_3) {
        _res := __prim__bool___box__(false)
        ret1_3 := true
      }
      if (p4 && !ret2_3) {
        _res_4 := __prim__bool___box__(false)
        ret2_3 := true
      }
    }
    exhale true
  }
}

method max_list(p1_5: Bool, p2_5: Bool, l: Ref, l_1: Ref, i_0: Ref, i_0_0: Ref,
  n_1: Ref, n_1_0: Ref)
  returns (_res: Ref, _res_5: Ref)
  requires (p1_5 ==> issubtype(typeof(l), list(int()))) &&
    (p2_5 ==> issubtype(typeof(l_1), list(int())))
  requires (p1_5 ==> issubtype(typeof(i_0), int())) &&
    (p2_5 ==> issubtype(typeof(i_0_0), int()))
  requires (p1_5 ==> issubtype(typeof(n_1), int())) &&
    (p2_5 ==> issubtype(typeof(n_1_0), int()))
  requires (p1_5 ==> acc(l.list_acc, write)) &&
    (p2_5 ==> acc(l_1.list_accp, write))
  requires (p1_5 ==> int___gt__(int___unbox__(n_1), 0)) &&
    (p2_5 ==> int___gt__(int___unbox__(n_1_0), 0)) &&
    ((p1_5 ==> int___ge__(int___unbox__(i_0), 0)) &&
    (p2_5 ==> int___ge__(int___unbox__(i_0_0), 0)))
  requires (p1_5 && p2_5 ==> n_1 == n_1_0) &&
    ((p1_5 ==>
    int___eq__(__prim__int___box__(list___len__(l)), __prim__int___box__(int___add__(int___unbox__(i_0),
    int___unbox__(n_1))))) &&
    (p2_5 ==>
    int___eq__(__prim__int___box__(list___len___0(l_1)), __prim__int___box__(int___add__(int___unbox__(i_0_0),
    int___unbox__(n_1_0))))))
  ensures (p1_5 ==> issubtype(typeof(_res), int())) &&
    (p2_5 ==> issubtype(typeof(_res_5), int()))
  ensures (p1_5 ==> acc(l.list_acc, write)) &&
    (p2_5 ==> acc(l_1.list_accp, write))
  ensures (p1_5 ==>
    PSeq___create__(l.list_acc, int()) ==
    old(PSeq___create__(l.list_acc, int()))) &&
    (p2_5 ==>
    PSeq___create__(l_1.list_accp, int()) ==
    old(PSeq___create__(l_1.list_accp, int())))
  ensures (p1_5 ==>
    int___eq__(_res, abs_max_list(PSeq_drop(PSeq___create__(l.list_acc, int()),
    int___unbox__(i_0))))) &&
    (p2_5 ==>
    int___eq__(_res_5, abs_max_list(PSeq_drop(PSeq___create__(l_1.list_accp,
    int()), int___unbox__(i_0_0)))))
{
  var ret1_4: Bool
  var ret2_4: Bool
  inhale p1_5
  ret1_4 := false
  ret2_4 := false
  {
    var _err: Ref
    var _err_5: Ref
    var res: Ref
    var res_0: Ref
    var m_1: Ref
    var m_1_0: Ref
    var l_0: Ref
    var l_0_0: Ref
    var i_2: Ref
    var i_2_0: Ref
    var n_3: Ref
    var n_3_0: Ref
    var max_list_res: Ref
    var max_list_res_0: Ref
    var max_ct_res_0: Ref
    var max_ct_res_0_0: Ref
    if (p1_5 && !ret1_4) {
      _res := null
      _err := null
      l_0 := l
      i_2 := i_0
      n_3 := n_1
    }
    if (p2_5 && !ret2_4) {
      _res_5 := null
      _err_5 := null
      l_0_0 := l_1
      i_2_0 := i_0_0
      n_3_0 := n_1_0
    }
    assert p1_5 && !ret1_4 && (p2_5 && !ret2_4) ==>
      int___eq__(n_3, __prim__int___box__(1)) ==
      int___eq__(n_3_0, __prim__int___box__(1))
    {
      var p1_6: Bool
      var p2_6: Bool
      var p3_0: Bool
      var p4_0: Bool
      p1_6 := p1_5 && !ret1_4 && int___eq__(n_3, __prim__int___box__(1))
      p2_6 := p2_5 && !ret2_4 && int___eq__(n_3_0, __prim__int___box__(1))
      p3_0 := p1_5 && !ret1_4 && !int___eq__(n_3, __prim__int___box__(1))
      p4_0 := p2_5 && !ret2_4 && !int___eq__(n_3_0, __prim__int___box__(1))
      if (p1_6 && !ret1_4) {
        res := list___getitem__(l_0, i_2)
        inhale _isDefined(7562610)
        _res := _checkDefined(res, 7562610)
        ret1_4 := true
      }
      if (p2_6 && !ret2_4) {
        res_0 := list___getitem___0(l_0_0, i_2_0)
        inhale true
        _res_5 := res_0
        ret2_4 := true
      }
      // Method call: max_list
  
      if (p3_0 && !ret1_4 || p4_0 && !ret2_4) {
        var tmp1_15: Ref
        var tmp2_15: Ref
        var tmp1_16: Ref
        var tmp2_16: Ref
        var tmp1_17: Ref
        var tmp2_17: Ref
        var tmp1_18: Ref
        var tmp2_18: Ref
        if (p3_0 && !ret1_4) {
          tmp1_15 := l_0
          tmp1_16 := __prim__int___box__(int___add__(int___unbox__(i_2), 1))
          tmp1_17 := __prim__int___box__(int___sub__(int___unbox__(n_3), 1))
        }
        if (p4_0 && !ret2_4) {
          tmp2_15 := l_0_0
          tmp2_16 := __prim__int___box__(int___add__(int___unbox__(i_2_0), 1))
          tmp2_17 := __prim__int___box__(int___sub__(int___unbox__(n_3_0), 1))
        }
        tmp1_18, tmp2_18 := max_list(p3_0 && !ret1_4, p4_0 && !ret2_4, tmp1_15,
          tmp2_15, tmp1_16, tmp2_16, tmp1_17, tmp2_17)
        if (p3_0 && !ret1_4) {
          max_list_res := tmp1_18
        }
        if (p4_0 && !ret2_4) {
          max_list_res_0 := tmp2_18
        }
      }
      if (p3_0 && !ret1_4) {
        m_1 := max_list_res
        inhale _isDefined(3235693)
      }
      if (p4_0 && !ret2_4) {
        m_1_0 := max_list_res_0
        inhale true
      }
      assert (p3_0 && !ret1_4 ==>
        PSeq___eq__(PSeq_drop(PSeq_drop(PSeq___create__(l_0.list_acc, int()),
        int___unbox__(i_2)), 1), PSeq_drop(PSeq___create__(l_0.list_acc, int()),
        int___add__(int___unbox__(i_2), 1)))) &&
        (p4_0 && !ret2_4 ==>
        PSeq___eq__(PSeq_drop(PSeq_drop(PSeq___create__(l_0_0.list_accp, int()),
        int___unbox__(i_2_0)), 1), PSeq_drop(PSeq___create__(l_0_0.list_accp,
        int()), int___add__(int___unbox__(i_2_0), 1))))
      // Method call: max_ct
  
      if (p3_0 && !ret1_4 || p4_0 && !ret2_4) {
        var tmp1_19: Ref
        var tmp2_19: Ref
        var tmp1_20: Ref
        var tmp2_20: Ref
        var tmp1_21: Ref
        var tmp2_21: Ref
        if (p3_0 && !ret1_4) {
          tmp1_19 := list___getitem__(l_0, i_2)
          tmp1_20 := _checkDefined(m_1, 3235693)
        }
        if (p4_0 && !ret2_4) {
          tmp2_19 := list___getitem___0(l_0_0, i_2_0)
          tmp2_20 := m_1_0
        }
        tmp1_21, tmp2_21 := max_ct(p3_0 && !ret1_4, p4_0 && !ret2_4, tmp1_19,
          tmp2_19, tmp1_20, tmp2_20)
        if (p3_0 && !ret1_4) {
          max_ct_res_0 := tmp1_21
        }
        if (p4_0 && !ret2_4) {
          max_ct_res_0_0 := tmp2_21
        }
      }
      if (p3_0 && !ret1_4) {
        res := max_ct_res_0
        inhale _isDefined(7562610)
        _res := _checkDefined(res, 7562610)
        ret1_4 := true
      }
      if (p4_0 && !ret2_4) {
        res_0 := max_ct_res_0_0
        inhale true
        _res_5 := res_0
        ret2_4 := true
      }
    }
    exhale true
  }
}

method password_checker(p1_7: Bool, p2_7: Bool, guess: Ref, guess_1: Ref, stored_password: Ref,
  stored_password_1: Ref)
  returns (_res: Ref, _res_6: Ref)
  requires (p1_7 ==> issubtype(typeof(guess), list(int()))) &&
    (p2_7 ==> issubtype(typeof(guess_1), list(int())))
  requires (p1_7 ==> issubtype(typeof(stored_password), list(int()))) &&
    (p2_7 ==> issubtype(typeof(stored_password_1), list(int())))
  requires (p1_7 ==> acc(guess.list_acc, write)) &&
    (p2_7 ==> acc(guess_1.list_accp, write)) &&
    ((p1_7 ==> acc(stored_password.list_acc, write)) &&
    (p2_7 ==> acc(stored_password_1.list_accp, write)))
  requires p1_7 && p2_7 ==>
    __prim__bool___box__(PSeq___eq__(PSeq___create__(guess.list_acc, int()),
    PSeq___create__(stored_password.list_acc, int()))) ==
    __prim__bool___box__(PSeq___eq__(PSeq___create__(guess_1.list_accp, int()),
    PSeq___create__(stored_password_1.list_accp, int())))
  requires (p1_7 ==>
    int___eq__(__prim__int___box__(list___len__(stored_password)), __prim__int___box__(list___len__(guess)))) &&
    (p2_7 ==>
    int___eq__(__prim__int___box__(list___len___0(stored_password_1)), __prim__int___box__(list___len___0(guess_1)))) &&
    (p1_7 && p2_7 ==>
    __prim__int___box__(list___len__(guess)) ==
    __prim__int___box__(list___len___0(guess_1)))
  ensures (p1_7 ==> issubtype(typeof(_res), int())) &&
    (p2_7 ==> issubtype(typeof(_res_6), int()))
  ensures (p1_7 ==> acc(guess.list_acc, write)) &&
    (p2_7 ==> acc(guess_1.list_accp, write)) &&
    ((p1_7 ==> acc(stored_password.list_acc, write)) &&
    (p2_7 ==> acc(stored_password_1.list_accp, write)))
  ensures p1_7 && p2_7 ==> int___eq__(_res, _res_6)
{
  var ret1_5: Bool
  var ret2_5: Bool
  inhale p1_7
  ret1_5 := false
  ret2_5 := false
  {
    var _err: Ref
    var _err_6: Ref
    var guess_0: Ref
    var guess_0_0: Ref
    var stored_password_0: Ref
    var stored_password_0_0: Ref
    var memcmp_ct_res_0: Ref
    var memcmp_ct_res_0_0: Ref
    if (p1_7 && !ret1_5) {
      _res := null
      _err := null
      guess_0 := guess
      stored_password_0 := stored_password
    }
    if (p2_7 && !ret2_5) {
      _res_6 := null
      _err_6 := null
      guess_0_0 := guess_1
      stored_password_0_0 := stored_password_1
    }
    // Method call: memcmp_ct
  
    if (p1_7 && !ret1_5 || p2_7 && !ret2_5) {
      var tmp1_22: Ref
      var tmp2_22: Ref
      var tmp1_23: Ref
      var tmp2_23: Ref
      var tmp1_24: Ref
      var tmp2_24: Ref
      var tmp1_25: Ref
      var tmp2_25: Ref
      var tmp1_26: Ref
      var tmp2_26: Ref
      if (p1_7 && !ret1_5) {
        tmp1_22 := guess_0
        tmp1_23 := stored_password_0
        tmp1_24 := __prim__int___box__(0)
        tmp1_25 := __prim__int___box__(list___len__(guess_0))
      }
      if (p2_7 && !ret2_5) {
        tmp2_22 := guess_0_0
        tmp2_23 := stored_password_0_0
        tmp2_24 := __prim__int___box__(0)
        tmp2_25 := __prim__int___box__(list___len___0(guess_0_0))
      }
      tmp1_26, tmp2_26 := memcmp_ct(p1_7 && !ret1_5, p2_7 && !ret2_5, tmp1_22,
        tmp2_22, tmp1_23, tmp2_23, tmp1_24, tmp2_24, tmp1_25, tmp2_25)
      if (p1_7 && !ret1_5) {
        memcmp_ct_res_0 := tmp1_26
      }
      if (p2_7 && !ret2_5) {
        memcmp_ct_res_0_0 := tmp2_26
      }
    }
    if (p1_7 && !ret1_5) {
      _res := memcmp_ct_res_0
      ret1_5 := true
    }
    if (p2_7 && !ret2_5) {
      _res_6 := memcmp_ct_res_0_0
      ret2_5 := true
    }
    exhale true
  }
}

method main(p1_8: Bool, p2_8: Bool)
{
  inhale p1_8
  {
    var module_defined_0: Bool
    var module_defined_0_0: Bool
    var module_names_0: Set[_Name]
    var module_names_0_0: Set[_Name]
    var _err: Ref
    var _err_7: Ref
    if (p1_8) {
      module_defined_0 := true
      module_names_0 := Set[_Name]()
      module_names_0 := (module_names_0 union
        Set(_single(6872323072689856351)))
      inhale acc(__file__()._val, 99 / 100) &&
        issubtype(typeof(__file__()._val), str()) &&
        issubtype(typeof(__file__()._val), str())
      module_names_0 := (module_names_0 union
        Set(_single(6872323076851130207)))
      inhale acc(__name__()._val, 99 / 100) &&
        issubtype(typeof(__name__()._val), str()) &&
        issubtype(typeof(__name__()._val), str()) &&
        str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
      _err := null
      module_names_0 := (module_names_0 union Set(_single(1953720652)))
      module_names_0 := (module_names_0 union
        Set(_single(479088420089747402351201)))
      module_names_0 := (module_names_0 union
        Set(_single(2146982866029315582051)))
      module_names_0 := (module_names_0 union
        Set(_single(127970152050542)))
      module_names_0 := (module_names_0 union
        Set(_single(127970152309101)))
      module_names_0 := (module_names_0 union
        Set(_single(127970151655789)))
      module_names_0 := (module_names_0 union
        Set(_single(2146982878097972225389)))
      module_names_0 := (module_names_0 union
        Set(_single(36039785456140127153733984865)))
      module_names_0 := (module_names_0 union
        Set(_single(8391166444900475245)))
      module_names_0 := (module_names_0 union
        Set(_single(152058591594992290293576603700571627888)))
    }
    if (p2_8) {
      module_defined_0_0 := true
      module_names_0_0 := Set[_Name]()
      module_names_0_0 := (module_names_0_0 union
        Set(_single(6872323072689856351)))
      inhale acc(__file__()._valp, 99 / 100) &&
        issubtype(typeof(__file__()._valp), str()) &&
        issubtype(typeof(__file__()._valp), str())
      module_names_0_0 := (module_names_0_0 union
        Set(_single(6872323076851130207)))
      inhale acc(__name__()._valp, 99 / 100) &&
        issubtype(typeof(__name__()._valp), str()) &&
        issubtype(typeof(__name__()._valp), str()) &&
        str___eq__(str___create__(8, 6872332955275845471), __name__()._valp)
      _err_7 := null
      module_names_0_0 := (module_names_0_0 union Set(_single(1953720652)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(479088420089747402351201)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(2146982866029315582051)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(127970152050542)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(127970152309101)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(127970151655789)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(2146982878097972225389)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(36039785456140127153733984865)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(8391166444900475245)))
      module_names_0_0 := (module_names_0_0 union
        Set(_single(152058591594992290293576603700571627888)))
    }
    exhale true
  }
}