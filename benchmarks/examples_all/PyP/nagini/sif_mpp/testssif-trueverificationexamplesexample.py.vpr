domain PyType  {
  
  function extends_(sub: PyType, super: PyType): Bool 
  
  function issubtype(sub: PyType, super: PyType): Bool 
  
  function isnotsubtype(sub: PyType, super: PyType): Bool 
  
  function tuple_args(t: PyType): Seq[PyType] 
  
  function typeof(obj: Ref): PyType 
  
  function get_basic(t: PyType): PyType 
  
  function union_type_1(arg_1: PyType): PyType 
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType 
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType 
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType 
  
  unique function object(): PyType 
  
  unique function list_basic(): PyType 
  
  function list(arg0: PyType): PyType 
  
  function list_arg(typ: PyType, index: Int): PyType 
  
  unique function set_basic(): PyType 
  
  function set(arg0: PyType): PyType 
  
  function set_arg(typ: PyType, index: Int): PyType 
  
  unique function dict_basic(): PyType 
  
  function dict(arg0: PyType, arg1: PyType): PyType 
  
  function dict_arg(typ: PyType, index: Int): PyType 
  
  unique function int(): PyType 
  
  unique function float(): PyType 
  
  unique function bool(): PyType 
  
  unique function NoneType(): PyType 
  
  unique function Exception(): PyType 
  
  unique function ConnectionRefusedError(): PyType 
  
  unique function traceback(): PyType 
  
  unique function str(): PyType 
  
  unique function bytes(): PyType 
  
  unique function tuple_basic(): PyType 
  
  function tuple(args: Seq[PyType]): PyType 
  
  function tuple_arg(typ: PyType, index: Int): PyType 
  
  unique function PSeq_basic(): PyType 
  
  function PSeq(arg0: PyType): PyType 
  
  function PSeq_arg(typ: PyType, index: Int): PyType 
  
  unique function PSet_basic(): PyType 
  
  function PSet(arg0: PyType): PyType 
  
  function PSet_arg(typ: PyType, index: Int): PyType 
  
  unique function PMultiset_basic(): PyType 
  
  function PMultiset(arg0: PyType): PyType 
  
  function PMultiset_arg(typ: PyType, index: Int): PyType 
  
  unique function slice(): PyType 
  
  unique function range_0(): PyType 
  
  unique function Iterator_basic(): PyType 
  
  function Iterator(arg0: PyType): PyType 
  
  function Iterator_arg(typ: PyType, index: Int): PyType 
  
  unique function Thread_0(): PyType 
  
  unique function LevelType(): PyType 
  
  unique function type(): PyType 
  
  unique function Place(): PyType 
  
  unique function __prim__Seq_type(): PyType 
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), issubtype(middle, super) }
      issubtype(sub, middle) && issubtype(middle, super) ==>
      issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType ::
      { issubtype(type_, type_) }
      issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType ::
      { extends_(sub, sub2) }
      extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref ::
      { typeof(r) }
      issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType ::
      { issubtype(type_, object()) }
      issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType ::
      { extends_(sub, super), extends_(sub2, super) }
      extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==>
      isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType ::
      { issubtype(sub, super) }
      { issubtype(super, sub) }
      issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), isnotsubtype(middle, super) }
      issubtype(sub, middle) && isnotsubtype(middle, super) ==>
      !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType ::
      { tuple(seq), tuple_arg(Z, i) }
      issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType ::
      { issubtype(Z, tuple(seq)) }
      issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] ::seq1 != seq2 &&
      |seq1| == |seq2| &&
      (forall i: Int ::i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==>
      issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(X, union_type_1(arg_1)) }
      issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(X, union_type_2(arg_1, arg_2)) }
      issubtype(X, union_type_2(arg_1, arg_2)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) }
      issubtype(X, union_type_3(arg_1, arg_2, arg_3)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) }
      issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3) ||
      issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(union_type_1(arg_1), X) }
      issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(union_type_2(arg_1, arg_2), X) }
      issubtype(union_type_2(arg_1, arg_2), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(union_type_3(arg_1, arg_2, arg_3), X) }
      issubtype(union_type_3(arg_1, arg_2, arg_3), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) }
      issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X) &&
      issubtype(arg_4, X)))
  }
  
  axiom subtype_list {
    (forall var0: PyType ::
      { list(var0) }
      extends_(list(var0), object()) &&
      get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType ::
      { list(arg0), list_arg(Z, 0) }
      issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType ::
      { set(var0) }
      extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType ::
      { set(arg0), set_arg(Z, 0) }
      issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType ::
      { dict(var0, var1) }
      extends_(dict(var0, var1), object()) &&
      get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 0) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 1) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) &&
    get_basic(Exception()) == Exception()
  }
  
  axiom subtype_ConnectionRefusedError {
    extends_(ConnectionRefusedError(), Exception()) &&
    get_basic(ConnectionRefusedError()) == ConnectionRefusedError()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) &&
    get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] ::
      { tuple(args) }
      ((forall e: PyType ::(e in args) ==> e == object()) ==>
      extends_(tuple(args), object())) &&
      get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_PSeq {
    (forall var0: PyType ::
      { PSeq(var0) }
      extends_(PSeq(var0), object()) &&
      get_basic(PSeq(var0)) == PSeq_basic())
  }
  
  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSeq(arg0), PSeq_arg(Z, 0) }
      issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType ::
      { PSet(var0) }
      extends_(PSet(var0), object()) &&
      get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSet(arg0), PSet_arg(Z, 0) }
      issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PMultiset {
    (forall var0: PyType ::
      { PMultiset(var0) }
      extends_(PMultiset(var0), object()) &&
      get_basic(PMultiset(var0)) == PMultiset_basic())
  }
  
  axiom PMultiset_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PMultiset(arg0), PMultiset_arg(Z, 0) }
      issubtype(Z, PMultiset(arg0)) ==> PMultiset_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range_0 {
    extends_(range_0(), object()) && get_basic(range_0()) == range_0()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType ::
      { Iterator(var0) }
      extends_(Iterator(var0), object()) &&
      get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType ::
      { Iterator(arg0), Iterator_arg(Z, 0) }
      issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_LevelType {
    extends_(LevelType(), object()) &&
    get_basic(LevelType()) == LevelType()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype___prim__Seq_type {
    extends_(__prim__Seq_type(), object()) &&
    get_basic(__prim__Seq_type()) == __prim__Seq_type()
  }
}

domain SIFDomain[T]  {
  
  function Low(x: T): Bool 
  
  function LowEvent(): Bool 
}

domain _list_ce_helper  {
  
  function seq_ref_length(___s: Seq[Ref]): Int 
  
  function seq_ref_index(___s: Seq[Ref], i: Int): Ref 
  
  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }
  
  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int ::
      { ___s[___i] }
      ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$  {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$ 
  
  function Measure$guard(m: Measure$): Bool 
  
  function Measure$key(m: Measure$): Ref 
  
  function Measure$value(m: Measure$): Int 
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$guard(Measure$create(g, k, v)) }
      Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$key(Measure$create(g, k, v)) }
      Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$value(Measure$create(g, k, v)) }
      Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain __MSHelper[T$]  {
  
  function __toMS(s: Seq[T$]): Multiset[T$] 
  
  axiom __toMS_def_1 {
    (__toMS(Seq[T$]()): Multiset[T$]) == Multiset[T$]()
  }
  
  axiom __toMS_def_2 {
    (forall __t: T$ ::
      { (__toMS(Seq(__t)): Multiset[T$]) }
      (__toMS(Seq(__t)): Multiset[T$]) == Multiset(__t))
  }
  
  axiom __toMS_def_3 {
    (forall __ss1: Seq[T$], __ss2: Seq[T$] ::
      { (__toMS(__ss1 ++ __ss2): Multiset[T$]) }
      (__toMS(__ss1 ++ __ss2): Multiset[T$]) ==
      ((__toMS(__ss1): Multiset[T$]) union (__toMS(__ss2): Multiset[T$])))
  }
  
  axiom __toMS_def_4 {
    (forall __ss1: Seq[T$] ::
      { (__toMS(__ss1): Multiset[T$]) }
      |(__toMS(__ss1): Multiset[T$])| == |__ss1|)
  }
}

domain _Name  {
  
  function _combine(n1: _Name, n2: _Name): _Name 
  
  function _single(n: Int): _Name 
  
  function _get_combined_prefix(n: _Name): _Name 
  
  function _get_combined_name(n: _Name): _Name 
  
  function _get_value(n: _Name): Int 
  
  function _name_type(n: _Name): Bool 
  
  function _is_single(n: _Name): Bool 
  
  function _is_combined(n: _Name): Bool 
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom compose_single {
    (forall n: _Name ::
      { _get_value(n) }
      _is_single(n) ==> n == _single(_get_value(n)))
  }
  
  axiom type_of_single {
    (forall i: Int :: { _single(i) } _name_type(_single(i)))
  }
  
  axiom decompose_combined {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      _get_combined_prefix(_combine(n1, n2)) == n1 &&
      _get_combined_name(_combine(n1, n2)) == n2)
  }
  
  axiom compose_combined {
    (forall n: _Name ::
      { _get_combined_prefix(n) }
      { _get_combined_name(n) }
      _is_combined(n) ==>
      n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom type_of_composed {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      !_name_type(_combine(n1, n2)))
  }
  
  axiom type_is_single {
    (forall n: _Name :: { _name_type(n) } _name_type(n) == _is_single(n))
  }
  
  axiom type_is_combined {
    (forall n: _Name ::
      { _name_type(n) }
      !_name_type(n) == _is_combined(n))
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
}

domain PredicateInstance  {
  
  
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Map[Ref,Ref]

field dict_accp: Map[Ref,Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function __prim__int___box__(prim: Int): Ref
  decreases _
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


function int___unbox__(box: Ref): Int
  decreases _
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==>
    __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==>
    __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  decreases _
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  decreases _
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function int___eq__(self: Ref, other: Ref): Bool
  decreases _
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool
  decreases _
{
  self >= other
}

function int___le__(self: Int, other: Int): Bool
  decreases _
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool
  decreases _
{
  self < other
}

function int___add__(self: Int, other: Int): Int
  decreases _
{
  self + other
}

function int___mod__(self: Int, other: Int): Int
  decreases _
  requires other != 0
{
  self % other
}

function list___len__(self: Ref): Int
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard)
{
  |self.list_acc|
}

function list___len___0(self: Ref): Int
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_accp, wildcard)
{
  |self.list_accp|
}

function list___getitem__(self: Ref, key: Ref): Ref
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_acc, wildcard)
  requires (let ln ==
      (list___len__(self)) in
      (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) &&
      (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result ==
    (int___unbox__(key) >= 0 ?
      self.list_acc[int___unbox__(key)] :
      self.list_acc[list___len__(self) + int___unbox__(key)])
  ensures issubtype(typeof(result), list_arg(typeof(self), 0))


function list___getitem___0(self: Ref, key: Ref): Ref
  decreases _
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_accp, wildcard)
  requires (let ln ==
      (list___len___0(self)) in
      (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) &&
      (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result ==
    (int___unbox__(key) >= 0 ?
      self.list_accp[int___unbox__(key)] :
      self.list_accp[list___len___0(self) + int___unbox__(key)])
  ensures issubtype(typeof(result), list_arg(typeof(self), 0))


function Level(r: Ref): Perm
  decreases _


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method is_female(p1: Bool, p2: Bool, _cthread_155: Ref, _cthread_155_0: Ref,
  _caller_measures_155: Seq[Measure$], _caller_measures_155_0: Seq[Measure$],
  _residue_155: Perm, _residue_155_0: Perm, person: Ref, person_1: Ref)
  returns (_current_wait_level_155: Perm, _current_wait_level_155_0: Perm, _res: Ref,
  _res_0: Ref)
  requires (p1 ==> _cthread_155 != null) && (p2 ==> _cthread_155_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_155), Thread_0())) &&
    (p2 ==> issubtype(typeof(_cthread_155_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(person), int())) &&
    (p2 ==> issubtype(typeof(person_1), int()))
  requires (p1 ==>
    [true,
    perm(MustTerminate(_cthread_155)) == none &&
    ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) &&
    ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) &&
    ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) &&
    (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]) &&
    (p2 ==>
    [true,
    perm(MustTerminate_0(_cthread_155_0)) == none &&
    ((forperm _r_1: Ref [MustInvokeBounded_0(_r_1)] :: false) &&
    ((forperm _r_1: Ref [MustInvokeUnbounded_0(_r_1)] :: false) &&
    ((forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: false) &&
    (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==>
    [(forperm
      _r: Ref [_r.MustReleaseBounded] :: Level(_r) <=
      _current_wait_level_155) &&
    ((forperm
      _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <=
      _current_wait_level_155) &&
    _residue_155 <= _current_wait_level_155),
    true]) &&
    (p2 ==>
    [(forperm
      _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <=
      _current_wait_level_155_0) &&
    ((forperm
      _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <=
      _current_wait_level_155_0) &&
    _residue_155_0 <= _current_wait_level_155_0),
    true])
  ensures (p1 ==> issubtype(typeof(_res), int())) &&
    (p2 ==> issubtype(typeof(_res_0), int()))
  ensures (p1 && p2 ==>
    __prim__int___box__(int___mod__(int___unbox__(person), 2)) ==
    __prim__int___box__(int___mod__(int___unbox__(person_1), 2))) ==>
    p1 && p2 ==> _res == _res_0
  ensures (p1 ==>
    [true,
    (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) &&
    ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) &&
    ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) &&
    (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) &&
    (p2 ==>
    [true,
    (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) &&
    ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) &&
    ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) &&
    (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  {
    var _err: Ref
    var _err_0: Ref
    var gender: Ref
    var gender_0: Ref
    var person_0: Ref
    var person_0_0: Ref
    var _cwl_155: Perm
    var _cwl_155_0: Perm
    var _method_measures_155: Seq[Measure$]
    var _method_measures_155_0: Seq[Measure$]
    if (p1 && !ret1) {
      _method_measures_155 := Seq[Measure$]()
      _res := null
      _err := null
      person_0 := person
      gender := __prim__int___box__(int___mod__(int___unbox__(person_0), 2))
      inhale _isDefined(125779802219879)
    }
    if (p2 && !ret2) {
      _method_measures_155_0 := Seq[Measure$]()
      _res_0 := null
      _err_0 := null
      person_0_0 := person_1
      gender_0 := __prim__int___box__(int___mod__(int___unbox__(person_0_0),
        2))
      inhale true
    }
    {
      var p1_0: Bool
      var p2_0: Bool
      var p3: Bool
      var p4: Bool
      p1_0 := p1 && !ret1 &&
        int___eq__(_checkDefined(gender, 125779802219879), __prim__int___box__(0))
      p2_0 := p2 && !ret2 && int___eq__(gender_0, __prim__int___box__(0))
      p3 := p1 && !ret1 &&
        !int___eq__(_checkDefined(gender, 125779802219879), __prim__int___box__(0))
      p4 := p2 && !ret2 && !int___eq__(gender_0, __prim__int___box__(0))
      if (p1_0 && !ret1) {
        _res := __prim__int___box__(1)
        ret1 := true
      }
      if (p2_0 && !ret2) {
        _res_0 := __prim__int___box__(1)
        ret2 := true
      }
    }
    if (p1 && !ret1) {
      _res := __prim__int___box__(0)
      ret1 := true
    }
    if (p2 && !ret2) {
      _res_0 := __prim__int___box__(0)
      ret2 := true
    }
    exhale true
  }
}

method main(p1_1: Bool, p2_1: Bool, _cthread_156: Ref, _cthread_156_0: Ref,
  _caller_measures_156: Seq[Measure$], _caller_measures_156_0: Seq[Measure$],
  _residue_156: Perm, _residue_156_0: Perm, people: Ref, people_1: Ref)
  returns (_current_wait_level_156: Perm, _current_wait_level_156_0: Perm, _res: Ref,
  _res_1: Ref)
  requires (p1_1 ==> _cthread_156 != null) &&
    (p2_1 ==> _cthread_156_0 != null)
  requires (p1_1 ==> issubtype(typeof(_cthread_156), Thread_0())) &&
    (p2_1 ==> issubtype(typeof(_cthread_156_0), Thread_0()))
  requires (p1_1 ==> issubtype(typeof(people), list(int()))) &&
    (p2_1 ==> issubtype(typeof(people_1), list(int())))
  requires (p1_1 ==> acc(people.list_acc, write)) &&
    (p2_1 ==> acc(people_1.list_accp, write))
  requires p1_1 && p2_1 ==>
    __prim__int___box__(list___len__(people)) ==
    __prim__int___box__(list___len___0(people_1))
  requires (forall lambda23_25$i: Ref ::
      { list___getitem__(people, lambda23_25$i) }
      { list___getitem___0(people_1, lambda23_25$i) }
      (p1_1 ==> issubtype(typeof(lambda23_25$i), int())) &&
      (p2_1 ==> issubtype(typeof(lambda23_25$i), int())) ==>
      (p1_1 ==> issubtype(typeof(lambda23_25$i), int())) &&
      (p2_1 ==> issubtype(typeof(lambda23_25$i), int())) ==>
      (p1_1 ==> int___ge__(int___unbox__(lambda23_25$i), 0)) &&
      (p2_1 ==> int___ge__(int___unbox__(lambda23_25$i), 0)) &&
      ((p1_1 ==>
      int___lt__(int___unbox__(lambda23_25$i), list___len__(people))) &&
      (p2_1 ==>
      int___lt__(int___unbox__(lambda23_25$i), list___len___0(people_1)))) ==>
      p1_1 && p2_1 ==>
      __prim__int___box__(int___mod__(int___unbox__(list___getitem__(people,
      lambda23_25$i)), 2)) ==
      __prim__int___box__(int___mod__(int___unbox__(list___getitem___0(people_1,
      lambda23_25$i)), 2)))
  requires (p1_1 ==>
    [true,
    perm(MustTerminate(_cthread_156)) == none &&
    ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) &&
    ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) &&
    ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) &&
    (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]) &&
    (p2_1 ==>
    [true,
    perm(MustTerminate_0(_cthread_156_0)) == none &&
    ((forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) &&
    ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) &&
    ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) &&
    (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false))))])
  ensures (p1_1 ==>
    [(forperm
      _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <=
      _current_wait_level_156) &&
    ((forperm
      _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <=
      _current_wait_level_156) &&
    _residue_156 <= _current_wait_level_156),
    true]) &&
    (p2_1 ==>
    [(forperm
      _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <=
      _current_wait_level_156_0) &&
    ((forperm
      _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <=
      _current_wait_level_156_0) &&
    _residue_156_0 <= _current_wait_level_156_0),
    true])
  ensures (p1_1 ==> issubtype(typeof(_res), int())) &&
    (p2_1 ==> issubtype(typeof(_res_1), int()))
  ensures p1_1 && p2_1 ==> _res == _res_1
  ensures (p1_1 ==>
    [true,
    (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) &&
    (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]) &&
    (p2_1 ==>
    [true,
    (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) &&
    ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) &&
    ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) &&
    (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))])
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_1
  ret1_0 := false
  ret2_0 := false
  {
    var _err: Ref
    var _err_1: Ref
    var i: Ref
    var i_0: Ref
    var count: Ref
    var count_0: Ref
    var current: Ref
    var current_0: Ref
    var female: Ref
    var female_0: Ref
    var people_0: Ref
    var people_0_0: Ref
    var _loop_measures: Seq[Measure$]
    var _loop_measures_0: Seq[Measure$]
    var _loop_check_before: Bool
    var _loop_check_before_0: Bool
    var _loop_termination_flag: Bool
    var _loop_termination_flag_0: Bool
    var _loop_original_must_terminate: Perm
    var _loop_original_must_terminate_0: Perm
    var _residue_157: Perm
    var _residue_157_0: Perm
    var is_female_res: Ref
    var is_female_res_0: Ref
    var _cwl_156: Perm
    var _cwl_156_0: Perm
    var _method_measures_156: Seq[Measure$]
    var _method_measures_156_0: Seq[Measure$]
    if (p1_1 && !ret1_0) {
      _method_measures_156 := Seq[Measure$]()
      _res := null
      _err := null
      people_0 := people
      i := __prim__int___box__(0)
      inhale _isDefined(105)
      count := __prim__int___box__(0)
      inhale _isDefined(500069396323)
      // Save current MustTerminate amount.
      _loop_original_must_terminate := perm(MustTerminate(_cthread_156))
      // Save loop termination promise.
      _loop_termination_flag := false
      // We are before loop.
      _loop_check_before := true
    }
    if (p2_1 && !ret2_0) {
      _method_measures_156_0 := Seq[Measure$]()
      _res_1 := null
      _err_1 := null
      people_0_0 := people_1
      i_0 := __prim__int___box__(0)
      inhale true
      count_0 := __prim__int___box__(0)
      inhale true
      // Save current MustTerminate amount.
      _loop_original_must_terminate_0 := perm(MustTerminate_0(_cthread_156_0))
      // Save loop termination promise.
      _loop_termination_flag_0 := false
      // We are before loop.
      _loop_check_before_0 := true
    }
    {
      var bypass1: Bool
      var bypass2: Bool
      var tmp1: Seq[Measure$]
      var tmp2: Seq[Measure$]
      var tmp1_0: Ref
      var tmp2_0: Ref
      var tmp1_1: Perm
      var tmp2_1: Perm
      var tmp1_2: Ref
      var tmp2_2: Ref
      var tmp1_3: Ref
      var tmp2_3: Ref
      var tmp1_4: Ref
      var tmp2_4: Ref
      var tmp1_5: Ref
      var tmp2_5: Ref
      var tmp1_6: Bool
      var tmp2_6: Bool
      var p1_2: Bool
      var p2_2: Bool
      var idle1: Bool
      var idle2: Bool
      bypass1 := !(p1_1 && !ret1_0)
      bypass2 := !(p2_1 && !ret2_0)
      if (bypass1) {
        tmp1 := _loop_measures
        tmp1_0 := current
        tmp1_1 := _cwl_156
        tmp1_2 := is_female_res
        tmp1_3 := female
        tmp1_4 := count
        tmp1_5 := i
        tmp1_6 := _loop_check_before
      }
      if (bypass2) {
        tmp2 := _loop_measures_0
        tmp2_0 := current_0
        tmp2_1 := _cwl_156_0
        tmp2_2 := is_female_res_0
        tmp2_3 := female_0
        tmp2_4 := count_0
        tmp2_5 := i_0
        tmp2_6 := _loop_check_before_0
      }
      idle1 := false
      idle2 := false
      
      var lambda34_30$ii: Ref
      
      if ( p1_1 && !bypass1 && p2_1 && !bypass2 && (p1_1 && !bypass1 ==> issubtype(typeof(lambda34_30$ii), int())) &&
            (p2_1 && !bypass2 ==> issubtype(typeof(lambda34_30$ii), int())) &&
            (p1_1 && !bypass1 ==> issubtype(typeof(lambda34_30$ii), int())) &&
            (p2_1 && !bypass2 ==> issubtype(typeof(lambda34_30$ii), int())) &&
            (p1_1 && !bypass1 ==>
            int___ge__(int___unbox__(lambda34_30$ii), 0)) &&
            (p2_1 && !bypass2 ==>
            int___ge__(int___unbox__(lambda34_30$ii), 0)) &&
            ((p1_1 && !bypass1 ==>
            int___lt__(int___unbox__(lambda34_30$ii), list___len__(people_0))) &&
            (p2_1 && !bypass2 ==>
            int___lt__(int___unbox__(lambda34_30$ii), list___len___0(people_0_0))))) 
            {
            assert __prim__int___box__(int___mod__(int___unbox__(list___getitem__(people_0,
            	lambda34_30$ii)), 2)) ==
            	__prim__int___box__(int___mod__(int___unbox__(list___getitem___0(people_0_0,
            	lambda34_30$ii)), 2))
            }
            
      
      assert (forall lambda34_30$i: Ref ::
            { list___getitem__(people_0, lambda34_30$i) }
            { list___getitem___0(people_0_0, lambda34_30$i) }
            (p1_1 && !bypass1 ==> issubtype(typeof(lambda34_30$i), int())) &&
            (p2_1 && !bypass2 ==> issubtype(typeof(lambda34_30$i), int())) ==>
            (p1_1 && !bypass1 ==> issubtype(typeof(lambda34_30$i), int())) &&
            (p2_1 && !bypass2 ==> issubtype(typeof(lambda34_30$i), int())) ==>
            (p1_1 && !bypass1 ==>
            int___ge__(int___unbox__(lambda34_30$i), 0)) &&
            (p2_1 && !bypass2 ==>
            int___ge__(int___unbox__(lambda34_30$i), 0)) &&
            ((p1_1 && !bypass1 ==>
            int___lt__(int___unbox__(lambda34_30$i), list___len__(people_0))) &&
            (p2_1 && !bypass2 ==>
            int___lt__(int___unbox__(lambda34_30$i), list___len___0(people_0_0)))) ==>
            p1_1 && !bypass1 && (p2_1 && !bypass2) ==>
            __prim__int___box__(int___mod__(int___unbox__(list___getitem__(people_0,
            lambda34_30$i)), 2)) ==
            __prim__int___box__(int___mod__(int___unbox__(list___getitem___0(people_0_0,
            lambda34_30$i)), 2)))
      
      
      while (p1_1 && !ret1_0 && !bypass1 &&
      int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(people_0)) ||
      p2_1 && !ret2_0 && !bypass2 &&
      int___lt__(int___unbox__(i_0), list___len___0(people_0_0)))
        invariant (p1_1 && !bypass1 ==>
          [(forperm
            _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <=
            _residue_157) &&
          ((forperm
            _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <=
            _residue_157) &&
          _residue_156 <= _residue_157),
          true]) &&
          (p2_1 && !bypass2 ==>
          [(forperm
            _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <=
            _residue_157_0) &&
          ((forperm
            _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <=
            _residue_157_0) &&
          _residue_156_0 <= _residue_157_0),
          true])
        invariant (p1_1 && !bypass1 ==> issubtype(typeof(count), int())) &&
          (p2_1 && !bypass2 ==> issubtype(typeof(count_0), int()))
        invariant (p1_1 && !bypass1 ==> issubtype(typeof(i), int())) &&
          (p2_1 && !bypass2 ==> issubtype(typeof(i_0), int()))
        invariant (p1_1 && !bypass1 ==> acc(people_0.list_acc, write)) &&
          (p2_1 && !bypass2 ==> acc(people_0_0.list_accp, write))
        invariant (p1_1 && !bypass1 ==>
          int___ge__(int___unbox__(_checkDefined(i, 105)), 0)) &&
          (p2_1 && !bypass2 ==> int___ge__(int___unbox__(i_0), 0)) &&
          ((p1_1 && !bypass1 ==>
          int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(people_0))) &&
          (p2_1 && !bypass2 ==>
          int___le__(int___unbox__(i_0), list___len___0(people_0_0))))
        invariant p1_1 && !bypass1 && (p2_1 && !bypass2) ==>
          _checkDefined(i, 105) == i_0
        invariant p1_1 && !bypass1 && (p2_1 && !bypass2) ==>
          _checkDefined(count, 500069396323) == count_0
        invariant p1_1 && !bypass1 && (p2_1 && !bypass2) ==>
          __prim__int___box__(list___len__(people_0)) ==
          __prim__int___box__(list___len___0(people_0_0))
        invariant (forall lambda34_30$i: Ref ::
            { list___getitem__(people_0, lambda34_30$i) }
            { list___getitem___0(people_0_0, lambda34_30$i) }
            (p1_1 && !bypass1 ==> issubtype(typeof(lambda34_30$i), int())) &&
            (p2_1 && !bypass2 ==> issubtype(typeof(lambda34_30$i), int())) ==>
            (p1_1 && !bypass1 ==> issubtype(typeof(lambda34_30$i), int())) &&
            (p2_1 && !bypass2 ==> issubtype(typeof(lambda34_30$i), int())) ==>
            (p1_1 && !bypass1 ==>
            int___ge__(int___unbox__(lambda34_30$i), 0)) &&
            (p2_1 && !bypass2 ==>
            int___ge__(int___unbox__(lambda34_30$i), 0)) &&
            ((p1_1 && !bypass1 ==>
            int___lt__(int___unbox__(lambda34_30$i), list___len__(people_0))) &&
            (p2_1 && !bypass2 ==>
            int___lt__(int___unbox__(lambda34_30$i), list___len___0(people_0_0)))) ==>
            p1_1 && !bypass1 && (p2_1 && !bypass2) ==>
            __prim__int___box__(int___mod__(int___unbox__(list___getitem__(people_0,
            lambda34_30$i)), 2)) ==
            __prim__int___box__(int___mod__(int___unbox__(list___getitem___0(people_0_0,
            lambda34_30$i)), 2)))
        invariant (p1_1 && !bypass1 ==>
          [true,
          !idle1 ==>
          _loop_check_before ==>
          _loop_termination_flag ||
          (!int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(people_0)) ||
          perm(MustTerminate(_cthread_156)) == none &&
          ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) &&
          ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) &&
          ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) &&
          (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))]) &&
          (p2_1 && !bypass2 ==>
          [true,
          !idle2 ==>
          _loop_check_before_0 ==>
          _loop_termination_flag_0 ||
          (!int___lt__(int___unbox__(i_0), list___len___0(people_0_0)) ||
          perm(MustTerminate_0(_cthread_156_0)) == none &&
          ((forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) &&
          ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) &&
          ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) &&
          (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))))])
        invariant (p1_1 && !bypass1 ==>
          [true,
          !idle1 ==>
          !_loop_check_before ==>
          (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) &&
          ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) &&
          ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) &&
          (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]) &&
          (p2_1 && !bypass2 ==>
          [true,
          !idle2 ==>
          !_loop_check_before_0 ==>
          (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) &&
          ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) &&
          ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) &&
          (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))])
        invariant bypass1 ==> tmp1_5 == i
        invariant bypass1 ==> tmp1 == _loop_measures
        invariant bypass1 ==> tmp1_2 == is_female_res
        invariant bypass1 ==> tmp1_3 == female
        invariant bypass1 ==> tmp1_1 == _cwl_156
        invariant bypass1 ==> tmp1_4 == count
        invariant bypass1 ==> tmp1_0 == current
        invariant bypass1 ==> tmp1_6 == _loop_check_before
        invariant bypass2 ==> tmp2 == _loop_measures_0
        invariant bypass2 ==> tmp2_6 == _loop_check_before_0
        invariant bypass2 ==> tmp2_0 == current_0
        invariant bypass2 ==> tmp2_4 == count_0
        invariant bypass2 ==> tmp2_1 == _cwl_156_0
        invariant bypass2 ==> tmp2_3 == female_0
        invariant bypass2 ==> tmp2_5 == i_0
        invariant bypass2 ==> tmp2_2 == is_female_res_0 
      {
        p1_2 := p1_1 && !ret1_0 &&
          int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(people_0))
        p2_2 := p2_1 && !ret2_0 &&
          int___lt__(int___unbox__(i_0), list___len___0(people_0_0))
        idle1 := p1_1 && !ret1_0 &&
          !int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(people_0))
        idle2 := p2_1 && !ret2_0 &&
          !int___lt__(int___unbox__(i_0), list___len___0(people_0_0))
        if (p1_2 && !ret1_0) {
          _loop_measures := Seq[Measure$]()
          current := list___getitem__(people_0, _checkDefined(i, 105))
          inhale _isDefined(32772479289292131)
        }
        if (p2_2 && !ret2_0) {
          _loop_measures_0 := Seq[Measure$]()
          current_0 := list___getitem___0(people_0_0, i_0)
          inhale true
        }
        // Method call: is_female
  
        if (p1_2 && !ret1_0 || p2_2 && !ret2_0) {
          var tmp1_7: Ref
          var tmp2_7: Ref
          var tmp1_8: Seq[Measure$]
          var tmp2_8: Seq[Measure$]
          var tmp1_9: Perm
          var tmp2_9: Perm
          var tmp1_10: Ref
          var tmp2_10: Ref
          var tmp1_11: Perm
          var tmp2_11: Perm
          var tmp1_12: Ref
          var tmp2_12: Ref
          if (p1_2 && !ret1_0) {
            tmp1_7 := _cthread_156
            tmp1_8 := _method_measures_156
            tmp1_9 := _residue_157
            tmp1_10 := _checkDefined(current, 32772479289292131)
          }
          if (p2_2 && !ret2_0) {
            tmp2_7 := _cthread_156_0
            tmp2_8 := _method_measures_156_0
            tmp2_9 := _residue_157_0
            tmp2_10 := current_0
          }
          tmp1_11, tmp2_11, tmp1_12, tmp2_12 := is_female(p1_2 && !ret1_0, p2_2 &&
            !ret2_0, tmp1_7, tmp2_7, tmp1_8, tmp2_8, tmp1_9, tmp2_9, tmp1_10,
            tmp2_10)
          if (p1_2 && !ret1_0) {
            _cwl_156 := tmp1_11
            is_female_res := tmp1_12
          }
          if (p2_2 && !ret2_0) {
            _cwl_156_0 := tmp2_11
            is_female_res_0 := tmp2_12
          }
        }
        if (p1_2 && !ret1_0) {
          female := is_female_res
          inhale _isDefined(111516165432678)
          count := __prim__int___box__(int___add__(int___unbox__(count), int___unbox__(_checkDefined(female,
            111516165432678))))
          inhale _isDefined(500069396323)
          i := __prim__int___box__(int___add__(int___unbox__(i), 1))
          inhale _isDefined(105)
          // We are after loop body.
          _loop_check_before := false
        }
        if (p2_2 && !ret2_0) {
          female_0 := is_female_res_0
          inhale true
          count_0 := __prim__int___box__(int___add__(int___unbox__(count_0),
            int___unbox__(female_0)))
          inhale true
          i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
          inhale true
          // We are after loop body.
          _loop_check_before_0 := false
        }
        assert (p1_2 && !ret1_0 ==>
          _loop_termination_flag ==>
          !int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(people_0))) &&
          (p2_2 && !ret2_0 ==>
          _loop_termination_flag_0 ==>
          !int___lt__(int___unbox__(i_0), list___len___0(people_0_0)))
      }
    }
    if (p1_1 && !ret1_0) {
      // Reset MustTerminate amount to original level.
      exhale perm(MustTerminate(_cthread_156)) > none ==>
        acc(MustTerminate(_cthread_156), perm(MustTerminate(_cthread_156)) -
        _loop_original_must_terminate)
      _res := null
      _res := _checkDefined(count, 500069396323)
      ret1_0 := true
    }
    if (p2_1 && !ret2_0) {
      // Reset MustTerminate amount to original level.
      exhale perm(MustTerminate_0(_cthread_156_0)) > none ==>
        acc(MustTerminate_0(_cthread_156_0), perm(MustTerminate_0(_cthread_156_0)) -
        _loop_original_must_terminate_0)
      _res_1 := null
      _res_1 := count_0
      ret2_0 := true
    }
    exhale true
  }
}
