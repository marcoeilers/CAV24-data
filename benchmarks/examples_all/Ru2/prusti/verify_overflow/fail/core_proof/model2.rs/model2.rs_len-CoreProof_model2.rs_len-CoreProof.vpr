domain Address  {
  
  
}

domain Bytes  {
  
  
}

domain Lifetime  {
  
  function included(_0: Lifetime, _1: Lifetime): Bool 
  
  function intersect(_0: Set[Lifetime]): Lifetime 
  
  axiom included_in_itself$ {
    (forall lft: Lifetime :: { included(lft, lft) } included(lft, lft))
  }
  
  axiom included_intersect$1 {
    (forall lft_1: Set[Lifetime], lft_2: Set[Lifetime] ::
      { included(intersect(lft_1), intersect(lft_2)) }
      included(intersect(lft_1), intersect(lft_2)) == (lft_2 subset lft_1))
  }
  
  axiom included_intersect$2 {
    (forall lft_1: Set[Lifetime], lft_2: Lifetime ::
      { included(intersect(lft_1), lft_2) }
      included(intersect(lft_1), lft_2) == (lft_2 in lft_1))
  }
  
  axiom intersect_singleton$ {
    (forall lft: Lifetime ::
      { intersect(Set(lft)) }
      intersect(Set(lft)) == lft)
  }
}

domain MarkerCalls  {
  
  function basic_block_marker$start_label$marker(): Bool 
  
  function basic_block_marker$label_entry$marker(): Bool 
  
  function basic_block_marker$label_bb0$marker(): Bool 
  
  function basic_block_marker$label_2_custom$marker(): Bool 
  
  function basic_block_marker$label_bb2$marker(): Bool 
  
  function basic_block_marker$resume_panic_label$marker(): Bool 
  
  function basic_block_marker$label_1_custom$marker(): Bool 
  
  function basic_block_marker$label_bb1$marker(): Bool 
  
  function basic_block_marker$return_label$marker(): Bool 
  
  function basic_block_marker$end_label$marker(): Bool 
}

domain Place  {
  
  unique function _1$place(): Place 
  
  unique function _0$place(): Place 
}

domain Size  {
  
  function Size$Tuple$$$$(): Snap$Usize 
  
  function Size$trusted$m_VecWrapper$struct$m_Tmp$$$(): Snap$Usize 
  
  function PaddingSize$Tuple$$$$(): Snap$Usize 
}

domain Snap$Bool  {
  
  function constructor$Snap$Bool$(value: Bool): Snap$Bool 
  
  function destructor$Snap$Bool$$value(value: Snap$Bool): Bool 
  
  function valid$Snap$Bool(_0: Snap$Bool): Bool 
  
  axiom constructor$Snap$Bool$$bottom_up_injectivity_axiom {
    (forall value: Bool ::
      { constructor$Snap$Bool$(value) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$(value)) == value)
  }
  
  axiom constructor$Snap$Bool$$top_down_injectivity_axiom {
    (forall value: Snap$Bool ::
      { valid$Snap$Bool(value) }
      valid$Snap$Bool(value) ==>
      value == constructor$Snap$Bool$(destructor$Snap$Bool$$value(value)))
  }
  
  axiom Snap$Bool$$validity_axiom_bottom_up_alternative {
    (forall value: Bool ::
      { valid$Snap$Bool(constructor$Snap$Bool$(value)) }
      valid$Snap$Bool(constructor$Snap$Bool$(value)))
  }
}

domain Snap$Tuple$$$  {
  
  function constructor$Snap$Tuple$$$$(): Snap$Tuple$$$ 
  
  function valid$Snap$Tuple$$$(_0: Snap$Tuple$$$): Bool 
  
  function to_bytes$Tuple$$$(snapshot: Snap$Tuple$$$): Bytes 
  
  axiom Snap$Tuple$$$$validity_axiom_bottom_up_alternative_no_parameters {
    valid$Snap$Tuple$$$(constructor$Snap$Tuple$$$$())
  }
}

domain Snap$Usize  {
  
  function constructor$Snap$Usize$(value: Int): Snap$Usize 
  
  function destructor$Snap$Usize$$value(value: Snap$Usize): Int 
  
  function valid$Snap$Usize(_0: Snap$Usize): Bool 
  
  axiom constructor$Snap$Usize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Usize$(value) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$(value)) == value)
  }
  
  axiom constructor$Snap$Usize$$top_down_injectivity_axiom {
    (forall value: Snap$Usize ::
      { valid$Snap$Usize(value) }
      valid$Snap$Usize(value) ==>
      value == constructor$Snap$Usize$(destructor$Snap$Usize$$value(value)))
  }
  
  axiom Snap$Usize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Usize(constructor$Snap$Usize$(value)) }
      valid$Snap$Usize(constructor$Snap$Usize$(value)) ==
      (0 <= value && value <= 18446744073709551615))
  }
}

domain Snap$trusted$m_VecWrapper$struct$m_Tmp$$  {
  
  function valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(_0: Snap$trusted$m_VecWrapper$struct$m_Tmp$$): Bool 
  
  function to_bytes$trusted$m_VecWrapper$struct$m_Tmp$$(snapshot: Snap$trusted$m_VecWrapper$struct$m_Tmp$$): Bytes 
}

domain ComputeAddress  {
  
  function compute_address(place: Place, address: Address): Address 
  
  axiom root$1$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_1$place(), address) }
      compute_address(_1$place(), address) == address)
  }
  
  axiom root$2$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_0$place(), address) }
      compute_address(_0$place(), address) == address)
  }
}

predicate OwnedNonAliased$Tuple$$$(place: Place, root_address: Address, snapshot: Snap$Tuple$$$) {
  valid$Snap$Tuple$$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$Tuple$$$$()), write)
}

predicate OwnedNonAliased$trusted$m_VecWrapper$struct$m_Tmp$$(place: Place,
  root_address: Address, snapshot: Snap$trusted$m_VecWrapper$struct$m_Tmp$$) 

predicate DeadLifetimeToken(lifetime: Lifetime) 

predicate LifetimeToken(lifetime: Lifetime) 

predicate MemoryBlock(address: Address, size: Snap$Usize) 

method m_len$CoreProof()
{
  var _0$address: Address
  var _0$snapshot$0: Snap$Tuple$$$
  var _0$snapshot$1: Snap$Tuple$$$
  var _1$address: Address
  var _1$snapshot$0: Snap$trusted$m_VecWrapper$struct$m_Tmp$$
  var bw0$snapshot$0: Lifetime
  var bw1$snapshot$0: Lifetime
  var end_label$marker: Bool
  var label_1_custom$marker: Bool
  var label_2_custom$marker: Bool
  var label_bb0$marker: Bool
  var label_bb1$marker: Bool
  var label_bb2$marker: Bool
  var label_entry$marker: Bool
  var lft_0$snapshot$1: Lifetime
  var lft_1$snapshot$1: Lifetime
  var lifetime_token_perm_amount$0$snapshot$0: Perm
  var resume_panic_label$marker: Bool
  var return_label$marker: Bool
  var start_label$marker: Bool
  var tmp$0: Snap$Tuple$$$
  var tmp$1: Bool
  label start_label
  start_label$marker := false
  label_entry$marker := false
  label_bb0$marker := false
  label_2_custom$marker := false
  label_bb2$marker := false
  resume_panic_label$marker := false
  label_1_custom$marker := false
  label_bb1$marker := false
  return_label$marker := false
  end_label$marker := false
  start_label$marker := true
  inhale basic_block_marker$start_label$marker()
  // Lifetime preconditions.
  inhale lifetime_token_perm_amount$0$snapshot$0 > none
  inhale lifetime_token_perm_amount$0$snapshot$0 < write
  inhale acc(LifetimeToken(bw0$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  inhale acc(LifetimeToken(bw1$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  lft_0$snapshot$1 := bw0$snapshot$0
  lft_1$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    6)
  // Allocate the parameters.
  inhale acc(OwnedNonAliased$trusted$m_VecWrapper$struct$m_Tmp$$(_1$place(),
    _1$address, _1$snapshot$0), write) &&
    valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(_1$snapshot$0)
  // Allocate the return place.
  inhale acc(MemoryBlock(_0$address, Size$Tuple$$$$()), write)
  // Allocate implicitly allocated statements.
  goto label_entry
  label label_entry
  label_entry$marker := true
  inhale basic_block_marker$label_entry$marker()
  goto label_bb0
  label label_bb0
  label_bb0$marker := true
  inhale basic_block_marker$label_bb0$marker()
  // Prepare lifetimes for statement mid bb0[0]
  // bb0[0] _0 = ()
  tmp$0 := assign$Tuple$$$$Aggregate$Tuple$$$$$$$(_0$place(), _0$address)
  inhale _0$snapshot$1 == tmp$0
  // Prepare lifetimes for statement mid bb0[1]
  // bb0[1] drop(_1) -> [return: bb1, unwind: bb2]
  consume$Move$trusted$m_VecWrapper$struct$m_Tmp$$(_1$place(), _1$address, _1$snapshot$0)
  if (tmp$1) {
    goto label_1_custom
  }
  if (!tmp$1) {
    goto label_2_custom
  }
  assert false
  label label_2_custom
  label_2_custom$marker := true
  inhale basic_block_marker$label_2_custom$marker()
  // Prepare lifetimes for block bb2
  goto label_bb2
  label label_bb2
  label_bb2$marker := true
  inhale basic_block_marker$label_bb2$marker()
  // Prepare lifetimes for statement mid bb2[0]
  // bb2[0] resume
  goto resume_panic_label
  label resume_panic_label
  resume_panic_label$marker := true
  inhale basic_block_marker$resume_panic_label$marker()
  goto end_label
  label label_1_custom
  label_1_custom$marker := true
  inhale basic_block_marker$label_1_custom$marker()
  // Prepare lifetimes for block bb1
  goto label_bb1
  label label_bb1
  label_bb1$marker := true
  inhale basic_block_marker$label_bb1$marker()
  // Prepare lifetimes for statement mid bb1[0]
  // bb1[0] return
  goto return_label
  label return_label
  return_label$marker := true
  inhale basic_block_marker$return_label$marker()
  // Deallocate the parameters.
  exhale acc(MemoryBlock(_1$address, Size$trusted$m_VecWrapper$struct$m_Tmp$$$()), write)
  // Deallocate the return place.
  exhale acc(OwnedNonAliased$Tuple$$$(_0$place(), _0$address, _0$snapshot$1), write) &&
    valid$Snap$Tuple$$$(_0$snapshot$1)
  // Lifetime postconditions.
  lft_tok_sep_return$2(lft_1$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    6)
  exhale acc(LifetimeToken(bw0$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  exhale acc(LifetimeToken(bw1$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  goto end_label
  label end_label
  end_label$marker := true
  inhale basic_block_marker$end_label$marker()
  goto end_of_method
  label end_of_method
}

method assign$Tuple$$$$Aggregate$Tuple$$$$$$$(target_place: Place, target_address: Address)
  returns (result_value: Snap$Tuple$$$)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$Tuple$$$$()), write)
  ensures acc(OwnedNonAliased$Tuple$$$(target_place, target_address, result_value), write)
  ensures valid$Snap$Tuple$$$(constructor$Snap$Tuple$$$$())
  ensures result_value == constructor$Snap$Tuple$$$$()
  ensures valid$Snap$Tuple$$$(result_value)


method consume$Move$trusted$m_VecWrapper$struct$m_Tmp$$(operand1_place: Place,
  operand1_root_address: Address, operand1_value: Snap$trusted$m_VecWrapper$struct$m_Tmp$$)
  requires acc(OwnedNonAliased$trusted$m_VecWrapper$struct$m_Tmp$$(operand1_place,
    operand1_root_address, operand1_value), write)
  requires valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(operand1_value)
  ensures acc(MemoryBlock(compute_address(operand1_place, operand1_root_address),
    Size$trusted$m_VecWrapper$struct$m_Tmp$$$()), write)


method lft_tok_sep_return$2(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  rd_perm: Perm)
  requires none < rd_perm
  requires acc(LifetimeToken(lft), rd_perm)
  requires lft == intersect(Set(lft_1, lft_2))
  ensures acc(LifetimeToken(lft_1), rd_perm)
  ensures acc(LifetimeToken(lft_2), rd_perm)


method lft_tok_sep_take$2(lft_1: Lifetime, lft_2: Lifetime, rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires acc(LifetimeToken(lft_1), rd_perm)
  requires acc(LifetimeToken(lft_2), rd_perm)
  ensures acc(LifetimeToken(lft), rd_perm)
  ensures lft == intersect(Set(lft_1, lft_2))
