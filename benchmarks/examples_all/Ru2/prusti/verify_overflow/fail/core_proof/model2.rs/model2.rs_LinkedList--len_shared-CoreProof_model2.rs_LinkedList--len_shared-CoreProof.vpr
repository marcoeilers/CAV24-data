domain Address  {
  
  function field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_0: Address): Address 
  
  function field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_0: Address): Address 
  
  function field_address$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(_0: Address): Address 
  
  function field_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(_0: Address): Address 
  
  function variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(_0: Address): Address 
  
  function variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(_0: Address): Address 
  
  function field_address$$struct$m_LinkedList$$$f$val(_0: Address): Address 
  
  function field_address$$struct$m_LinkedList$$$f$next(_0: Address): Address 
}

domain Bytes  {
  
  
}

domain Lifetime  {
  
  function included(_0: Lifetime, _1: Lifetime): Bool 
  
  function intersect(_0: Set[Lifetime]): Lifetime 
  
  axiom included_in_itself$ {
    (forall lft: Lifetime :: { included(lft, lft) } included(lft, lft))
  }
  
  axiom included_intersect$1 {
    (forall lft_1: Set[Lifetime], lft_2: Set[Lifetime] ::
      { included(intersect(lft_1), intersect(lft_2)) }
      included(intersect(lft_1), intersect(lft_2)) == (lft_2 subset lft_1))
  }
  
  axiom included_intersect$2 {
    (forall lft_1: Set[Lifetime], lft_2: Lifetime ::
      { included(intersect(lft_1), lft_2) }
      included(intersect(lft_1), lft_2) == (lft_2 in lft_1))
  }
  
  axiom intersect_singleton$ {
    (forall lft: Lifetime ::
      { intersect(Set(lft)) }
      intersect(Set(lft)) == lft)
  }
}

domain MarkerCalls  {
  
  function basic_block_marker$start_label$marker(): Bool 
  
  function basic_block_marker$label_entry$marker(): Bool 
  
  function basic_block_marker$label_bb0$marker(): Bool 
  
  function basic_block_marker$label_4_custom$marker(): Bool 
  
  function basic_block_marker$label_bb3$marker(): Bool 
  
  function basic_block_marker$label_3_custom$marker(): Bool 
  
  function basic_block_marker$label_bb2$marker(): Bool 
  
  function basic_block_marker$label_bb6$marker(): Bool 
  
  function basic_block_marker$label_bb7$marker(): Bool 
  
  function basic_block_marker$label_bb9$marker(): Bool 
  
  function basic_block_marker$label_bb10$marker(): Bool 
  
  function basic_block_marker$label_7_custom$marker(): Bool 
  
  function basic_block_marker$label_6_custom$marker(): Bool 
  
  function basic_block_marker$label_bb11$marker(): Bool 
  
  function basic_block_marker$label_9_custom$marker(): Bool 
  
  function basic_block_marker$label_bb12$marker(): Bool 
  
  function basic_block_marker$label_bb13$marker(): Bool 
  
  function basic_block_marker$label_bb15$marker(): Bool 
  
  function basic_block_marker$label_bb16$marker(): Bool 
  
  function basic_block_marker$label_2_custom$marker(): Bool 
  
  function basic_block_marker$label_bb1$marker(): Bool 
  
  function basic_block_marker$label_bb4$marker(): Bool 
  
  function basic_block_marker$label_bb17$marker(): Bool 
  
  function basic_block_marker$return_label$marker(): Bool 
  
  function basic_block_marker$label_10_custom$marker(): Bool 
  
  function basic_block_marker$label_bb18$marker(): Bool 
  
  function basic_block_marker$resume_panic_label$marker(): Bool 
  
  function basic_block_marker$end_label$marker(): Bool 
}

domain Place  {
  
  unique function _1$place(): Place 
  
  function deref_reference_place(_0: Place): Place 
  
  unique function _2$place(): Place 
  
  function field_place$$struct$m_LinkedList$$$f$next(_0: Place): Place 
  
  unique function _3$place(): Place 
  
  function field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(_0: Place): Place 
  
  function variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(_0: Place): Place 
  
  unique function _4$place(): Place 
  
  function field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(_0: Place): Place 
  
  unique function _6$place(): Place 
  
  unique function _5$place(): Place 
  
  unique function _10$place(): Place 
  
  unique function _9$place(): Place 
  
  unique function _18$place(): Place 
  
  unique function _17$place(): Place 
  
  unique function _16$place(): Place 
  
  unique function _15$place(): Place 
  
  function field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_0: Place): Place 
  
  function field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_0: Place): Place 
  
  unique function _19$place(): Place 
  
  unique function _14$place(): Place 
  
  unique function _21$place(): Place 
  
  unique function _20$place(): Place 
  
  unique function _0$place(): Place 
  
  function variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(_0: Place): Place 
  
  function field_place$$struct$m_LinkedList$$$f$val(_0: Place): Place 
}

domain Size  {
  
  function Size$Usize$(): Snap$Usize 
  
  function Size$Isize$(): Snap$Usize 
  
  function Size$Tuple$$Usize$Bool$$Usize$Bool$$(): Snap$Usize 
  
  function Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(): Snap$Usize 
  
  function Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(): Snap$Usize 
  
  function Size$Tuple$$$$(): Snap$Usize 
  
  function Size$Bool$(): Snap$Usize 
  
  function PaddingSize$Tuple$$$$(): Snap$Usize 
  
  function Size$ref$Shared$struct$m_LinkedList$$(): Snap$Usize 
  
  function PaddingSize$Tuple$$Usize$Bool$$Usize$Bool$$(): Snap$Usize 
  
  function PaddingSize$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(): Snap$Usize 
  
  function PaddingSize$struct$m_LinkedList$$(): Snap$Usize 
  
  function Size$I64$(): Snap$Usize 
}

domain Snap$Bool  {
  
  function constructor$Snap$Bool$(value: Bool): Snap$Bool 
  
  function destructor$Snap$Bool$$value(value: Snap$Bool): Bool 
  
  function valid$Snap$Bool(_0: Snap$Bool): Bool 
  
  function constructor$Snap$Bool$EqCmp_Isize(left: Snap$Isize, right: Snap$Isize): Snap$Bool 
  
  function destructor$Snap$Bool$EqCmp_Isize$left(value: Snap$Bool): Snap$Isize 
  
  function destructor$Snap$Bool$EqCmp_Isize$right(value: Snap$Bool): Snap$Isize 
  
  function to_bytes$Bool(snapshot: Snap$Bool): Bytes 
  
  axiom constructor$Snap$Bool$$bottom_up_injectivity_axiom {
    (forall value: Bool ::
      { constructor$Snap$Bool$(value) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$(value)) == value)
  }
  
  axiom constructor$Snap$Bool$$top_down_injectivity_axiom {
    (forall value: Snap$Bool ::
      { valid$Snap$Bool(value) }
      valid$Snap$Bool(value) ==>
      value == constructor$Snap$Bool$(destructor$Snap$Bool$$value(value)))
  }
  
  axiom Snap$Bool$$validity_axiom_bottom_up_alternative {
    (forall value: Bool ::
      { valid$Snap$Bool(constructor$Snap$Bool$(value)) }
      valid$Snap$Bool(constructor$Snap$Bool$(value)))
  }
  
  axiom EqCmp_Isize$simplification_axiom {
    (forall left: Int, right: Int ::
      { constructor$Snap$Bool$EqCmp_Isize(constructor$Snap$Isize$(left), constructor$Snap$Isize$(right)) }
      valid$Snap$Isize(constructor$Snap$Isize$(left)) &&
      valid$Snap$Isize(constructor$Snap$Isize$(right)) ==>
      constructor$Snap$Bool$EqCmp_Isize(constructor$Snap$Isize$(left), constructor$Snap$Isize$(right)) ==
      constructor$Snap$Bool$(left == right))
  }
  
  axiom EqCmp_Isize$eval_axiom {
    (forall left: Snap$Isize, right: Snap$Isize ::
      { destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(left,
      right)) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(left, right)) ==
      (destructor$Snap$Isize$$value(left) ==
      destructor$Snap$Isize$$value(right)))
  }
}

domain Snap$I64  {
  
  function constructor$Snap$I64$(value: Int): Snap$I64 
  
  function destructor$Snap$I64$$value(value: Snap$I64): Int 
  
  function valid$Snap$I64(_0: Snap$I64): Bool 
  
  function to_bytes$I64(snapshot: Snap$I64): Bytes 
  
  axiom constructor$Snap$I64$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$I64$(value) }
      destructor$Snap$I64$$value(constructor$Snap$I64$(value)) == value)
  }
  
  axiom constructor$Snap$I64$$top_down_injectivity_axiom {
    (forall value: Snap$I64 ::
      { valid$Snap$I64(value) }
      valid$Snap$I64(value) ==>
      value == constructor$Snap$I64$(destructor$Snap$I64$$value(value)))
  }
  
  axiom Snap$I64$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$I64(constructor$Snap$I64$(value)) }
      valid$Snap$I64(constructor$Snap$I64$(value)) ==
      (-9223372036854775808 <= value && value <= 9223372036854775807))
  }
}

domain Snap$Isize  {
  
  function constructor$Snap$Isize$(value: Int): Snap$Isize 
  
  function destructor$Snap$Isize$$value(value: Snap$Isize): Int 
  
  function valid$Snap$Isize(_0: Snap$Isize): Bool 
  
  function to_bytes$Isize(snapshot: Snap$Isize): Bytes 
  
  axiom constructor$Snap$Isize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Isize$(value) }
      destructor$Snap$Isize$$value(constructor$Snap$Isize$(value)) == value)
  }
  
  axiom constructor$Snap$Isize$$top_down_injectivity_axiom {
    (forall value: Snap$Isize ::
      { valid$Snap$Isize(value) }
      valid$Snap$Isize(value) ==>
      value == constructor$Snap$Isize$(destructor$Snap$Isize$$value(value)))
  }
  
  axiom Snap$Isize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Isize(constructor$Snap$Isize$(value)) }
      valid$Snap$Isize(constructor$Snap$Isize$(value)) ==
      (-9223372036854775808 <= value && value <= 9223372036854775807))
  }
}

domain Snap$Tuple$$$  {
  
  function constructor$Snap$Tuple$$$$(): Snap$Tuple$$$ 
  
  function valid$Snap$Tuple$$$(_0: Snap$Tuple$$$): Bool 
  
  function to_bytes$Tuple$$$(snapshot: Snap$Tuple$$$): Bytes 
  
  axiom Snap$Tuple$$$$validity_axiom_bottom_up_alternative_no_parameters {
    valid$Snap$Tuple$$$(constructor$Snap$Tuple$$$$())
  }
}

domain Snap$Tuple$$Usize$Bool$$Usize$Bool$  {
  
  function constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0: Snap$Usize,
  tuple_1: Snap$Bool): Snap$Tuple$$Usize$Bool$$Usize$Bool$ 
  
  function destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(value: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Snap$Usize 
  
  function destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(value: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Snap$Bool 
  
  function valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(_0: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Bool 
  
  function to_bytes$Tuple$$Usize$Bool$$Usize$Bool$(snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Bytes 
  
  axiom constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$bottom_up_injectivity_axiom {
    (forall tuple_0: Snap$Usize, tuple_1: Snap$Bool ::
      { constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0, tuple_1) }
      { constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0, tuple_1) }
      destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)) ==
      tuple_0 &&
      destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)) ==
      tuple_1)
  }
  
  axiom constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$top_down_injectivity_axiom {
    (forall value: Snap$Tuple$$Usize$Bool$$Usize$Bool$ ::
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(value), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(value) }
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(value), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(value) }
      valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(value) ==>
      value ==
      constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(value),
      destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(value)))
  }
  
  axiom Snap$Tuple$$Usize$Bool$$Usize$Bool$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$ ::
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot) }
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot) }
      valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot) ==
      (valid$Snap$Usize(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot)) &&
      valid$Snap$Bool(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot))))
  }
  
  axiom Snap$Tuple$$Usize$Bool$$Usize$Bool$$$validity_axiom_bottom_up_alternative {
    (forall tuple_0: Snap$Usize, tuple_1: Snap$Bool ::
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)), valid$Snap$Usize(tuple_0), valid$Snap$Bool(tuple_1) }
      valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)) ==
      (valid$Snap$Usize(tuple_0) && valid$Snap$Bool(tuple_1)))
  }
}

domain Snap$Usize  {
  
  function constructor$Snap$Usize$(value: Int): Snap$Usize 
  
  function destructor$Snap$Usize$$value(value: Snap$Usize): Int 
  
  function valid$Snap$Usize(_0: Snap$Usize): Bool 
  
  function to_bytes$Usize(snapshot: Snap$Usize): Bytes 
  
  function constructor$Snap$Usize$Add_Usize(left: Snap$Usize, right: Snap$Usize): Snap$Usize 
  
  function destructor$Snap$Usize$Add_Usize$left(value: Snap$Usize): Snap$Usize 
  
  function destructor$Snap$Usize$Add_Usize$right(value: Snap$Usize): Snap$Usize 
  
  axiom constructor$Snap$Usize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Usize$(value) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$(value)) == value)
  }
  
  axiom constructor$Snap$Usize$$top_down_injectivity_axiom {
    (forall value: Snap$Usize ::
      { valid$Snap$Usize(value) }
      valid$Snap$Usize(value) ==>
      value == constructor$Snap$Usize$(destructor$Snap$Usize$$value(value)))
  }
  
  axiom Snap$Usize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Usize(constructor$Snap$Usize$(value)) }
      valid$Snap$Usize(constructor$Snap$Usize$(value)) ==
      (0 <= value && value <= 18446744073709551615))
  }
  
  axiom Add_Usize$simplification_axiom {
    (forall left: Int, right: Int ::
      { constructor$Snap$Usize$Add_Usize(constructor$Snap$Usize$(left), constructor$Snap$Usize$(right)) }
      valid$Snap$Usize(constructor$Snap$Usize$(left)) &&
      valid$Snap$Usize(constructor$Snap$Usize$(right)) ==>
      constructor$Snap$Usize$Add_Usize(constructor$Snap$Usize$(left), constructor$Snap$Usize$(right)) ==
      constructor$Snap$Usize$(left + right))
  }
  
  axiom Add_Usize$eval_axiom {
    (forall left: Snap$Usize, right: Snap$Usize ::
      { destructor$Snap$Usize$$value(constructor$Snap$Usize$Add_Usize(left,
      right)) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$Add_Usize(left, right)) ==
      destructor$Snap$Usize$$value(left) +
      destructor$Snap$Usize$$value(right))
  }
}

domain Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(): Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function to_bytes$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_bottom_up_alternative_no_parameters {
    valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$$())
  }
}

domain Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function to_bytes$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$bottom_up_injectivity_axiom {
    (forall f$0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0) }
      destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0)) ==
      f$0)
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$top_down_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(value)))
  }
  
  axiom Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(snapshot) }
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(snapshot)))
  }
  
  axiom Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_bottom_up_alternative {
    (forall f$0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0)),
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(f$0) }
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0)) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(f$0))
  }
}

domain Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(value: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Int 
  
  function to_bytes$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$bottom_up_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(value) }
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(value)) ==
      value)
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$top_down_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) &&
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==
      0 ==>
      value ==
      constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(value)))
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$bottom_up_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(value) }
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(value)) ==
      value)
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$top_down_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) &&
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==
      1 ==>
      value ==
      constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(value)))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_top_down_enum {
    (forall snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(snapshot) }
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(snapshot) }
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      (0 <=
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) &&
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) <=
      1 &&
      ((discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      0 ==>
      valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(snapshot))) &&
      (discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      1 ==>
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(snapshot))))))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$validity_axiom_bottom_up_enum_variant {
    (forall variant: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant),
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant)) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant)) ==
      valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$discriminant_axiom {
    (forall variant: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant) }
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant)) ==
      0)
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$validity_axiom_bottom_up_enum_variant {
    (forall variant: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant),
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant)) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant)) ==
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$discriminant_axiom {
    (forall variant: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant) }
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant)) ==
      1)
  }
}

domain Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function to_bytes$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  function constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value: Address): Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$value(value: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Address 
  
  function valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  axiom constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value) }
      destructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$value(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$value(value)))
  }
  
  axiom Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value)) }
      valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value)))
  }
}

domain Snap$ptr$struct$m_LinkedList$  {
  
  function to_bytes$ptr$struct$m_LinkedList$(snapshot: Snap$ptr$struct$m_LinkedList$): Bytes 
  
  function constructor$Snap$ptr$struct$m_LinkedList$$(value: Address): Snap$ptr$struct$m_LinkedList$ 
  
  function destructor$Snap$ptr$struct$m_LinkedList$$$value(value: Snap$ptr$struct$m_LinkedList$): Address 
  
  function valid$Snap$ptr$struct$m_LinkedList$(_0: Snap$ptr$struct$m_LinkedList$): Bool 
  
  axiom constructor$Snap$ptr$struct$m_LinkedList$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$struct$m_LinkedList$$(value) }
      destructor$Snap$ptr$struct$m_LinkedList$$$value(constructor$Snap$ptr$struct$m_LinkedList$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$struct$m_LinkedList$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$struct$m_LinkedList$ ::
      { valid$Snap$ptr$struct$m_LinkedList$(value) }
      valid$Snap$ptr$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$ptr$struct$m_LinkedList$$(destructor$Snap$ptr$struct$m_LinkedList$$$value(value)))
  }
  
  axiom Snap$ptr$struct$m_LinkedList$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$struct$m_LinkedList$(constructor$Snap$ptr$struct$m_LinkedList$$(value)) }
      valid$Snap$ptr$struct$m_LinkedList$(constructor$Snap$ptr$struct$m_LinkedList$$(value)))
  }
}

domain Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$  {
  
  function to_bytes$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bytes 
  
  function constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value: Address): Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function destructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$value(value: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$): Address 
  
  function valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(_0: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bool 
  
  axiom constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      destructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$value(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) }
      valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) ==>
      value ==
      constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$value(value)))
  }
  
  axiom Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value)) }
      valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value)))
  }
}

domain Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address: Address,
  target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Address 
  
  function destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function to_bytes$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current) }
      { constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current) }
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(value) }
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(value),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)), valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current)),
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current)) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current))
  }
}

domain Snap$ref$Shared$struct$m_LinkedList$  {
  
  function constructor$Snap$ref$Shared$struct$m_LinkedList$$(address: Address,
  target_current: Snap$struct$m_LinkedList$): Snap$ref$Shared$struct$m_LinkedList$ 
  
  function destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(value: Snap$ref$Shared$struct$m_LinkedList$): Address 
  
  function destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value: Snap$ref$Shared$struct$m_LinkedList$): Snap$struct$m_LinkedList$ 
  
  function valid$Snap$ref$Shared$struct$m_LinkedList$(_0: Snap$ref$Shared$struct$m_LinkedList$): Bool 
  
  function constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current: Snap$struct$m_LinkedList$): Snap$ref$Shared$struct$m_LinkedList$ 
  
  function to_bytes$ref$Shared$struct$m_LinkedList$(snapshot: Snap$ref$Shared$struct$m_LinkedList$): Bytes 
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$struct$m_LinkedList$ ::
      { constructor$Snap$ref$Shared$struct$m_LinkedList$$(address, target_current) }
      { constructor$Snap$ref$Shared$struct$m_LinkedList$$(address, target_current) }
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(value), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(value) }
      { valid$Snap$ref$Shared$struct$m_LinkedList$(value), destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$ref$Shared$struct$m_LinkedList$$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(value),
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot), destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot) ==
      valid$Snap$struct$m_LinkedList$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)), valid$Snap$struct$m_LinkedList$(target_current) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)) ==
      valid$Snap$struct$m_LinkedList$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$struct$m_LinkedList$ ::
      { constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(value) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot), destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot) ==
      valid$Snap$struct$m_LinkedList$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current)),
      valid$Snap$struct$m_LinkedList$(target_current) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current)) ==
      valid$Snap$struct$m_LinkedList$(target_current))
  }
}

domain Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$  {
  
  function constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address: Address,
  target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Address 
  
  function destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bool 
  
  function constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function to_bytes$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bytes 
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current) }
      { constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current) }
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(value) }
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(value),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)), valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current)),
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current)) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current))
  }
}

domain Snap$struct$m_LinkedList$  {
  
  function constructor$Snap$struct$m_LinkedList$$(f$val: Snap$I64, f$next: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$struct$m_LinkedList$ 
  
  function destructor$Snap$struct$m_LinkedList$$$f$val(value: Snap$struct$m_LinkedList$): Snap$I64 
  
  function destructor$Snap$struct$m_LinkedList$$$f$next(value: Snap$struct$m_LinkedList$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$struct$m_LinkedList$(_0: Snap$struct$m_LinkedList$): Bool 
  
  function to_bytes$struct$m_LinkedList$(snapshot: Snap$struct$m_LinkedList$): Bytes 
  
  axiom constructor$Snap$struct$m_LinkedList$$$bottom_up_injectivity_axiom {
    (forall f$val: Snap$I64, f$next: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$struct$m_LinkedList$$(f$val, f$next) }
      { constructor$Snap$struct$m_LinkedList$$(f$val, f$next) }
      destructor$Snap$struct$m_LinkedList$$$f$val(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)) ==
      f$val &&
      destructor$Snap$struct$m_LinkedList$$$f$next(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)) ==
      f$next)
  }
  
  axiom constructor$Snap$struct$m_LinkedList$$$top_down_injectivity_axiom {
    (forall value: Snap$struct$m_LinkedList$ ::
      { valid$Snap$struct$m_LinkedList$(value), destructor$Snap$struct$m_LinkedList$$$f$val(value) }
      { valid$Snap$struct$m_LinkedList$(value), destructor$Snap$struct$m_LinkedList$$$f$next(value) }
      valid$Snap$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$struct$m_LinkedList$$(destructor$Snap$struct$m_LinkedList$$$f$val(value),
      destructor$Snap$struct$m_LinkedList$$$f$next(value)))
  }
  
  axiom Snap$struct$m_LinkedList$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$struct$m_LinkedList$ ::
      { valid$Snap$struct$m_LinkedList$(snapshot), destructor$Snap$struct$m_LinkedList$$$f$val(snapshot) }
      { valid$Snap$struct$m_LinkedList$(snapshot), destructor$Snap$struct$m_LinkedList$$$f$next(snapshot) }
      valid$Snap$struct$m_LinkedList$(snapshot) ==
      (valid$Snap$I64(destructor$Snap$struct$m_LinkedList$$$f$val(snapshot)) &&
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$struct$m_LinkedList$$$f$next(snapshot))))
  }
  
  axiom Snap$struct$m_LinkedList$$$validity_axiom_bottom_up_alternative {
    (forall f$val: Snap$I64, f$next: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$struct$m_LinkedList$(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)), valid$Snap$I64(f$val), valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(f$next) }
      valid$Snap$struct$m_LinkedList$(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)) ==
      (valid$Snap$I64(f$val) &&
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(f$next)))
  }
}

domain Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$  {
  
  function valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(_0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bool 
  
  function to_bytes$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bytes 
}

domain ComputeAddress  {
  
  function compute_address(place: Place, address: Address): Address 
  
  axiom root$1$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_1$place(), address) }
      compute_address(_1$place(), address) == address)
  }
  
  axiom ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot))
  }
  
  axiom root$2$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_2$place(), address) }
      compute_address(_2$place(), address) == address)
  }
  
  axiom root$3$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_3$place(), address) }
      compute_address(_3$place(), address) == address)
  }
  
  axiom ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot))
  }
  
  axiom root$4$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_4$place(), address) }
      compute_address(_4$place(), address) == address)
  }
  
  axiom root$5$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_6$place(), address) }
      compute_address(_6$place(), address) == address)
  }
  
  axiom root$6$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_5$place(), address) }
      compute_address(_5$place(), address) == address)
  }
  
  axiom root$7$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_10$place(), address) }
      compute_address(_10$place(), address) == address)
  }
  
  axiom root$8$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_9$place(), address) }
      compute_address(_9$place(), address) == address)
  }
  
  axiom root$9$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_18$place(), address) }
      compute_address(_18$place(), address) == address)
  }
  
  axiom root$10$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_17$place(), address) }
      compute_address(_17$place(), address) == address)
  }
  
  axiom ref$Shared$struct$m_LinkedList$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$struct$m_LinkedList$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot))
  }
  
  axiom root$11$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_16$place(), address) }
      compute_address(_16$place(), address) == address)
  }
  
  axiom root$12$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_15$place(), address) }
      compute_address(_15$place(), address) == address)
  }
  
  axiom Tuple$$Usize$Bool$$Usize$Bool$$tuple_0$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(place),
      address) }
      compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(place),
      address) ==
      field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(compute_address(place,
      address)))
  }
  
  axiom Tuple$$Usize$Bool$$Usize$Bool$$tuple_1$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(place),
      address) }
      compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(place),
      address) ==
      field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(compute_address(place,
      address)))
  }
  
  axiom root$13$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_19$place(), address) }
      compute_address(_19$place(), address) == address)
  }
  
  axiom root$14$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_14$place(), address) }
      compute_address(_14$place(), address) == address)
  }
  
  axiom root$15$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_21$place(), address) }
      compute_address(_21$place(), address) == address)
  }
  
  axiom root$16$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_20$place(), address) }
      compute_address(_20$place(), address) == address)
  }
  
  axiom root$17$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_0$place(), address) }
      compute_address(_0$place(), address) == address)
  }
  
  axiom enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$f$0$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(place),
      address) }
      compute_address(field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(place),
      address) ==
      field_address$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(compute_address(place,
      address)))
  }
  
  axiom enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$discriminant$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(place),
      address) }
      compute_address(field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(place),
      address) ==
      field_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(compute_address(place,
      address)))
  }
  
  axiom enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(place),
      address) }
      compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(place),
      address) ==
      variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(compute_address(place,
      address)))
  }
  
  axiom enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(place),
      address) }
      compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(place),
      address) ==
      variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(compute_address(place,
      address)))
  }
  
  axiom struct$m_LinkedList$$f$val$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$struct$m_LinkedList$$$f$val(place), address) }
      compute_address(field_place$$struct$m_LinkedList$$$f$val(place), address) ==
      field_address$$struct$m_LinkedList$$$f$val(compute_address(place, address)))
  }
  
  axiom struct$m_LinkedList$$f$next$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$struct$m_LinkedList$$$f$next(place), address) }
      compute_address(field_place$$struct$m_LinkedList$$$f$next(place), address) ==
      field_address$$struct$m_LinkedList$$$f$next(compute_address(place, address)))
  }
}

function MemoryBlock$bytes(address: Address, size: Snap$Usize): Bytes
  requires acc(MemoryBlock(address, size), wildcard)


predicate OwnedNonAliased$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, snapshot: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$) {
  valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write) &&
  acc(OwnedNonAliased$trusted$m_BoxWrapper$struct$m_LinkedList$$(field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(place),
  root_address, destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(snapshot)), write)
}

predicate OwnedNonAliased$trusted$m_BoxWrapper$struct$m_LinkedList$$(place: Place,
  root_address: Address, snapshot: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$) 

predicate OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$) {
  valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write) &&
  acc(OwnedNonAliased$Isize(field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(place),
  root_address, constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot))), write) &&
  (discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
  0 ?
    acc(OwnedNonAliased$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(place),
    root_address, destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(snapshot)), write) :
    discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
    1 &&
    acc(OwnedNonAliased$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(place),
    root_address, destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(snapshot)), write))
}

predicate OwnedNonAliased$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, snapshot: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$) {
  valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write)
}

predicate OwnedNonAliased$Tuple$$$(place: Place, root_address: Address, snapshot: Snap$Tuple$$$) {
  valid$Snap$Tuple$$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$Tuple$$$$()), write)
}

predicate OwnedNonAliased$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$,
  lft_8$alive: Bool, lft_8: Lifetime) {
  valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()) ==
  to_bytes$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot))) &&
  acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(deref_reference_place(place),
  destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot),
  destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot),
  lft_8), write)
}

predicate FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, current_snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$,
  reference_lifetime: Lifetime) {
  valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(current_snapshot) &&
  acc(FracRef2$Isize(field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(place),
  root_address, constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(current_snapshot)),
  reference_lifetime), write) &&
  (discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(current_snapshot) ==
  0 ?
    acc(FracRef2$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(place),
    root_address, destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(current_snapshot),
    reference_lifetime), write) :
    discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(current_snapshot) ==
    1 &&
    acc(FracRef2$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(place),
    root_address, destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(current_snapshot),
    reference_lifetime), write))
}

predicate FracRef2$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, current_snapshot: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$,
  reference_lifetime: Lifetime) {
  valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(current_snapshot)
}

predicate FracRef2$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place: Place,
  root_address: Address, current_snapshot: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$,
  reference_lifetime: Lifetime) {
  valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(current_snapshot) &&
  acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(place),
  root_address, destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(current_snapshot),
  reference_lifetime), write)
}

predicate FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(place: Place,
  root_address: Address, current_snapshot: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  reference_lifetime: Lifetime) 

predicate FracRef2$Isize(place: Place, root_address: Address, current_snapshot: Snap$Isize,
  reference_lifetime: Lifetime) 

predicate OwnedNonAliased$ref$Shared$struct$m_LinkedList$(place: Place, root_address: Address,
  snapshot: Snap$ref$Shared$struct$m_LinkedList$, lft_erased$alive: Bool, lft_erased: Lifetime) {
  valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$ref$Shared$struct$m_LinkedList$$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$ref$Shared$struct$m_LinkedList$$()) ==
  to_bytes$ptr$struct$m_LinkedList$(constructor$Snap$ptr$struct$m_LinkedList$$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot))) &&
  acc(FracRef2$struct$m_LinkedList$(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot),
  destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot),
  lft_erased), write)
}

predicate FracRef2$struct$m_LinkedList$(place: Place, root_address: Address,
  current_snapshot: Snap$struct$m_LinkedList$, reference_lifetime: Lifetime) {
  valid$Snap$struct$m_LinkedList$(current_snapshot) &&
  acc(FracRef2$I64(field_place$$struct$m_LinkedList$$$f$val(place), root_address,
  destructor$Snap$struct$m_LinkedList$$$f$val(current_snapshot), reference_lifetime), write) &&
  acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(field_place$$struct$m_LinkedList$$$f$next(place),
  root_address, destructor$Snap$struct$m_LinkedList$$$f$next(current_snapshot),
  reference_lifetime), write)
}

predicate FracRef2$I64(place: Place, root_address: Address, current_snapshot: Snap$I64,
  reference_lifetime: Lifetime) 

predicate OwnedNonAliased$Tuple$$Usize$Bool$$Usize$Bool$(place: Place, root_address: Address,
  snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$) {
  valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$Tuple$$Usize$Bool$$Usize$Bool$$()), write) &&
  acc(OwnedNonAliased$Usize(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(place),
  root_address, destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot)), write) &&
  acc(OwnedNonAliased$Bool(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(place),
  root_address, destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot)), write)
}

predicate OwnedNonAliased$struct$m_LinkedList$(place: Place, root_address: Address,
  snapshot: Snap$struct$m_LinkedList$) {
  valid$Snap$struct$m_LinkedList$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), PaddingSize$struct$m_LinkedList$$()), write) &&
  acc(OwnedNonAliased$I64(field_place$$struct$m_LinkedList$$$f$val(place), root_address,
  destructor$Snap$struct$m_LinkedList$$$f$val(snapshot)), write) &&
  acc(OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(field_place$$struct$m_LinkedList$$$f$next(place),
  root_address, destructor$Snap$struct$m_LinkedList$$$f$next(snapshot)), write)
}

predicate OwnedNonAliased$I64(place: Place, root_address: Address, snapshot: Snap$I64) {
  valid$Snap$I64(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$I64$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$I64$()) ==
  to_bytes$I64(snapshot)
}

predicate OwnedNonAliased$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(place: Place,
  root_address: Address, snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_12$alive: Bool, lft_12: Lifetime) {
  valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()) ==
  to_bytes$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot))) &&
  acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(deref_reference_place(place),
  destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot),
  destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot),
  lft_12), write)
}

predicate OwnedNonAliased$Isize(place: Place, root_address: Address, snapshot: Snap$Isize) {
  valid$Snap$Isize(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$Isize$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$Isize$()) ==
  to_bytes$Isize(snapshot)
}

predicate OwnedNonAliased$Usize(place: Place, root_address: Address, snapshot: Snap$Usize) {
  valid$Snap$Usize(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$Usize$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$Usize$()) ==
  to_bytes$Usize(snapshot)
}

predicate OwnedNonAliased$Bool(place: Place, root_address: Address, snapshot: Snap$Bool) {
  valid$Snap$Bool(snapshot) &&
  acc(MemoryBlock(compute_address(place, root_address), Size$Bool$()), write) &&
  MemoryBlock$bytes(compute_address(place, root_address), Size$Bool$()) ==
  to_bytes$Bool(snapshot)
}

predicate DeadLifetimeToken(lifetime: Lifetime) 

predicate LifetimeToken(lifetime: Lifetime) 

predicate MemoryBlock(address: Address, size: Snap$Usize) 

predicate MemoryBlockStackDrop(address: Address, size: Snap$Usize) 

method m_LinkedList$$len_shared$CoreProof()
{
  var _0$address: Address
  var _0$snapshot$0: Snap$Usize
  var _0$snapshot$1: Snap$Usize
  var _0$snapshot$2: Snap$Usize
  var _0$snapshot$3: Snap$Usize
  var _0$snapshot$4: Snap$Usize
  var _1$address: Address
  var _1$snapshot$0: Snap$ref$Shared$struct$m_LinkedList$
  var _10$address: Address
  var _10$snapshot$0: Snap$Bool
  var _10$snapshot$1: Snap$Bool
  var _10$snapshot$2: Snap$Bool
  var _10$snapshot$3: Snap$Bool
  var _10$snapshot$4: Snap$Bool
  var _14$address: Address
  var _14$snapshot$0: Snap$Usize
  var _14$snapshot$1: Snap$Usize
  var _14$snapshot$2: Snap$Usize
  var _14$snapshot$3: Snap$Usize
  var _15$address: Address
  var _15$snapshot$0: Snap$Usize
  var _16$address: Address
  var _16$snapshot$0: Snap$ref$Shared$struct$m_LinkedList$
  var _16$snapshot$1: Snap$ref$Shared$struct$m_LinkedList$
  var _16$snapshot$2: Snap$ref$Shared$struct$m_LinkedList$
  var _16$snapshot$3: Snap$ref$Shared$struct$m_LinkedList$
  var _16$snapshot$4: Snap$ref$Shared$struct$m_LinkedList$
  var _16$snapshot$5: Snap$ref$Shared$struct$m_LinkedList$
  var _17$address: Address
  var _17$snapshot$0: Snap$ref$Shared$struct$m_LinkedList$
  var _18$address: Address
  var _18$snapshot$0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _18$snapshot$1: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _18$snapshot$2: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _18$snapshot$3: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _18$snapshot$4: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _19$address: Address
  var _19$snapshot$0: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _19$snapshot$1: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _19$snapshot$2: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _19$snapshot$3: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _19$snapshot$4: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _19$snapshot$5: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _2$address: Address
  var _2$snapshot$0: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$
  var _2$snapshot$1: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$
  var _20$address: Address
  var _20$snapshot$0: Snap$Tuple$$$
  var _20$snapshot$1: Snap$Tuple$$$
  var _20$snapshot$2: Snap$Tuple$$$
  var _20$snapshot$3: Snap$Tuple$$$
  var _21$address: Address
  var _21$snapshot$0: Snap$Bool
  var _21$snapshot$1: Snap$Bool
  var _21$snapshot$2: Snap$Bool
  var _21$snapshot$3: Snap$Bool
  var _3$address: Address
  var _3$snapshot$1: Snap$Isize
  var _4$address: Address
  var _4$snapshot$0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$1: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$2: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$3: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$4: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _5$address: Address
  var _5$snapshot$0: Snap$Tuple$$$
  var _5$snapshot$1: Snap$Tuple$$$
  var _5$snapshot$2: Snap$Tuple$$$
  var _5$snapshot$3: Snap$Tuple$$$
  var _5$snapshot$4: Snap$Tuple$$$
  var _6$address: Address
  var _6$snapshot$0: Snap$Bool
  var _6$snapshot$1: Snap$Bool
  var _6$snapshot$2: Snap$Bool
  var _6$snapshot$3: Snap$Bool
  var _6$snapshot$4: Snap$Bool
  var _9$address: Address
  var _9$snapshot$0: Snap$Tuple$$$
  var _9$snapshot$1: Snap$Tuple$$$
  var _9$snapshot$2: Snap$Tuple$$$
  var _9$snapshot$3: Snap$Tuple$$$
  var _9$snapshot$4: Snap$Tuple$$$
  var bw5$snapshot$0: Lifetime
  var bw6$snapshot$0: Lifetime
  var bw7$snapshot$0: Lifetime
  var end_label$marker: Bool
  var label_10_custom$marker: Bool
  var label_2_custom$marker: Bool
  var label_3_custom$marker: Bool
  var label_4_custom$marker: Bool
  var label_6_custom$marker: Bool
  var label_7_custom$marker: Bool
  var label_9_custom$marker: Bool
  var label_bb0$marker: Bool
  var label_bb1$marker: Bool
  var label_bb10$marker: Bool
  var label_bb11$marker: Bool
  var label_bb12$marker: Bool
  var label_bb13$marker: Bool
  var label_bb15$marker: Bool
  var label_bb16$marker: Bool
  var label_bb17$marker: Bool
  var label_bb18$marker: Bool
  var label_bb2$marker: Bool
  var label_bb3$marker: Bool
  var label_bb4$marker: Bool
  var label_bb6$marker: Bool
  var label_bb7$marker: Bool
  var label_bb9$marker: Bool
  var label_entry$marker: Bool
  var lft_0$snapshot$1: Lifetime
  var lft_1$snapshot$1: Lifetime
  var lft_14$snapshot$0: Lifetime
  var lft_14$snapshot$1: Lifetime
  var lft_14$snapshot$2: Lifetime
  var lft_14$snapshot$3: Lifetime
  var lft_14$snapshot$4: Lifetime
  var lft_15$snapshot$0: Lifetime
  var lft_15$snapshot$1: Lifetime
  var lft_15$snapshot$2: Lifetime
  var lft_15$snapshot$3: Lifetime
  var lft_15$snapshot$4: Lifetime
  var lft_15$snapshot$5: Lifetime
  var lft_2$snapshot$1: Lifetime
  var lft_21$alive$snapshot$0: Bool
  var lft_21$snapshot$1: Lifetime
  var lft_22$alive$snapshot$0: Bool
  var lft_22$snapshot$1: Lifetime
  var lft_23$alive$snapshot$0: Bool
  var lft_23$snapshot$0: Lifetime
  var lft_23$snapshot$1: Lifetime
  var lft_23$snapshot$2: Lifetime
  var lft_23$snapshot$3: Lifetime
  var lft_23$snapshot$4: Lifetime
  var lft_3$snapshot$1: Lifetime
  var lft_36$alive$snapshot$0: Bool
  var lft_36$snapshot$0: Lifetime
  var lft_36$snapshot$1: Lifetime
  var lft_36$snapshot$2: Lifetime
  var lft_36$snapshot$3: Lifetime
  var lft_36$snapshot$4: Lifetime
  var lft_36$snapshot$5: Lifetime
  var lft_37$alive$snapshot$0: Bool
  var lft_37$snapshot$0: Lifetime
  var lft_37$snapshot$1: Lifetime
  var lft_37$snapshot$2: Lifetime
  var lft_37$snapshot$3: Lifetime
  var lft_37$snapshot$4: Lifetime
  var lft_38$alive$snapshot$0: Bool
  var lft_38$snapshot$0: Lifetime
  var lft_38$snapshot$1: Lifetime
  var lft_38$snapshot$2: Lifetime
  var lft_38$snapshot$3: Lifetime
  var lft_38$snapshot$4: Lifetime
  var lft_4$snapshot$0: Lifetime
  var lft_4$snapshot$1: Lifetime
  var lft_4$snapshot$2: Lifetime
  var lft_4$snapshot$3: Lifetime
  var lft_4$snapshot$4: Lifetime
  var lft_45$snapshot$0: Lifetime
  var lft_45$snapshot$1: Lifetime
  var lft_45$snapshot$2: Lifetime
  var lft_45$snapshot$3: Lifetime
  var lft_45$snapshot$4: Lifetime
  var lft_46$snapshot$0: Lifetime
  var lft_46$snapshot$1: Lifetime
  var lft_46$snapshot$2: Lifetime
  var lft_46$snapshot$3: Lifetime
  var lft_46$snapshot$4: Lifetime
  var lft_46$snapshot$5: Lifetime
  var lft_function_call_1$snapshot$0: Lifetime
  var lft_function_call_1$snapshot$1: Lifetime
  var lft_function_call_1$snapshot$2: Lifetime
  var lft_function_call_1$snapshot$3: Lifetime
  var lft_function_call_1$snapshot$4: Lifetime
  var lft_function_call_2$snapshot$0: Lifetime
  var lft_function_call_2$snapshot$1: Lifetime
  var lft_function_call_2$snapshot$2: Lifetime
  var lft_function_call_2$snapshot$3: Lifetime
  var lft_function_call_2$snapshot$4: Lifetime
  var lft_function_call_2$snapshot$5: Lifetime
  var lifetime_token_perm_amount$0$snapshot$0: Perm
  var old_lft_22_0$snapshot$0: Lifetime
  var old_lft_22_0$snapshot$1: Lifetime
  var old_lft_22_0$snapshot$2: Lifetime
  var old_lft_22_0$snapshot$3: Lifetime
  var old_lft_22_1$snapshot$0: Lifetime
  var old_lft_22_1$snapshot$1: Lifetime
  var old_lft_22_1$snapshot$2: Lifetime
  var old_lft_22_1$snapshot$3: Lifetime
  var old_lft_22_1$snapshot$4: Lifetime
  var old_lft_23_2$snapshot$0: Lifetime
  var old_lft_23_2$snapshot$1: Lifetime
  var old_lft_23_2$snapshot$2: Lifetime
  var old_lft_23_2$snapshot$3: Lifetime
  var old_lft_23_2$snapshot$4: Lifetime
  var old_lft_23_3$snapshot$0: Lifetime
  var old_lft_23_3$snapshot$1: Lifetime
  var old_lft_23_3$snapshot$2: Lifetime
  var old_lft_23_3$snapshot$3: Lifetime
  var old_lft_23_3$snapshot$4: Lifetime
  var old_lft_23_4$snapshot$0: Lifetime
  var old_lft_23_4$snapshot$1: Lifetime
  var old_lft_23_4$snapshot$2: Lifetime
  var old_lft_23_4$snapshot$3: Lifetime
  var old_lft_23_4$snapshot$4: Lifetime
  var old_lft_23_5$snapshot$0: Lifetime
  var old_lft_23_5$snapshot$1: Lifetime
  var old_lft_23_5$snapshot$2: Lifetime
  var old_lft_23_5$snapshot$3: Lifetime
  var old_lft_23_5$snapshot$4: Lifetime
  var old_lft_37_6$snapshot$0: Lifetime
  var old_lft_37_6$snapshot$1: Lifetime
  var old_lft_37_6$snapshot$2: Lifetime
  var old_lft_37_6$snapshot$3: Lifetime
  var old_lft_37_6$snapshot$4: Lifetime
  var old_lft_37_6$snapshot$5: Lifetime
  var resume_panic_label$marker: Bool
  var return_label$marker: Bool
  var start_label$marker: Bool
  var tmp$0: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$
  var tmp$1: Snap$Isize
  var tmp$2: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var tmp$3: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var tmp$4: Bool
  var tmp$5: Snap$ref$Shared$struct$m_LinkedList$
  var tmp$6: Bool
  var tmp$7: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var tmp_frac_ref_perm$1$snapshot$0: Perm
  label start_label
  lft_21$alive$snapshot$0 := true
  lft_22$alive$snapshot$0 := true
  lft_23$alive$snapshot$0 := true
  lft_36$alive$snapshot$0 := true
  lft_37$alive$snapshot$0 := true
  lft_38$alive$snapshot$0 := true
  start_label$marker := false
  label_entry$marker := false
  label_bb0$marker := false
  label_4_custom$marker := false
  label_bb3$marker := false
  label_3_custom$marker := false
  label_bb2$marker := false
  label_bb6$marker := false
  label_bb7$marker := false
  label_bb9$marker := false
  label_bb10$marker := false
  label_7_custom$marker := false
  label_6_custom$marker := false
  label_bb11$marker := false
  label_9_custom$marker := false
  label_bb12$marker := false
  label_bb13$marker := false
  label_bb15$marker := false
  label_bb16$marker := false
  label_2_custom$marker := false
  label_bb1$marker := false
  label_bb4$marker := false
  label_bb17$marker := false
  return_label$marker := false
  label_10_custom$marker := false
  label_bb18$marker := false
  resume_panic_label$marker := false
  end_label$marker := false
  start_label$marker := true
  inhale basic_block_marker$start_label$marker()
  // Lifetime preconditions.
  inhale lifetime_token_perm_amount$0$snapshot$0 > none
  inhale lifetime_token_perm_amount$0$snapshot$0 < write
  inhale acc(LifetimeToken(bw5$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  inhale acc(LifetimeToken(bw6$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  inhale acc(LifetimeToken(bw7$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  lft_0$snapshot$1 := bw5$snapshot$0
  lft_1$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_2$snapshot$1 := lft_tok_sep_take$3(bw5$snapshot$0, bw6$snapshot$0, bw7$snapshot$0,
    lifetime_token_perm_amount$0$snapshot$0 / 58)
  lft_21$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // Allocate the parameters.
  inhale acc(OwnedNonAliased$ref$Shared$struct$m_LinkedList$(_1$place(), _1$address,
    _1$snapshot$0, lft_21$alive$snapshot$0, lft_21$snapshot$1), write) &&
    valid$Snap$ref$Shared$struct$m_LinkedList$(_1$snapshot$0)
  // Allocate the return place.
  inhale acc(MemoryBlock(_0$address, Size$Usize$()), write)
  // Allocate implicitly allocated statements.
  inhale acc(MemoryBlock(_3$address, Size$Isize$()), write)
  inhale acc(MemoryBlock(_19$address, Size$Tuple$$Usize$Bool$$Usize$Bool$$()), write)
  goto label_entry
  label label_entry
  label_entry$marker := true
  inhale basic_block_marker$label_entry$marker()
  goto label_bb0
  label label_bb0
  label_bb0$marker := true
  inhale basic_block_marker$label_bb0$marker()
  // Prepare lifetimes for statement mid bb0[0]
  // bb0[0] StorageLive(_2)
  inhale acc(MemoryBlock(_2$address, Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write)
  inhale acc(MemoryBlockStackDrop(_2$address, Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write)
  // Prepare lifetimes for statement start bb0[1]
  // Prepare lifetimes for statement mid bb0[1]
  lft_22$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_3$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // bb0[1] _2 = &((*_1).1: std::option::Option<BoxWrapper<LinkedList>>)
  unfold acc(OwnedNonAliased$ref$Shared$struct$m_LinkedList$(_1$place(), _1$address,
    _1$snapshot$0, lft_21$alive$snapshot$0, lft_21$snapshot$1), write)
  unfold acc(FracRef2$struct$m_LinkedList$(deref_reference_place(_1$place()),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_1$snapshot$0),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_1$snapshot$0),
    lft_21$snapshot$1), write)
  tmp$0 := assign$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Reborrow$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_3$$(_2$place(),
    _2$address, field_place$$struct$m_LinkedList$$$f$next(deref_reference_place(_1$place())),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_1$snapshot$0),
    destructor$Snap$struct$m_LinkedList$$$f$next(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_1$snapshot$0)),
    lft_21$snapshot$1, lft_3$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  inhale _2$snapshot$1 == tmp$0
  // Prepare lifetimes for statement start bb0[2]
  lft_tok_sep_return$2(lft_3$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // Prepare lifetimes for statement mid bb0[2]
  // bb0[2] FakeRead(ForMatchedPlace(None), _2)
  // encode_statement: not encoded
  // Prepare lifetimes for statement start bb0[3]
  // Prepare lifetimes for statement mid bb0[3]
  // bb0[3] _3 = discriminant((*_2))
  unfold acc(OwnedNonAliased$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_2$place(),
    _2$address, _2$snapshot$1, lft_22$alive$snapshot$0, lft_22$snapshot$1), write)
  tmp_frac_ref_perm$1$snapshot$0 := frac_bor_atomic_acc$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft_22$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
  if (false) {
    copy_place$Isize(_3$place(), _3$address, field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(deref_reference_place(_2$place())),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
      constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))),
      tmp_frac_ref_perm$1$snapshot$0)
    inhale _3$snapshot$1 ==
      constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)))
  } else {
    tmp$1 := assign$Isize$Discriminant$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_22$$(_3$place(),
      _3$address, deref_reference_place(_2$place()), destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
      tmp_frac_ref_perm$1$snapshot$0, destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
    inhale _3$snapshot$1 == tmp$1
  }
  apply acc(OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)), tmp_frac_ref_perm$1$snapshot$0) --*
    acc(LifetimeToken(lft_22$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    58) &&
    acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1),
    lft_22$snapshot$1), write)
  // Prepare lifetimes for statement mid bb0[4]
  // bb0[4] switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb3]
  if (destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(_3$snapshot$1,
  constructor$Snap$Isize$(0)))) {
    goto label_2_custom
  }
  if (destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(_3$snapshot$1,
  constructor$Snap$Isize$(1)))) {
    goto label_3_custom
  }
  if (true) {
    goto label_4_custom
  }
  assert false
  label label_4_custom
  label_4_custom$marker := true
  inhale basic_block_marker$label_4_custom$marker()
  // Prepare lifetimes for block bb3
  lft_tok_sep_return$2(lft_22$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  goto label_bb3
  label label__from__label_bb3__to__resume_panic_label
  inhale _10$snapshot$3 == _10$snapshot$0
  inhale _16$snapshot$4 == _16$snapshot$0
  inhale _18$snapshot$3 == _18$snapshot$0
  inhale _19$snapshot$4 == _19$snapshot$0
  inhale _4$snapshot$3 == _4$snapshot$0
  inhale _5$snapshot$3 == _5$snapshot$0
  inhale _6$snapshot$3 == _6$snapshot$0
  inhale _9$snapshot$3 == _9$snapshot$0
  inhale lft_14$snapshot$3 == lft_14$snapshot$0
  inhale lft_15$snapshot$4 == lft_15$snapshot$0
  inhale lft_23$snapshot$3 == lft_23$snapshot$0
  inhale lft_36$snapshot$4 == lft_36$snapshot$0
  inhale lft_37$snapshot$3 == lft_37$snapshot$0
  inhale lft_38$snapshot$3 == lft_38$snapshot$0
  inhale lft_4$snapshot$3 == lft_4$snapshot$0
  inhale lft_45$snapshot$3 == lft_45$snapshot$0
  inhale lft_46$snapshot$4 == lft_46$snapshot$0
  inhale lft_function_call_1$snapshot$3 == lft_function_call_1$snapshot$0
  inhale lft_function_call_2$snapshot$4 == lft_function_call_2$snapshot$0
  inhale old_lft_22_1$snapshot$3 == old_lft_22_1$snapshot$0
  inhale old_lft_23_2$snapshot$3 == old_lft_23_2$snapshot$0
  inhale old_lft_23_3$snapshot$3 == old_lft_23_3$snapshot$0
  inhale old_lft_23_4$snapshot$3 == old_lft_23_4$snapshot$0
  inhale old_lft_23_5$snapshot$3 == old_lft_23_5$snapshot$0
  inhale old_lft_37_6$snapshot$4 == old_lft_37_6$snapshot$0
  goto resume_panic_label
  label label_bb3
  label_bb3$marker := true
  inhale basic_block_marker$label_bb3$marker()
  // Prepare lifetimes for statement mid bb3[0]
  // bb3[0] unreachable
  // Target marked as unreachable by the compiler
  assert false
  goto label__from__label_bb3__to__resume_panic_label
  label label_3_custom
  label_3_custom$marker := true
  inhale basic_block_marker$label_3_custom$marker()
  // Prepare lifetimes for block bb2
  old_lft_22_1$snapshot$1 := lft_22$snapshot$1
  bor_shorten$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft_22$snapshot$1,
    old_lft_22_1$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
  goto label_bb2
  label label_bb2
  label_bb2$marker := true
  inhale basic_block_marker$label_bb2$marker()
  // Prepare lifetimes for statement mid bb2[0]
  // bb2[0] StorageLive(_4)
  inhale acc(MemoryBlock(_4$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  inhale acc(MemoryBlockStackDrop(_4$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  // Prepare lifetimes for statement start bb2[1]
  // Prepare lifetimes for statement mid bb2[1]
  lft_23$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_4$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // bb2[1] _4 = &(((*_2) as Some).0: BoxWrapper<LinkedList>)
  unfold acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1),
    lft_22$snapshot$1), write)
  unfold acc(FracRef2$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(deref_reference_place(_2$place())),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)),
    lft_22$snapshot$1), write)
  tmp$2 := assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_4$$(_4$place(),
    _4$address, field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(deref_reference_place(_2$place()))),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))),
    lft_22$snapshot$1, lft_4$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  inhale _4$snapshot$1 == tmp$2
  // Prepare lifetimes for statement start bb2[2]
  lft_tok_sep_return$2(lft_22$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_4$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // Prepare lifetimes for statement mid bb2[2]
  // bb2[2] StorageLive(_5)
  inhale acc(MemoryBlock(_5$address, Size$Tuple$$$$()), write)
  inhale acc(MemoryBlockStackDrop(_5$address, Size$Tuple$$$$()), write)
  // Prepare lifetimes for statement start bb2[3]
  // Prepare lifetimes for statement mid bb2[3]
  // bb2[3] StorageLive(_6)
  inhale acc(MemoryBlock(_6$address, Size$Bool$()), write)
  inhale acc(MemoryBlockStackDrop(_6$address, Size$Bool$()), write)
  // Prepare lifetimes for statement start bb2[4]
  // Prepare lifetimes for statement mid bb2[4]
  // bb2[4] _6 = const false
  write_place_constant$Bool(_6$place(), _6$address, constructor$Snap$Bool$(false))
  inhale _6$snapshot$1 == constructor$Snap$Bool$(false)
  // Prepare lifetimes for statement mid bb2[5]
  // bb2[5] switchInt(move _6) -> [0: bb6, otherwise: bb5]
  // Specification from block: bb5
  // Prepare lifetimes for block bb6
  old_lft_23_2$snapshot$1 := lft_23$snapshot$1
  unfold acc(OwnedNonAliased$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_4$place(),
    _4$address, _4$snapshot$1, lft_23$alive$snapshot$0, lft_23$snapshot$1), write)
  bor_shorten$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(lft_23$snapshot$1,
    old_lft_23_2$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_4$place()),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1))
  goto label_bb6
  label label_bb6
  label_bb6$marker := true
  inhale basic_block_marker$label_bb6$marker()
  // Prepare lifetimes for statement mid bb6[0]
  // bb6[0] _5 = const ()
  write_place_constant$Tuple$$$(_5$place(), _5$address, constructor$Snap$Tuple$$$$())
  inhale _5$snapshot$1 == constructor$Snap$Tuple$$$$()
  // Prepare lifetimes for statement mid bb6[1]
  // bb6[1] goto -> bb7
  // Prepare lifetimes for block bb7
  old_lft_23_3$snapshot$1 := lft_23$snapshot$1
  bor_shorten$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(lft_23$snapshot$1,
    old_lft_23_3$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_4$place()),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1))
  goto label_bb7
  label label_bb7
  label_bb7$marker := true
  inhale basic_block_marker$label_bb7$marker()
  // Prepare lifetimes for statement mid bb7[0]
  // bb7[0] StorageDead(_6)
  into_memory_block$Bool(_6$place(), _6$address, _6$snapshot$1)
  exhale acc(MemoryBlock(_6$address, Size$Bool$()), write)
  exhale acc(MemoryBlockStackDrop(_6$address, Size$Bool$()), write)
  // Prepare lifetimes for statement start bb7[1]
  // Prepare lifetimes for statement mid bb7[1]
  // bb7[1] StorageDead(_5)
  into_memory_block$Tuple$$$(_5$place(), _5$address, _5$snapshot$1)
  exhale acc(MemoryBlock(_5$address, Size$Tuple$$$$()), write)
  exhale acc(MemoryBlockStackDrop(_5$address, Size$Tuple$$$$()), write)
  // Prepare lifetimes for statement start bb7[2]
  // Prepare lifetimes for statement mid bb7[2]
  // bb7[2] StorageLive(_9)
  inhale acc(MemoryBlock(_9$address, Size$Tuple$$$$()), write)
  inhale acc(MemoryBlockStackDrop(_9$address, Size$Tuple$$$$()), write)
  // Prepare lifetimes for statement start bb7[3]
  // Prepare lifetimes for statement mid bb7[3]
  // bb7[3] StorageLive(_10)
  inhale acc(MemoryBlock(_10$address, Size$Bool$()), write)
  inhale acc(MemoryBlockStackDrop(_10$address, Size$Bool$()), write)
  // Prepare lifetimes for statement start bb7[4]
  // Prepare lifetimes for statement mid bb7[4]
  // bb7[4] _10 = const false
  write_place_constant$Bool(_10$place(), _10$address, constructor$Snap$Bool$(false))
  inhale _10$snapshot$1 == constructor$Snap$Bool$(false)
  // Prepare lifetimes for statement mid bb7[5]
  // bb7[5] switchInt(move _10) -> [0: bb9, otherwise: bb8]
  // Specification from block: bb8
  // Prepare lifetimes for block bb9
  old_lft_23_4$snapshot$1 := lft_23$snapshot$1
  bor_shorten$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(lft_23$snapshot$1,
    old_lft_23_4$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_4$place()),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1))
  goto label_bb9
  label label_bb9
  label_bb9$marker := true
  inhale basic_block_marker$label_bb9$marker()
  // Prepare lifetimes for statement mid bb9[0]
  // bb9[0] _9 = const ()
  write_place_constant$Tuple$$$(_9$place(), _9$address, constructor$Snap$Tuple$$$$())
  inhale _9$snapshot$1 == constructor$Snap$Tuple$$$$()
  // Prepare lifetimes for statement mid bb9[1]
  // bb9[1] goto -> bb10
  // Prepare lifetimes for block bb10
  old_lft_23_5$snapshot$1 := lft_23$snapshot$1
  bor_shorten$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(lft_23$snapshot$1,
    old_lft_23_5$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_4$place()),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1))
  goto label_bb10
  label label_bb10
  label_bb10$marker := true
  inhale basic_block_marker$label_bb10$marker()
  // Prepare lifetimes for statement mid bb10[0]
  // bb10[0] StorageDead(_10)
  into_memory_block$Bool(_10$place(), _10$address, _10$snapshot$1)
  exhale acc(MemoryBlock(_10$address, Size$Bool$()), write)
  exhale acc(MemoryBlockStackDrop(_10$address, Size$Bool$()), write)
  // Prepare lifetimes for statement start bb10[1]
  // Prepare lifetimes for statement mid bb10[1]
  // bb10[1] StorageDead(_9)
  into_memory_block$Tuple$$$(_9$place(), _9$address, _9$snapshot$1)
  exhale acc(MemoryBlock(_9$address, Size$Tuple$$$$()), write)
  exhale acc(MemoryBlockStackDrop(_9$address, Size$Tuple$$$$()), write)
  // Prepare lifetimes for statement start bb10[2]
  // Prepare lifetimes for statement mid bb10[2]
  // bb10[2] StorageLive(_14)
  inhale acc(MemoryBlock(_14$address, Size$Usize$()), write)
  inhale acc(MemoryBlockStackDrop(_14$address, Size$Usize$()), write)
  // Prepare lifetimes for statement start bb10[3]
  // Prepare lifetimes for statement mid bb10[3]
  // bb10[3] StorageLive(_15)
  inhale acc(MemoryBlock(_15$address, Size$Usize$()), write)
  inhale acc(MemoryBlockStackDrop(_15$address, Size$Usize$()), write)
  // Prepare lifetimes for statement start bb10[4]
  // Prepare lifetimes for statement mid bb10[4]
  // bb10[4] StorageLive(_16)
  inhale acc(MemoryBlock(_16$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  inhale acc(MemoryBlockStackDrop(_16$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  // Prepare lifetimes for statement start bb10[5]
  // Prepare lifetimes for statement mid bb10[5]
  // bb10[5] StorageLive(_17)
  inhale acc(MemoryBlock(_17$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  inhale acc(MemoryBlockStackDrop(_17$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  // Prepare lifetimes for statement start bb10[6]
  // Prepare lifetimes for statement mid bb10[6]
  // bb10[6] StorageLive(_18)
  inhale acc(MemoryBlock(_18$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  inhale acc(MemoryBlockStackDrop(_18$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  // Prepare lifetimes for statement start bb10[7]
  // Prepare lifetimes for statement mid bb10[7]
  lft_14$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_38$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // bb10[7] _18 = &(*_4)
  tmp$3 := assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_14$$(_18$place(),
    _18$address, deref_reference_place(_4$place()), destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1),
    lft_23$snapshot$1, lft_14$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  inhale _18$snapshot$1 == tmp$3
  exhale acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(deref_reference_place(_4$place()),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1),
    lft_23$snapshot$1), write)
  // Prepare lifetimes for statement mid bb10[8]
  lft_tok_sep_return$2(lft_14$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_23$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_37$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_45$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // bb10[8] _17 = BoxWrapper::<LinkedList>::deref(move _18) -> [return: bb11, unwind: bb18]
  lft_function_call_1$snapshot$1 := lft_tok_sep_take$2(lft_2$snapshot$1, lft_38$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 116)
  assert included(lft_45$snapshot$1, lft_38$snapshot$1)
  consume$Move$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_18$place(),
    _18$address, _18$snapshot$1, lft_38$alive$snapshot$0, lft_38$snapshot$1)
  exhale acc(LifetimeToken(lft_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    174)
  exhale acc(LifetimeToken(lft_38$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    174)
  exhale acc(LifetimeToken(lft_function_call_1$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    174)
  exhale acc(MemoryBlock(_17$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  if (tmp$4) {
    goto label_6_custom
  }
  if (!tmp$4) {
    goto label_7_custom
  }
  assert false
  label label__from__label_7_custom__to__label_bb18
  inhale _16$snapshot$3 == _16$snapshot$0
  inhale _19$snapshot$3 == _19$snapshot$0
  inhale lft_15$snapshot$3 == lft_15$snapshot$0
  inhale lft_36$snapshot$3 == lft_36$snapshot$0
  inhale lft_46$snapshot$3 == lft_46$snapshot$0
  inhale lft_function_call_2$snapshot$3 == lft_function_call_2$snapshot$0
  inhale old_lft_37_6$snapshot$3 == old_lft_37_6$snapshot$0
  goto label_bb18
  label label_7_custom
  label_7_custom$marker := true
  inhale basic_block_marker$label_7_custom$marker()
  inhale acc(MemoryBlock(_17$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  inhale acc(LifetimeToken(lft_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_38$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_function_call_1$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  lft_tok_sep_return$2(lft_function_call_1$snapshot$1, lft_2$snapshot$1, lft_38$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 116)
  // Prepare lifetimes for block bb18
  lft_tok_sep_return$2(lft_37$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_38$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_45$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  goto label__from__label_7_custom__to__label_bb18
  label label_6_custom
  label_6_custom$marker := true
  inhale basic_block_marker$label_6_custom$marker()
  inhale acc(OwnedNonAliased$ref$Shared$struct$m_LinkedList$(_17$place(), _17$address,
    _17$snapshot$0, lft_37$alive$snapshot$0, lft_37$snapshot$1), write) &&
    valid$Snap$ref$Shared$struct$m_LinkedList$(_17$snapshot$0)
  inhale acc(LifetimeToken(lft_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_38$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_function_call_1$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  lft_tok_sep_return$2(lft_function_call_1$snapshot$1, lft_2$snapshot$1, lft_38$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 116)
  // Prepare lifetimes for block bb11
  old_lft_37_6$snapshot$1 := lft_37$snapshot$1
  lft_tok_sep_return$2(lft_38$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_45$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  unfold acc(OwnedNonAliased$ref$Shared$struct$m_LinkedList$(_17$place(), _17$address,
    _17$snapshot$0, lft_37$alive$snapshot$0, lft_37$snapshot$1), write)
  bor_shorten$ref$Shared$struct$m_LinkedList$(lft_37$snapshot$1, old_lft_37_6$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_17$place()),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_17$snapshot$0),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_17$snapshot$0))
  goto label_bb11
  label label_bb11
  label_bb11$marker := true
  inhale basic_block_marker$label_bb11$marker()
  // Prepare lifetimes for statement mid bb11[0]
  lft_15$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_36$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // bb11[0] _16 = &(*_17)
  tmp$5 := assign$ref$Shared$struct$m_LinkedList$$Reborrow$struct$m_LinkedList$$$lft_15$$(_16$place(),
    _16$address, deref_reference_place(_17$place()), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_17$snapshot$0),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_17$snapshot$0),
    lft_37$snapshot$1, lft_15$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  inhale _16$snapshot$1 == tmp$5
  exhale acc(FracRef2$struct$m_LinkedList$(deref_reference_place(_17$place()),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_17$snapshot$0),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_17$snapshot$0),
    lft_37$snapshot$1), write)
  // Prepare lifetimes for statement start bb11[1]
  lft_tok_sep_return$2(lft_15$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_37$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // Prepare lifetimes for statement mid bb11[1]
  // bb11[1] StorageDead(_18)
  exhale acc(MemoryBlock(_18$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  exhale acc(MemoryBlockStackDrop(_18$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  // Prepare lifetimes for statement mid bb11[2]
  lft_46$snapshot$1 := lft_tok_sep_take$2(bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  // bb11[2] _15 = LinkedList::len_shared(move _16) -> [return: bb12, unwind: bb18]
  lft_function_call_2$snapshot$1 := lft_tok_sep_take$2(lft_2$snapshot$1, lft_36$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 116)
  assert included(lft_46$snapshot$1, lft_36$snapshot$1)
  consume$Move$ref$Shared$struct$m_LinkedList$(_16$place(), _16$address, _16$snapshot$1,
    lft_36$alive$snapshot$0, lft_36$snapshot$1)
  exhale acc(LifetimeToken(lft_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    174)
  exhale acc(LifetimeToken(lft_36$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    174)
  exhale acc(LifetimeToken(lft_function_call_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    174)
  exhale acc(MemoryBlock(_15$address, Size$Usize$()), write)
  if (tmp$6) {
    goto label_9_custom
  }
  if (!tmp$6) {
    goto label_10_custom
  }
  assert false
  label label_9_custom
  label_9_custom$marker := true
  inhale basic_block_marker$label_9_custom$marker()
  inhale acc(OwnedNonAliased$Usize(_15$place(), _15$address, _15$snapshot$0), write) &&
    valid$Snap$Usize(_15$snapshot$0)
  inhale acc(LifetimeToken(lft_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_36$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_function_call_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  lft_tok_sep_return$2(lft_function_call_2$snapshot$1, lft_2$snapshot$1, lft_36$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 116)
  // Prepare lifetimes for block bb12
  lft_tok_sep_return$2(lft_36$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_46$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  goto label_bb12
  label label__from__label_bb12__to__label_bb18
  inhale _16$snapshot$3 == _16$snapshot$1
  inhale _19$snapshot$3 == _19$snapshot$1
  inhale lft_15$snapshot$3 == lft_15$snapshot$1
  inhale lft_36$snapshot$3 == lft_36$snapshot$1
  inhale lft_46$snapshot$3 == lft_46$snapshot$1
  inhale lft_function_call_2$snapshot$3 == lft_function_call_2$snapshot$1
  inhale old_lft_37_6$snapshot$3 == old_lft_37_6$snapshot$1
  goto label_bb18
  label label_bb12
  label_bb12$marker := true
  inhale basic_block_marker$label_bb12$marker()
  // Prepare lifetimes for statement mid bb12[0]
  // bb12[0] StorageDead(_16)
  exhale acc(MemoryBlock(_16$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  exhale acc(MemoryBlockStackDrop(_16$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  // Prepare lifetimes for statement start bb12[1]
  // Prepare lifetimes for statement mid bb12[1]
  // bb12[1] _19 = CheckedAdd(_15, const 1_usize)
  tmp$7 := assign$Tuple$$Usize$Bool$$Usize$Bool$$CheckedBinaryOp$Add$Copy$Usize$Constant$Usize$$$$(_19$place(),
    _19$address, _15$place(), _15$address, _15$snapshot$0, constructor$Snap$Usize$(1))
  inhale _19$snapshot$1 == tmp$7
  // Prepare lifetimes for statement mid bb12[2]
  // bb12[2] assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 1_usize) -> [success: bb13, unwind: bb18]
  // Rust assertion: attempt to add with overflow
  if (!destructor$Snap$Bool$$value(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_19$snapshot$1))) {
    goto label_bb13
  }
  if (true) {
    goto label__from__label_bb12__to__label_bb18
  }
  assert false
  label label_bb13
  label_bb13$marker := true
  inhale basic_block_marker$label_bb13$marker()
  // Prepare lifetimes for statement mid bb13[0]
  // bb13[0] _14 = move (_19.0: usize)
  fold acc(OwnedNonAliased$Usize(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_19$place()),
    _19$address, destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_19$snapshot$1)), write)
  move_place$Usize(_14$place(), _14$address, field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_19$place()),
    _19$address, destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_19$snapshot$1))
  inhale _14$snapshot$1 ==
    destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_19$snapshot$1)
  // Prepare lifetimes for statement start bb13[1]
  // Prepare lifetimes for statement mid bb13[1]
  // bb13[1] StorageDead(_15)
  into_memory_block$Usize(_15$place(), _15$address, _15$snapshot$0)
  exhale acc(MemoryBlock(_15$address, Size$Usize$()), write)
  exhale acc(MemoryBlockStackDrop(_15$address, Size$Usize$()), write)
  // Prepare lifetimes for statement start bb13[2]
  // Prepare lifetimes for statement mid bb13[2]
  // bb13[2] FakeRead(ForLet(None), _14)
  // encode_statement: not encoded
  // Prepare lifetimes for statement start bb13[3]
  // Prepare lifetimes for statement mid bb13[3]
  // bb13[3] StorageDead(_17)
  exhale acc(MemoryBlock(_17$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  exhale acc(MemoryBlockStackDrop(_17$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  // Prepare lifetimes for statement start bb13[4]
  // Prepare lifetimes for statement mid bb13[4]
  // bb13[4] StorageLive(_20)
  inhale acc(MemoryBlock(_20$address, Size$Tuple$$$$()), write)
  inhale acc(MemoryBlockStackDrop(_20$address, Size$Tuple$$$$()), write)
  // Prepare lifetimes for statement start bb13[5]
  // Prepare lifetimes for statement mid bb13[5]
  // bb13[5] StorageLive(_21)
  inhale acc(MemoryBlock(_21$address, Size$Bool$()), write)
  inhale acc(MemoryBlockStackDrop(_21$address, Size$Bool$()), write)
  // Prepare lifetimes for statement start bb13[6]
  // Prepare lifetimes for statement mid bb13[6]
  // bb13[6] _21 = const false
  write_place_constant$Bool(_21$place(), _21$address, constructor$Snap$Bool$(false))
  inhale _21$snapshot$1 == constructor$Snap$Bool$(false)
  // Prepare lifetimes for statement mid bb13[7]
  // bb13[7] switchInt(move _21) -> [0: bb15, otherwise: bb14]
  // Specification from block: bb14
  // Prepare lifetimes for block bb15
  goto label_bb15
  label label_bb15
  label_bb15$marker := true
  inhale basic_block_marker$label_bb15$marker()
  // Prepare lifetimes for statement mid bb15[0]
  // bb15[0] _20 = const ()
  write_place_constant$Tuple$$$(_20$place(), _20$address, constructor$Snap$Tuple$$$$())
  inhale _20$snapshot$1 == constructor$Snap$Tuple$$$$()
  // Prepare lifetimes for statement mid bb15[1]
  // bb15[1] goto -> bb16
  // Prepare lifetimes for block bb16
  goto label_bb16
  label label__from__label_bb16__to__label_bb17
  inhale _0$snapshot$3 == _0$snapshot$1
  inhale _10$snapshot$2 == _10$snapshot$1
  inhale _14$snapshot$2 == _14$snapshot$1
  inhale _16$snapshot$2 == _16$snapshot$1
  inhale _18$snapshot$2 == _18$snapshot$1
  inhale _19$snapshot$2 == _19$snapshot$1
  inhale _20$snapshot$2 == _20$snapshot$1
  inhale _21$snapshot$2 == _21$snapshot$1
  inhale _4$snapshot$2 == _4$snapshot$1
  inhale _5$snapshot$2 == _5$snapshot$1
  inhale _6$snapshot$2 == _6$snapshot$1
  inhale _9$snapshot$2 == _9$snapshot$1
  inhale lft_14$snapshot$2 == lft_14$snapshot$1
  inhale lft_15$snapshot$2 == lft_15$snapshot$1
  inhale lft_23$snapshot$2 == lft_23$snapshot$1
  inhale lft_36$snapshot$2 == lft_36$snapshot$1
  inhale lft_37$snapshot$2 == lft_37$snapshot$1
  inhale lft_38$snapshot$2 == lft_38$snapshot$1
  inhale lft_4$snapshot$2 == lft_4$snapshot$1
  inhale lft_45$snapshot$2 == lft_45$snapshot$1
  inhale lft_46$snapshot$2 == lft_46$snapshot$1
  inhale lft_function_call_1$snapshot$2 == lft_function_call_1$snapshot$1
  inhale lft_function_call_2$snapshot$2 == lft_function_call_2$snapshot$1
  inhale old_lft_22_0$snapshot$2 == old_lft_22_0$snapshot$0
  inhale old_lft_22_1$snapshot$2 == old_lft_22_1$snapshot$1
  inhale old_lft_23_2$snapshot$2 == old_lft_23_2$snapshot$1
  inhale old_lft_23_3$snapshot$2 == old_lft_23_3$snapshot$1
  inhale old_lft_23_4$snapshot$2 == old_lft_23_4$snapshot$1
  inhale old_lft_23_5$snapshot$2 == old_lft_23_5$snapshot$1
  inhale old_lft_37_6$snapshot$2 == old_lft_37_6$snapshot$1
  goto label_bb17
  label label_bb16
  label_bb16$marker := true
  inhale basic_block_marker$label_bb16$marker()
  // Prepare lifetimes for statement mid bb16[0]
  // bb16[0] StorageDead(_21)
  into_memory_block$Bool(_21$place(), _21$address, _21$snapshot$1)
  exhale acc(MemoryBlock(_21$address, Size$Bool$()), write)
  exhale acc(MemoryBlockStackDrop(_21$address, Size$Bool$()), write)
  // Prepare lifetimes for statement start bb16[1]
  // Prepare lifetimes for statement mid bb16[1]
  // bb16[1] StorageDead(_20)
  into_memory_block$Tuple$$$(_20$place(), _20$address, _20$snapshot$1)
  exhale acc(MemoryBlock(_20$address, Size$Tuple$$$$()), write)
  exhale acc(MemoryBlockStackDrop(_20$address, Size$Tuple$$$$()), write)
  // Prepare lifetimes for statement start bb16[2]
  // Prepare lifetimes for statement mid bb16[2]
  // bb16[2] _0 = _14
  copy_place$Usize(_0$place(), _0$address, _14$place(), _14$address, _14$snapshot$1,
    write)
  inhale _0$snapshot$1 == _14$snapshot$1
  // Prepare lifetimes for statement start bb16[3]
  // Prepare lifetimes for statement mid bb16[3]
  // bb16[3] StorageDead(_14)
  into_memory_block$Usize(_14$place(), _14$address, _14$snapshot$1)
  exhale acc(MemoryBlock(_14$address, Size$Usize$()), write)
  exhale acc(MemoryBlockStackDrop(_14$address, Size$Usize$()), write)
  // Prepare lifetimes for statement start bb16[4]
  // Prepare lifetimes for statement mid bb16[4]
  // bb16[4] StorageDead(_4)
  exhale acc(MemoryBlock(_4$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  exhale acc(MemoryBlockStackDrop(_4$address, Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  // Prepare lifetimes for statement mid bb16[5]
  // bb16[5] goto -> bb17
  // Prepare lifetimes for block bb17
  goto label__from__label_bb16__to__label_bb17
  label label_2_custom
  label_2_custom$marker := true
  inhale basic_block_marker$label_2_custom$marker()
  // Prepare lifetimes for block bb1
  old_lft_22_0$snapshot$1 := lft_22$snapshot$1
  bor_shorten$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft_22$snapshot$1,
    old_lft_22_0$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 58, deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
  goto label_bb1
  label label_bb1
  label_bb1$marker := true
  inhale basic_block_marker$label_bb1$marker()
  // Prepare lifetimes for statement mid bb1[0]
  // bb1[0] falseEdge -> [real: bb4, imaginary: bb2]
  // Prepare lifetimes for block bb4
  lft_tok_sep_return$2(lft_22$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  goto label_bb4
  label label__from__label_bb4__to__label_bb17
  inhale _0$snapshot$3 == _0$snapshot$2
  inhale _10$snapshot$2 == _10$snapshot$0
  inhale _14$snapshot$2 == _14$snapshot$0
  inhale _16$snapshot$2 == _16$snapshot$0
  inhale _18$snapshot$2 == _18$snapshot$0
  inhale _19$snapshot$2 == _19$snapshot$0
  inhale _20$snapshot$2 == _20$snapshot$0
  inhale _21$snapshot$2 == _21$snapshot$0
  inhale _4$snapshot$2 == _4$snapshot$0
  inhale _5$snapshot$2 == _5$snapshot$0
  inhale _6$snapshot$2 == _6$snapshot$0
  inhale _9$snapshot$2 == _9$snapshot$0
  inhale lft_14$snapshot$2 == lft_14$snapshot$0
  inhale lft_15$snapshot$2 == lft_15$snapshot$0
  inhale lft_23$snapshot$2 == lft_23$snapshot$0
  inhale lft_36$snapshot$2 == lft_36$snapshot$0
  inhale lft_37$snapshot$2 == lft_37$snapshot$0
  inhale lft_38$snapshot$2 == lft_38$snapshot$0
  inhale lft_4$snapshot$2 == lft_4$snapshot$0
  inhale lft_45$snapshot$2 == lft_45$snapshot$0
  inhale lft_46$snapshot$2 == lft_46$snapshot$0
  inhale lft_function_call_1$snapshot$2 == lft_function_call_1$snapshot$0
  inhale lft_function_call_2$snapshot$2 == lft_function_call_2$snapshot$0
  inhale old_lft_22_0$snapshot$2 == old_lft_22_0$snapshot$1
  inhale old_lft_22_1$snapshot$2 == old_lft_22_1$snapshot$0
  inhale old_lft_23_2$snapshot$2 == old_lft_23_2$snapshot$0
  inhale old_lft_23_3$snapshot$2 == old_lft_23_3$snapshot$0
  inhale old_lft_23_4$snapshot$2 == old_lft_23_4$snapshot$0
  inhale old_lft_23_5$snapshot$2 == old_lft_23_5$snapshot$0
  inhale old_lft_37_6$snapshot$2 == old_lft_37_6$snapshot$0
  goto label_bb17
  label label_bb4
  label_bb4$marker := true
  inhale basic_block_marker$label_bb4$marker()
  // Prepare lifetimes for statement mid bb4[0]
  // bb4[0] _0 = const 1_usize
  write_place_constant$Usize(_0$place(), _0$address, constructor$Snap$Usize$(1))
  inhale _0$snapshot$2 == constructor$Snap$Usize$(1)
  // Prepare lifetimes for statement mid bb4[1]
  // bb4[1] goto -> bb17
  // Prepare lifetimes for block bb17
  goto label__from__label_bb4__to__label_bb17
  label label_bb17
  label_bb17$marker := true
  inhale basic_block_marker$label_bb17$marker()
  // Prepare lifetimes for statement mid bb17[0]
  // bb17[0] StorageDead(_2)
  exhale acc(MemoryBlock(_2$address, Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write)
  exhale acc(MemoryBlockStackDrop(_2$address, Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write)
  // Prepare lifetimes for statement mid bb17[1]
  // bb17[1] return
  goto return_label
  label label__from__return_label__to__end_label
  inhale _0$snapshot$4 == _0$snapshot$3
  inhale _10$snapshot$4 == _10$snapshot$2
  inhale _14$snapshot$3 == _14$snapshot$2
  inhale _16$snapshot$5 == _16$snapshot$2
  inhale _18$snapshot$4 == _18$snapshot$2
  inhale _19$snapshot$5 == _19$snapshot$2
  inhale _20$snapshot$3 == _20$snapshot$2
  inhale _21$snapshot$3 == _21$snapshot$2
  inhale _4$snapshot$4 == _4$snapshot$2
  inhale _5$snapshot$4 == _5$snapshot$2
  inhale _6$snapshot$4 == _6$snapshot$2
  inhale _9$snapshot$4 == _9$snapshot$2
  inhale lft_14$snapshot$4 == lft_14$snapshot$2
  inhale lft_15$snapshot$5 == lft_15$snapshot$2
  inhale lft_23$snapshot$4 == lft_23$snapshot$2
  inhale lft_36$snapshot$5 == lft_36$snapshot$2
  inhale lft_37$snapshot$4 == lft_37$snapshot$2
  inhale lft_38$snapshot$4 == lft_38$snapshot$2
  inhale lft_4$snapshot$4 == lft_4$snapshot$2
  inhale lft_45$snapshot$4 == lft_45$snapshot$2
  inhale lft_46$snapshot$5 == lft_46$snapshot$2
  inhale lft_function_call_1$snapshot$4 == lft_function_call_1$snapshot$2
  inhale lft_function_call_2$snapshot$5 == lft_function_call_2$snapshot$2
  inhale old_lft_22_0$snapshot$3 == old_lft_22_0$snapshot$2
  inhale old_lft_22_1$snapshot$4 == old_lft_22_1$snapshot$2
  inhale old_lft_23_2$snapshot$4 == old_lft_23_2$snapshot$2
  inhale old_lft_23_3$snapshot$4 == old_lft_23_3$snapshot$2
  inhale old_lft_23_4$snapshot$4 == old_lft_23_4$snapshot$2
  inhale old_lft_23_5$snapshot$4 == old_lft_23_5$snapshot$2
  inhale old_lft_37_6$snapshot$5 == old_lft_37_6$snapshot$2
  goto end_label
  label return_label
  return_label$marker := true
  inhale basic_block_marker$return_label$marker()
  // Deallocate the parameters.
  exhale acc(MemoryBlock(_1$address, Size$ref$Shared$struct$m_LinkedList$$()), write)
  // Deallocate the return place.
  exhale acc(OwnedNonAliased$Usize(_0$place(), _0$address, _0$snapshot$3), write) &&
    valid$Snap$Usize(_0$snapshot$3)
  // Lifetime postconditions.
  lft_tok_sep_return$2(lft_1$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$3(lft_2$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, bw7$snapshot$0,
    lifetime_token_perm_amount$0$snapshot$0 / 58)
  lft_tok_sep_return$2(lft_21$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  exhale acc(LifetimeToken(bw5$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  exhale acc(LifetimeToken(bw6$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  exhale acc(LifetimeToken(bw7$snapshot$0), lifetime_token_perm_amount$0$snapshot$0)
  if (label_bb16$marker && label_bb17$marker) {
    into_memory_block$Isize(_3$place(), _3$address, _3$snapshot$1)
  }
  if (label_bb4$marker && label_bb17$marker) {
    into_memory_block$Isize(_3$place(), _3$address, _3$snapshot$1)
  }
  exhale acc(MemoryBlock(_3$address, Size$Isize$()), write)
  if (label_bb16$marker && label_bb17$marker) {
    into_memory_block$Bool(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_19$place()),
      _19$address, destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_19$snapshot$2))
  }
  if (label_bb16$marker && label_bb17$marker) {
    memory_block_join$Tuple$$Usize$Bool$$Usize$Bool$(_19$address, write)
  }
  exhale acc(MemoryBlock(_19$address, Size$Tuple$$Usize$Bool$$Usize$Bool$$()), write)
  goto label__from__return_label__to__end_label
  label label__from__label_10_custom__to__label_bb18
  inhale _16$snapshot$3 == _16$snapshot$1
  inhale _19$snapshot$3 == _19$snapshot$0
  inhale lft_15$snapshot$3 == lft_15$snapshot$1
  inhale lft_36$snapshot$3 == lft_36$snapshot$1
  inhale lft_46$snapshot$3 == lft_46$snapshot$1
  inhale lft_function_call_2$snapshot$3 == lft_function_call_2$snapshot$1
  inhale old_lft_37_6$snapshot$3 == old_lft_37_6$snapshot$1
  goto label_bb18
  label label_10_custom
  label_10_custom$marker := true
  inhale basic_block_marker$label_10_custom$marker()
  inhale acc(MemoryBlock(_15$address, Size$Usize$()), write)
  inhale acc(LifetimeToken(lft_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_36$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  inhale acc(LifetimeToken(lft_function_call_2$snapshot$1), lifetime_token_perm_amount$0$snapshot$0 /
    116)
  lft_tok_sep_return$2(lft_function_call_2$snapshot$1, lft_2$snapshot$1, lft_36$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 116)
  // Prepare lifetimes for block bb18
  lft_tok_sep_return$2(lft_36$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  lft_tok_sep_return$2(lft_46$snapshot$1, bw5$snapshot$0, bw6$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    58)
  goto label__from__label_10_custom__to__label_bb18
  label label__from__label_bb18__to__resume_panic_label
  inhale _10$snapshot$3 == _10$snapshot$1
  inhale _16$snapshot$4 == _16$snapshot$3
  inhale _18$snapshot$3 == _18$snapshot$1
  inhale _19$snapshot$4 == _19$snapshot$3
  inhale _4$snapshot$3 == _4$snapshot$1
  inhale _5$snapshot$3 == _5$snapshot$1
  inhale _6$snapshot$3 == _6$snapshot$1
  inhale _9$snapshot$3 == _9$snapshot$1
  inhale lft_14$snapshot$3 == lft_14$snapshot$1
  inhale lft_15$snapshot$4 == lft_15$snapshot$3
  inhale lft_23$snapshot$3 == lft_23$snapshot$1
  inhale lft_36$snapshot$4 == lft_36$snapshot$3
  inhale lft_37$snapshot$3 == lft_37$snapshot$1
  inhale lft_38$snapshot$3 == lft_38$snapshot$1
  inhale lft_4$snapshot$3 == lft_4$snapshot$1
  inhale lft_45$snapshot$3 == lft_45$snapshot$1
  inhale lft_46$snapshot$4 == lft_46$snapshot$3
  inhale lft_function_call_1$snapshot$3 == lft_function_call_1$snapshot$1
  inhale lft_function_call_2$snapshot$4 == lft_function_call_2$snapshot$3
  inhale old_lft_22_1$snapshot$3 == old_lft_22_1$snapshot$1
  inhale old_lft_23_2$snapshot$3 == old_lft_23_2$snapshot$1
  inhale old_lft_23_3$snapshot$3 == old_lft_23_3$snapshot$1
  inhale old_lft_23_4$snapshot$3 == old_lft_23_4$snapshot$1
  inhale old_lft_23_5$snapshot$3 == old_lft_23_5$snapshot$1
  inhale old_lft_37_6$snapshot$4 == old_lft_37_6$snapshot$3
  goto resume_panic_label
  label label_bb18
  label_bb18$marker := true
  inhale basic_block_marker$label_bb18$marker()
  // Prepare lifetimes for statement mid bb18[0]
  // bb18[0] resume
  goto label__from__label_bb18__to__resume_panic_label
  label label__from__resume_panic_label__to__end_label
  inhale _0$snapshot$4 == _0$snapshot$0
  inhale _10$snapshot$4 == _10$snapshot$3
  inhale _14$snapshot$3 == _14$snapshot$0
  inhale _16$snapshot$5 == _16$snapshot$4
  inhale _18$snapshot$4 == _18$snapshot$3
  inhale _19$snapshot$5 == _19$snapshot$4
  inhale _20$snapshot$3 == _20$snapshot$0
  inhale _21$snapshot$3 == _21$snapshot$0
  inhale _4$snapshot$4 == _4$snapshot$3
  inhale _5$snapshot$4 == _5$snapshot$3
  inhale _6$snapshot$4 == _6$snapshot$3
  inhale _9$snapshot$4 == _9$snapshot$3
  inhale lft_14$snapshot$4 == lft_14$snapshot$3
  inhale lft_15$snapshot$5 == lft_15$snapshot$4
  inhale lft_23$snapshot$4 == lft_23$snapshot$3
  inhale lft_36$snapshot$5 == lft_36$snapshot$4
  inhale lft_37$snapshot$4 == lft_37$snapshot$3
  inhale lft_38$snapshot$4 == lft_38$snapshot$3
  inhale lft_4$snapshot$4 == lft_4$snapshot$3
  inhale lft_45$snapshot$4 == lft_45$snapshot$3
  inhale lft_46$snapshot$5 == lft_46$snapshot$4
  inhale lft_function_call_1$snapshot$4 == lft_function_call_1$snapshot$3
  inhale lft_function_call_2$snapshot$5 == lft_function_call_2$snapshot$4
  inhale old_lft_22_0$snapshot$3 == old_lft_22_0$snapshot$0
  inhale old_lft_22_1$snapshot$4 == old_lft_22_1$snapshot$3
  inhale old_lft_23_2$snapshot$4 == old_lft_23_2$snapshot$3
  inhale old_lft_23_3$snapshot$4 == old_lft_23_3$snapshot$3
  inhale old_lft_23_4$snapshot$4 == old_lft_23_4$snapshot$3
  inhale old_lft_23_5$snapshot$4 == old_lft_23_5$snapshot$3
  inhale old_lft_37_6$snapshot$5 == old_lft_37_6$snapshot$4
  goto end_label
  label resume_panic_label
  resume_panic_label$marker := true
  inhale basic_block_marker$resume_panic_label$marker()
  goto label__from__resume_panic_label__to__end_label
  label end_label
  end_label$marker := true
  inhale basic_block_marker$end_label$marker()
  goto end_of_method
  label end_of_method
}

method assign$Isize$Discriminant$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_22$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_address: Address, operand_permission: Perm,
  operand_value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  returns (result_value: Snap$Isize)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$Isize$()), write)
  requires none < operand_permission
  requires acc(OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_place,
    operand_address, operand_value), operand_permission)
  requires valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_value)
  ensures acc(OwnedNonAliased$Isize(target_place, target_address, result_value), write)
  ensures acc(OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_place,
    operand_address, operand_value), operand_permission)
  ensures result_value ==
    constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_value))
  ensures valid$Snap$Isize(result_value)


method assign$Tuple$$Usize$Bool$$Usize$Bool$$CheckedBinaryOp$Add$Copy$Usize$Constant$Usize$$$$(target_place: Place,
  target_address: Address, operand1_place: Place, operand1_root_address: Address,
  operand1_value: Snap$Usize, operand2_value: Snap$Usize)
  returns (result_value: Snap$Tuple$$Usize$Bool$$Usize$Bool$)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$Tuple$$Usize$Bool$$Usize$Bool$$()), write)
  requires acc(OwnedNonAliased$Usize(operand1_place, operand1_root_address,
    operand1_value), write)
  requires valid$Snap$Usize(operand1_value)
  requires valid$Snap$Usize(operand2_value)
  ensures acc(MemoryBlock(compute_address(target_place, target_address), PaddingSize$Tuple$$Usize$Bool$$Usize$Bool$$()), write)
  ensures acc(MemoryBlock(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(compute_address(target_place,
    target_address)), Size$Usize$()), write)
  ensures acc(OwnedNonAliased$Bool(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(target_place),
    target_address, destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(result_value)), write)
  ensures acc(OwnedNonAliased$Usize(operand1_place, operand1_root_address, operand1_value), write)
  ensures valid$Snap$Usize(constructor$Snap$Usize$Add_Usize(operand1_value,
    operand2_value)) ==>
    destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(result_value) ==
    constructor$Snap$Usize$Add_Usize(operand1_value, operand2_value)
  ensures destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(result_value) ==
    constructor$Snap$Bool$(!valid$Snap$Usize(constructor$Snap$Usize$Add_Usize(operand1_value,
    operand2_value)))
  ensures MemoryBlock$bytes(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(compute_address(target_place,
    target_address)), Size$Usize$()) ==
    to_bytes$Usize(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(result_value))


method assign$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Reborrow$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_3$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$,
  lft_21: Lifetime, lft_3: Lifetime, lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$()), write)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_3, lft_21)
  requires acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_place,
    operand_root_address, operand_snapshot_current, lft_21), write)
  requires acc(LifetimeToken(lft_3), lifetime_perm)
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(result_value)
  ensures acc(LifetimeToken(lft_3), lifetime_perm)
  ensures acc(OwnedNonAliased$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_place,
    target_address, result_value, true, lft_3), write)
  ensures valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(result_value)
  ensures acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_place,
    operand_root_address, operand_snapshot_current, lft_21), write)


method assign$ref$Shared$struct$m_LinkedList$$Reborrow$struct$m_LinkedList$$$lft_15$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$struct$m_LinkedList$, lft_37: Lifetime, lft_15: Lifetime,
  lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$struct$m_LinkedList$)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$ref$Shared$struct$m_LinkedList$$()), write)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_15, lft_37)
  requires acc(FracRef2$struct$m_LinkedList$(operand_place, operand_root_address,
    operand_snapshot_current, lft_37), write)
  requires acc(LifetimeToken(lft_15), lifetime_perm)
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(result_value)
  ensures acc(LifetimeToken(lft_15), lifetime_perm)
  ensures acc(OwnedNonAliased$ref$Shared$struct$m_LinkedList$(target_place,
    target_address, result_value, true, lft_15), write)
  ensures valid$Snap$ref$Shared$struct$m_LinkedList$(result_value)
  ensures acc(FracRef2$struct$m_LinkedList$(operand_place, operand_root_address,
    operand_snapshot_current, lft_37), write)


method assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_14$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_23: Lifetime, lft_14: Lifetime, lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_14, lft_23)
  requires acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand_place,
    operand_root_address, operand_snapshot_current, lft_23), write)
  requires acc(LifetimeToken(lft_14), lifetime_perm)
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(result_value)
  ensures acc(LifetimeToken(lft_14), lifetime_perm)
  ensures acc(OwnedNonAliased$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_place,
    target_address, result_value, true, lft_14), write)
  ensures valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(result_value)
  ensures acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand_place,
    operand_root_address, operand_snapshot_current, lft_23), write)


method assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_4$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_22: Lifetime, lft_4: Lifetime, lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$)
  requires acc(MemoryBlock(compute_address(target_place, target_address), Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_4, lft_22)
  requires acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand_place,
    operand_root_address, operand_snapshot_current, lft_22), write)
  requires acc(LifetimeToken(lft_4), lifetime_perm)
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(result_value)
  ensures acc(LifetimeToken(lft_4), lifetime_perm)
  ensures acc(OwnedNonAliased$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_place,
    target_address, result_value, true, lft_4), write)
  ensures valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(result_value)
  ensures acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand_place,
    operand_root_address, operand_snapshot_current, lft_22), write)


method bor_shorten$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft: Lifetime,
  old_lft: Lifetime, lifetime_perm: Perm, place: Place, root_address: Address,
  current_snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft, old_lft)
  requires acc(LifetimeToken(lft), lifetime_perm)
  requires acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place,
    root_address, current_snapshot, old_lft), write)
  ensures acc(LifetimeToken(lft), lifetime_perm)
  ensures acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place,
    root_address, current_snapshot, lft), write)


method bor_shorten$ref$Shared$struct$m_LinkedList$(lft: Lifetime, old_lft: Lifetime,
  lifetime_perm: Perm, place: Place, root_address: Address, current_snapshot: Snap$struct$m_LinkedList$)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft, old_lft)
  requires acc(LifetimeToken(lft), lifetime_perm)
  requires acc(FracRef2$struct$m_LinkedList$(place, root_address, current_snapshot,
    old_lft), write)
  ensures acc(LifetimeToken(lft), lifetime_perm)
  ensures acc(FracRef2$struct$m_LinkedList$(place, root_address, current_snapshot,
    lft), write)


method bor_shorten$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(lft: Lifetime,
  old_lft: Lifetime, lifetime_perm: Perm, place: Place, root_address: Address,
  current_snapshot: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft, old_lft)
  requires acc(LifetimeToken(lft), lifetime_perm)
  requires acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(place, root_address,
    current_snapshot, old_lft), write)
  ensures acc(LifetimeToken(lft), lifetime_perm)
  ensures acc(FracRef2$trusted$m_BoxWrapper$struct$m_LinkedList$$(place, root_address,
    current_snapshot, lft), write)


method consume$Move$ref$Shared$struct$m_LinkedList$(operand1_place: Place, operand1_root_address: Address,
  operand1_value: Snap$ref$Shared$struct$m_LinkedList$, lft_36$alive: Bool,
  lft_36: Lifetime)
  requires acc(OwnedNonAliased$ref$Shared$struct$m_LinkedList$(operand1_place,
    operand1_root_address, operand1_value, lft_36$alive, lft_36), write)
  requires valid$Snap$ref$Shared$struct$m_LinkedList$(operand1_value)
  ensures acc(MemoryBlock(compute_address(operand1_place, operand1_root_address),
    Size$ref$Shared$struct$m_LinkedList$$()), write)


method consume$Move$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand1_place: Place,
  operand1_root_address: Address, operand1_value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_38$alive: Bool, lft_38: Lifetime)
  requires acc(OwnedNonAliased$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand1_place,
    operand1_root_address, operand1_value, lft_38$alive, lft_38), write)
  requires valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand1_value)
  ensures acc(MemoryBlock(compute_address(operand1_place, operand1_root_address),
    Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$()), write)


method copy_place$Isize(target_place: Place, target_root_address: Address, source_place: Place,
  source_root_address: Address, source_snapshot: Snap$Isize, source_permission_amount: Perm)
  requires none < source_permission_amount
  requires acc(MemoryBlock(compute_address(target_place, target_root_address),
    Size$Isize$()), write)
  requires acc(OwnedNonAliased$Isize(source_place, source_root_address, source_snapshot), source_permission_amount)
  ensures acc(OwnedNonAliased$Isize(source_place, source_root_address, source_snapshot), source_permission_amount)
  ensures acc(OwnedNonAliased$Isize(target_place, target_root_address, source_snapshot), write)
  ensures valid$Snap$Isize(source_snapshot)
{
  unfold acc(OwnedNonAliased$Isize(source_place, source_root_address, source_snapshot), source_permission_amount)
  memory_copy$Isize(compute_address(source_place, source_root_address), compute_address(target_place,
    target_root_address), source_permission_amount)
  fold acc(OwnedNonAliased$Isize(target_place, target_root_address, source_snapshot), write)
  fold acc(OwnedNonAliased$Isize(source_place, source_root_address, source_snapshot), source_permission_amount)
}

method copy_place$Usize(target_place: Place, target_root_address: Address, source_place: Place,
  source_root_address: Address, source_snapshot: Snap$Usize, source_permission_amount: Perm)
  requires none < source_permission_amount
  requires acc(MemoryBlock(compute_address(target_place, target_root_address),
    Size$Usize$()), write)
  requires acc(OwnedNonAliased$Usize(source_place, source_root_address, source_snapshot), source_permission_amount)
  ensures acc(OwnedNonAliased$Usize(source_place, source_root_address, source_snapshot), source_permission_amount)
  ensures acc(OwnedNonAliased$Usize(target_place, target_root_address, source_snapshot), write)
  ensures valid$Snap$Usize(source_snapshot)
{
  unfold acc(OwnedNonAliased$Usize(source_place, source_root_address, source_snapshot), source_permission_amount)
  memory_copy$Usize(compute_address(source_place, source_root_address), compute_address(target_place,
    target_root_address), source_permission_amount)
  fold acc(OwnedNonAliased$Usize(target_place, target_root_address, source_snapshot), write)
  fold acc(OwnedNonAliased$Usize(source_place, source_root_address, source_snapshot), source_permission_amount)
}

method frac_bor_atomic_acc$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lifetime: Lifetime,
  lifetime_perm: Perm, place: Place, root_address: Address, current_snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  returns (owned_perm: Perm)
  requires none < lifetime_perm
  requires acc(LifetimeToken(lifetime), lifetime_perm)
  requires acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place,
    root_address, current_snapshot, lifetime), write)
  ensures owned_perm < write
  ensures none < owned_perm
  ensures acc(OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place,
    root_address, current_snapshot), owned_perm)
  ensures acc(OwnedNonAliased$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place,
    root_address, current_snapshot), owned_perm) --*
    acc(LifetimeToken(lifetime), lifetime_perm) &&
    acc(FracRef2$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(place,
    root_address, current_snapshot, lifetime), write)


method into_memory_block$Bool(place: Place, root_address: Address, snapshot: Snap$Bool)
  requires acc(OwnedNonAliased$Bool(place, root_address, snapshot), write)
  ensures acc(MemoryBlock(compute_address(place, root_address), Size$Bool$()), write)
{
  unfold acc(OwnedNonAliased$Bool(place, root_address, snapshot), write)
}

method into_memory_block$Isize(place: Place, root_address: Address, snapshot: Snap$Isize)
  requires acc(OwnedNonAliased$Isize(place, root_address, snapshot), write)
  ensures acc(MemoryBlock(compute_address(place, root_address), Size$Isize$()), write)
{
  unfold acc(OwnedNonAliased$Isize(place, root_address, snapshot), write)
}

method into_memory_block$Tuple$$$(place: Place, root_address: Address, snapshot: Snap$Tuple$$$)
  requires acc(OwnedNonAliased$Tuple$$$(place, root_address, snapshot), write)
  ensures acc(MemoryBlock(compute_address(place, root_address), Size$Tuple$$$$()), write)
{
  unfold acc(OwnedNonAliased$Tuple$$$(place, root_address, snapshot), write)
  memory_block_join$Tuple$$$(compute_address(place, root_address), write)
}

method into_memory_block$Usize(place: Place, root_address: Address, snapshot: Snap$Usize)
  requires acc(OwnedNonAliased$Usize(place, root_address, snapshot), write)
  ensures acc(MemoryBlock(compute_address(place, root_address), Size$Usize$()), write)
{
  unfold acc(OwnedNonAliased$Usize(place, root_address, snapshot), write)
}

method lft_tok_sep_return$2(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  rd_perm: Perm)
  requires none < rd_perm
  requires acc(LifetimeToken(lft), rd_perm)
  requires lft == intersect(Set(lft_1, lft_2))
  ensures acc(LifetimeToken(lft_1), rd_perm)
  ensures acc(LifetimeToken(lft_2), rd_perm)


method lft_tok_sep_return$3(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  lft_3: Lifetime, rd_perm: Perm)
  requires none < rd_perm
  requires acc(LifetimeToken(lft), rd_perm)
  requires lft == intersect(Set(lft_1, lft_2, lft_3))
  ensures acc(LifetimeToken(lft_1), rd_perm)
  ensures acc(LifetimeToken(lft_2), rd_perm)
  ensures acc(LifetimeToken(lft_3), rd_perm)


method lft_tok_sep_take$2(lft_1: Lifetime, lft_2: Lifetime, rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires acc(LifetimeToken(lft_1), rd_perm)
  requires acc(LifetimeToken(lft_2), rd_perm)
  ensures acc(LifetimeToken(lft), rd_perm)
  ensures lft == intersect(Set(lft_1, lft_2))


method lft_tok_sep_take$3(lft_1: Lifetime, lft_2: Lifetime, lft_3: Lifetime,
  rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires acc(LifetimeToken(lft_1), rd_perm)
  requires acc(LifetimeToken(lft_2), rd_perm)
  requires acc(LifetimeToken(lft_3), rd_perm)
  ensures acc(LifetimeToken(lft), rd_perm)
  ensures lft == intersect(Set(lft_1, lft_2, lft_3))


method memory_block_join$Tuple$$$(address: Address, permission_amount: Perm)
  requires none < permission_amount
  requires acc(MemoryBlock(address, PaddingSize$Tuple$$$$()), permission_amount)
  ensures acc(MemoryBlock(address, Size$Tuple$$$$()), write)
  ensures (forall snapshot: Snap$Tuple$$$ ::
      { to_bytes$Tuple$$$(snapshot) }
      MemoryBlock$bytes(address, Size$Tuple$$$$()) ==
      to_bytes$Tuple$$$(snapshot))


method memory_block_join$Tuple$$Usize$Bool$$Usize$Bool$(address: Address, permission_amount: Perm)
  requires none < permission_amount
  requires acc(MemoryBlock(address, PaddingSize$Tuple$$Usize$Bool$$Usize$Bool$$()), permission_amount)
  requires acc(MemoryBlock(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(address),
    Size$Usize$()), permission_amount)
  requires acc(MemoryBlock(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(address),
    Size$Bool$()), permission_amount)
  ensures acc(MemoryBlock(address, Size$Tuple$$Usize$Bool$$Usize$Bool$$()), write)
  ensures (forall snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$ ::
      { to_bytes$Tuple$$Usize$Bool$$Usize$Bool$(snapshot) }
      old(MemoryBlock$bytes(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(address),
      Size$Usize$()) ==
      to_bytes$Usize(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot))) &&
      old(MemoryBlock$bytes(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(address),
      Size$Bool$()) ==
      to_bytes$Bool(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot))) ==>
      MemoryBlock$bytes(address, Size$Tuple$$Usize$Bool$$Usize$Bool$$()) ==
      to_bytes$Tuple$$Usize$Bool$$Usize$Bool$(snapshot))


method memory_block_split$Tuple$$$(address: Address, permission_amount: Perm)
  requires none < permission_amount
  requires acc(MemoryBlock(address, Size$Tuple$$$$()), write)
  ensures acc(MemoryBlock(address, PaddingSize$Tuple$$$$()), permission_amount)
  ensures true


method memory_block_split$Tuple$$Usize$Bool$$Usize$Bool$(address: Address, permission_amount: Perm)
  requires none < permission_amount
  requires acc(MemoryBlock(address, Size$Tuple$$Usize$Bool$$Usize$Bool$$()), write)
  ensures acc(MemoryBlock(address, PaddingSize$Tuple$$Usize$Bool$$Usize$Bool$$()), permission_amount)
  ensures acc(MemoryBlock(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(address),
    Size$Usize$()), permission_amount)
  ensures acc(MemoryBlock(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(address),
    Size$Bool$()), permission_amount)
  ensures (forall snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$ ::
      { to_bytes$Tuple$$Usize$Bool$$Usize$Bool$(snapshot) }
      old(MemoryBlock$bytes(address, Size$Tuple$$Usize$Bool$$Usize$Bool$$())) ==
      to_bytes$Tuple$$Usize$Bool$$Usize$Bool$(snapshot) ==>
      MemoryBlock$bytes(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(address),
      Size$Usize$()) ==
      to_bytes$Usize(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot)) &&
      MemoryBlock$bytes(field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(address),
      Size$Bool$()) ==
      to_bytes$Bool(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot)))


method memory_copy$Isize(source_address: Address, target_address: Address, permission_amount: Perm)
  requires none < permission_amount
  requires acc(MemoryBlock(target_address, Size$Isize$()), write)
  requires acc(MemoryBlock(source_address, Size$Isize$()), permission_amount)
  ensures acc(MemoryBlock(target_address, Size$Isize$()), write)
  ensures acc(MemoryBlock(source_address, Size$Isize$()), permission_amount)
  ensures MemoryBlock$bytes(source_address, Size$Isize$()) ==
    old(MemoryBlock$bytes(source_address, Size$Isize$()))
  ensures MemoryBlock$bytes(target_address, Size$Isize$()) ==
    MemoryBlock$bytes(source_address, Size$Isize$())


method memory_copy$Usize(source_address: Address, target_address: Address, permission_amount: Perm)
  requires none < permission_amount
  requires acc(MemoryBlock(target_address, Size$Usize$()), write)
  requires acc(MemoryBlock(source_address, Size$Usize$()), permission_amount)
  ensures acc(MemoryBlock(target_address, Size$Usize$()), write)
  ensures acc(MemoryBlock(source_address, Size$Usize$()), permission_amount)
  ensures MemoryBlock$bytes(source_address, Size$Usize$()) ==
    old(MemoryBlock$bytes(source_address, Size$Usize$()))
  ensures MemoryBlock$bytes(target_address, Size$Usize$()) ==
    MemoryBlock$bytes(source_address, Size$Usize$())


method move_place$Usize(target_place: Place, target_root_address: Address, source_place: Place,
  source_root_address: Address, source_snapshot: Snap$Usize)
  requires acc(MemoryBlock(compute_address(target_place, target_root_address),
    Size$Usize$()), write)
  requires acc(OwnedNonAliased$Usize(source_place, source_root_address, source_snapshot), write)
  ensures acc(OwnedNonAliased$Usize(target_place, target_root_address, source_snapshot), write)
  ensures acc(MemoryBlock(compute_address(source_place, source_root_address),
    Size$Usize$()), write)
  ensures valid$Snap$Usize(source_snapshot)
{
  unfold acc(OwnedNonAliased$Usize(source_place, source_root_address, source_snapshot), write)
  memory_copy$Usize(compute_address(source_place, source_root_address), compute_address(target_place,
    target_root_address), write)
  fold acc(OwnedNonAliased$Usize(target_place, target_root_address, source_snapshot), write)
}

method write_address_constant$Bool(target_address: Address, source_snapshot: Snap$Bool)
  requires acc(MemoryBlock(target_address, Size$Bool$()), write)
  ensures acc(MemoryBlock(target_address, Size$Bool$()), write)
  ensures MemoryBlock$bytes(target_address, Size$Bool$()) ==
    to_bytes$Bool(source_snapshot)


method write_address_constant$Usize(target_address: Address, source_snapshot: Snap$Usize)
  requires acc(MemoryBlock(target_address, Size$Usize$()), write)
  ensures acc(MemoryBlock(target_address, Size$Usize$()), write)
  ensures MemoryBlock$bytes(target_address, Size$Usize$()) ==
    to_bytes$Usize(source_snapshot)


method write_place_constant$Bool(target_place: Place, target_root_address: Address,
  source_snapshot: Snap$Bool)
  requires acc(MemoryBlock(compute_address(target_place, target_root_address),
    Size$Bool$()), write)
  requires valid$Snap$Bool(source_snapshot)
  ensures acc(OwnedNonAliased$Bool(target_place, target_root_address, source_snapshot), write)
{
  write_address_constant$Bool(compute_address(target_place, target_root_address),
    source_snapshot)
  fold acc(OwnedNonAliased$Bool(target_place, target_root_address, source_snapshot), write)
}

method write_place_constant$Tuple$$$(target_place: Place, target_root_address: Address,
  source_snapshot: Snap$Tuple$$$)
  requires acc(MemoryBlock(compute_address(target_place, target_root_address),
    Size$Tuple$$$$()), write)
  requires valid$Snap$Tuple$$$(source_snapshot)
  ensures acc(OwnedNonAliased$Tuple$$$(target_place, target_root_address, source_snapshot), write)
{
  memory_block_split$Tuple$$$(compute_address(target_place, target_root_address),
    write)
  fold acc(OwnedNonAliased$Tuple$$$(target_place, target_root_address, source_snapshot), write)
}

method write_place_constant$Usize(target_place: Place, target_root_address: Address,
  source_snapshot: Snap$Usize)
  requires acc(MemoryBlock(compute_address(target_place, target_root_address),
    Size$Usize$()), write)
  requires valid$Snap$Usize(source_snapshot)
  ensures acc(OwnedNonAliased$Usize(target_place, target_root_address, source_snapshot), write)
{
  write_address_constant$Usize(compute_address(target_place, target_root_address),
    source_snapshot)
  fold acc(OwnedNonAliased$Usize(target_place, target_root_address, source_snapshot), write)
}