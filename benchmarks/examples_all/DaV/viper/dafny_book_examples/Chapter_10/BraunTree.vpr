/** 
 * Just like in chapter 6 in the file examples-6.1.vpr, we have to import
 * the library definitions of decreases and bounded in order to define
 * a well-founded order.
 */ 
import <decreases/all.vpr>

/**
 * In order to use the self-defined adt BraunTree, we have to define a well-founded
 * order on the BraunTree. Otherwise, we will not be able to prove termination of
 * our functions using this adt.
 */
domain BraunTreeWellFoundedOrder{

  /**
   * Just as with the Lists above, we have to define that every BraunTree is bounded.
   * The lowest element of a BraunTree would be leaf().
   */
  axiom {
    forall y: BraunTree :: {bounded(y)} bounded(y)
  }

  /**
   * We also have to define the decreasing relationship between BraunTrees.
   * With this we tell the SMT solver that, the left and right subtrees of
   * such an adt will be smaller elements.
   */
  axiom {
    forall pq: BraunTree ::
      decreasing(pq.left, pq) && decreasing(pq.right, pq)
  }

  /**
   * Finally, we also define the transitive relationship between BraunTrees.
   * Meaning that if a BraunTree is a subtree of another, then its subtree will
   * also be a subtree to its parent.
   */
  axiom {
    forall pq1: BraunTree, pq2: BraunTree, pq3: BraunTree ::
      decreasing(pq1, pq2) && decreasing(pq2, pq3) ==> decreasing(pq1, pq3)
  }
}

 /**
 * This ADT is the translation of the BraunTree created in the book.
 * The BraunTree is an ADT with two cases. Either it is an empty leaf,
 * or a Node. Each node consists of an Int value, as well as two BraunTrees.
 */
adt BraunTree {
    Leaf()
    Node(x: Int, left: BraunTree, right: BraunTree)
}

/**
 * In the book, they use 'type PQueue = BraunTree'. This is not possible in 
 * Viper. Therefore we will be using a macro to alias PQueue with BraunTree.
 * This will allow us to follow the book more closely.
 */
define PQueue BraunTree
