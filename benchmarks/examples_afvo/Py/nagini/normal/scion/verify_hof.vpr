domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function PSeq_basic(): PyType
  
  function PSeq(arg0: PyType): PyType
  
  function PSeq_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function Place(): PyType
  
  unique function Router(): PyType
  
  unique function Serializable(): PyType
  
  unique function SCIONIFVerificationError(): PyType
  
  unique function SCIONOFVerificationError(): PyType
  
  unique function SCIONOFExpiredError(): PyType
  
  unique function SCIONBaseException(): PyType
  
  unique function SCIONBaseError(): PyType
  
  unique function SCIONIOError(): PyType
  
  unique function SCIONIndexError(): PyType
  
  unique function SCIONKeyError(): PyType
  
  unique function SCIONJSONError(): PyType
  
  unique function SCIONYAMLError(): PyType
  
  unique function SCIONParseError(): PyType
  
  unique function SCIONTypeError(): PyType
  
  unique function SCIONServiceLookupError(): PyType
  
  unique function SCIONChecksumFailed(): PyType
  
  unique function SCIONTCPError(): PyType
  
  unique function SCIONTCPTimeout(): PyType
  
  unique function SCIONElement(): PyType
  
  unique function OpaqueField(): PyType
  
  unique function OpaqueFieldList(): PyType
  
  unique function HopOpaqueField(): PyType
  
  unique function InfoOpaqueField(): PyType
  
  unique function SCIONTime(): PyType
  
  unique function SCIONPath(): PyType
  
  unique function ASMarking(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: { list(arg0),list_arg(Z, 0) } issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: { dict(arg0, arg1),dict_arg(Z, 0) } issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: { dict(arg0, arg1),dict_arg(Z, 1) } issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_PSeq {
    (forall var0: PyType :: { PSeq(var0) } extends_(PSeq(var0), object()) && get_basic(PSeq(var0)) == PSeq_basic())
  }
  
  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType :: { PSeq(arg0),PSeq_arg(Z, 0) } issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: { PSet(arg0),PSet_arg(Z, 0) } issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_Router {
    extends_(Router(), SCIONElement()) && get_basic(Router()) == Router()
  }
  
  axiom subtype_Serializable {
    extends_(Serializable(), object()) && get_basic(Serializable()) == Serializable()
  }
  
  axiom subtype_SCIONIFVerificationError {
    extends_(SCIONIFVerificationError(), SCIONBaseError()) && get_basic(SCIONIFVerificationError()) == SCIONIFVerificationError()
  }
  
  axiom subtype_SCIONOFVerificationError {
    extends_(SCIONOFVerificationError(), SCIONBaseError()) && get_basic(SCIONOFVerificationError()) == SCIONOFVerificationError()
  }
  
  axiom subtype_SCIONOFExpiredError {
    extends_(SCIONOFExpiredError(), SCIONBaseError()) && get_basic(SCIONOFExpiredError()) == SCIONOFExpiredError()
  }
  
  axiom subtype_SCIONBaseException {
    extends_(SCIONBaseException(), Exception()) && get_basic(SCIONBaseException()) == SCIONBaseException()
  }
  
  axiom subtype_SCIONBaseError {
    extends_(SCIONBaseError(), SCIONBaseException()) && get_basic(SCIONBaseError()) == SCIONBaseError()
  }
  
  axiom subtype_SCIONIOError {
    extends_(SCIONIOError(), SCIONBaseError()) && get_basic(SCIONIOError()) == SCIONIOError()
  }
  
  axiom subtype_SCIONIndexError {
    extends_(SCIONIndexError(), SCIONBaseError()) && get_basic(SCIONIndexError()) == SCIONIndexError()
  }
  
  axiom subtype_SCIONKeyError {
    extends_(SCIONKeyError(), SCIONBaseError()) && get_basic(SCIONKeyError()) == SCIONKeyError()
  }
  
  axiom subtype_SCIONJSONError {
    extends_(SCIONJSONError(), SCIONBaseError()) && get_basic(SCIONJSONError()) == SCIONJSONError()
  }
  
  axiom subtype_SCIONYAMLError {
    extends_(SCIONYAMLError(), SCIONBaseError()) && get_basic(SCIONYAMLError()) == SCIONYAMLError()
  }
  
  axiom subtype_SCIONParseError {
    extends_(SCIONParseError(), SCIONBaseError()) && get_basic(SCIONParseError()) == SCIONParseError()
  }
  
  axiom subtype_SCIONTypeError {
    extends_(SCIONTypeError(), SCIONBaseError()) && get_basic(SCIONTypeError()) == SCIONTypeError()
  }
  
  axiom subtype_SCIONServiceLookupError {
    extends_(SCIONServiceLookupError(), SCIONBaseError()) && get_basic(SCIONServiceLookupError()) == SCIONServiceLookupError()
  }
  
  axiom subtype_SCIONChecksumFailed {
    extends_(SCIONChecksumFailed(), SCIONBaseError()) && get_basic(SCIONChecksumFailed()) == SCIONChecksumFailed()
  }
  
  axiom subtype_SCIONTCPError {
    extends_(SCIONTCPError(), SCIONBaseError()) && get_basic(SCIONTCPError()) == SCIONTCPError()
  }
  
  axiom subtype_SCIONTCPTimeout {
    extends_(SCIONTCPTimeout(), SCIONBaseError()) && get_basic(SCIONTCPTimeout()) == SCIONTCPTimeout()
  }
  
  axiom subtype_SCIONElement {
    extends_(SCIONElement(), object()) && get_basic(SCIONElement()) == SCIONElement()
  }
  
  axiom subtype_OpaqueField {
    extends_(OpaqueField(), Serializable()) && get_basic(OpaqueField()) == OpaqueField()
  }
  
  axiom subtype_OpaqueFieldList {
    extends_(OpaqueFieldList(), object()) && get_basic(OpaqueFieldList()) == OpaqueFieldList()
  }
  
  axiom subtype_HopOpaqueField {
    extends_(HopOpaqueField(), OpaqueField()) && get_basic(HopOpaqueField()) == HopOpaqueField()
  }
  
  axiom subtype_InfoOpaqueField {
    extends_(InfoOpaqueField(), OpaqueField()) && get_basic(InfoOpaqueField()) == InfoOpaqueField()
  }
  
  axiom subtype_SCIONTime {
    extends_(SCIONTime(), object()) && get_basic(SCIONTime()) == SCIONTime()
  }
  
  axiom subtype_SCIONPath {
    extends_(SCIONPath(), Serializable()) && get_basic(SCIONPath()) == SCIONPath()
  }
  
  axiom subtype_ASMarking {
    extends_(ASMarking(), object()) && get_basic(ASMarking()) == ASMarking()
  }
}

domain Function {
  
  
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { (Low(x): Bool) } (Low(x): Bool))
  }
}

domain _list_ce_helper {
  
  function seq_ref_length(___s: Seq[Ref]): Int
  
  function seq_ref_index(___s: Seq[Ref], i: Int): Ref
  
  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }
  
  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int :: { ___s[___i] } ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain __MSHelper[T$] {
  
  function __toMS(s: Seq[T$]): Multiset[T$]
  
  axiom __toMS_def_1 {
    (__toMS(Seq[T$]()): Multiset[T$]) == Multiset[T$]()
  }
  
  axiom __toMS_def_2 {
    (forall __t: T$ :: { (__toMS(Seq(__t)): Multiset[T$]) } (__toMS(Seq(__t)): Multiset[T$]) == Multiset(__t))
  }
  
  axiom __toMS_def_3 {
    (forall __ss1: Seq[T$], __ss2: Seq[T$] :: { (__toMS(__ss1 ++ __ss2): Multiset[T$]) } (__toMS(__ss1 ++ __ss2): Multiset[T$]) == ((__toMS(__ss1): Multiset[T$]) union (__toMS(__ss2): Multiset[T$])))
  }
  
  axiom __toMS_def_4 {
    (forall __ss1: Seq[T$] :: { (__toMS(__ss1): Multiset[T$]) } |(__toMS(__ss1): Multiset[T$])| == |__ss1|)
  }
}

domain _dict_ce_helper {
  
  function dict_get_helper(___s: Set[Ref], ___s2: Ref, ___s3: Ref): Ref
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field dict_acc2: Ref

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Router__udp_sock: Ref

field Router_interface: Ref

field Router_is_core_router: Ref

field Router_of_gen_key: Ref

field Router_sibra_key: Ref

field Router_if_states: Ref

field Router_revocations: Ref

field Router_pre_ext_handlers: Ref

field Router_post_ext_handlers: Ref

field Router_sibra_state: Ref

field Router__remote_sock: Ref

field InterfaceState_is_active: Ref

field InterfaceState_rev_info: Ref

field SCIONInterfaceDownException_if_id: Ref

field SCIONBaseException_args_: Ref

field SCIONElement_id: Ref

field SCIONElement_conf_dir: Ref

field SCIONElement_ifid2br: Ref

field SCIONElement__port: Ref

field SCIONElement_topology: Ref

field SCIONElement_config: Ref

field SCIONElement_addr: Ref

field SCIONElement_trust_store: Ref

field SCIONElement_total_dropped: Ref

field SCIONElement__core_ases: Ref

field SCIONElement_run_flag: Ref

field SCIONElement_stopped_flag: Ref

field SCIONElement__in_buf: Ref

field SCIONElement__socks: Ref

field SCIONElement__startup: Ref

field SCIONElement_DefaultMeta: PyType

field Config_master_as_key: Ref

field Config_propagation_time: Ref

field Config_registration_time: Ref

field Config_registers_paths: Ref

field Config_cert_ver: Ref

field ExtensionHeader__hdr_len: Ref

field HostAddrBase_addr: Ref

field OpaqueFieldList__order: Ref

field OpaqueFieldList__labels: Ref

field HopOpaqueField_xover: Ref

field HopOpaqueField_verify_only: Ref

field HopOpaqueField_forward_only: Ref

field HopOpaqueField_recurse: Ref

field HopOpaqueField_exp_time: Ref

field HopOpaqueField_ingress_if: Ref

field HopOpaqueField_egress_if: Ref

field HopOpaqueField_mac: Ref

field InfoOpaqueField_up_flag: Ref

field InfoOpaqueField_shortcut: Ref

field InfoOpaqueField_peer: Ref

field InfoOpaqueField_timestamp: Ref

field InfoOpaqueField_isd: Ref

field InfoOpaqueField_hops: Ref

field Raw__data: Ref

field Raw__desc: Ref

field Raw__len: Ref

field Raw__min: Ref

field Raw__offset: Ref

field SCIONPath__ofs: Ref

field SCIONPath__iof_idx: Ref

field SCIONPath__hof_idx: Ref

field SCIONPath_interfaces: Ref

field SCIONPath_mtu: Ref

field PCBMarking_p: Ref

field PPCBMarking_inIA: Ref

field PPCBMarking_inIF: Ref

field PPCBMarking_inMTU: Ref

field PPCBMarking_outIA: Ref

field PPCBMarking_outIF: Ref

field ISD_AS__isd: Ref

field ISD_AS__as: Ref

field SCIONAddr_isd_as: Ref

field SCIONAddr_host: Ref

field SCIONL4Packet_l4_hdr: Ref

field SCIONCommonHdr_version: Ref

field SCIONCommonHdr_src_addr_type: Ref

field SCIONCommonHdr_dst_addr_type: Ref

field SCIONCommonHdr_addrs_len: Ref

field SCIONCommonHdr_total_len: Ref

field SCIONCommonHdr__iof_idx: Ref

field SCIONCommonHdr__hof_idx: Ref

field SCIONCommonHdr_next_hdr: Ref

field SCIONCommonHdr_hdr_len: Ref

field SCIONAddrHdr_src: Ref

field SCIONAddrHdr_dst: Ref

field SCIONAddrHdr__pad_len: Ref

field SCIONAddrHdr__total_len: Ref

field SCIONBasePacket_cmn_hdr: Ref

field SCIONBasePacket_addrs: Ref

field SCIONBasePacket_path: Ref

field SCIONBasePacket__l4_proto: Ref

field SCIONBasePacket__payload: Ref

field SCIONExtPacket_ext_hdrs: Ref

field SCMPPayload__cmn_hdr: Ref

field SCMPPayload__addrs: Ref

field SCMPPayload__path: Ref

field SCMPPayload__exts: Ref

field SCMPPayload__l4_hdr: Ref

field SCMPExt_error: Ref

field SCMPExt_hopbyhop: Ref

field SibraExtBase_accepted: Ref

field SibraExtBase_error: Ref

field Element_addr: Ref

field Element_port: Ref

field Element_name: Ref

field Topology_is_core_as: Ref

field Topology_mtu: Ref

field Topology_isd_as: Ref

field Topology_beacon_servers: Ref

field Topology_certificate_servers: Ref

field Topology_path_servers: Ref

field Topology_sibra_servers: Ref

field Topology_parent_border_routers: Ref

field Topology_child_border_routers: Ref

field Topology_peer_border_routers: Ref

field Topology_routing_border_routers: Ref

field RouterElement_interface: Ref

field InterfaceElement_isd_as: Ref

field InterfaceElement_if_id: Ref

field InterfaceElement_udp_port: Ref

field InterfaceElement_bandwidth: Ref

field InterfaceElement_to_addr: Ref

field InterfaceElement_link_type: Ref

field InterfaceElement_to_udp_port: Ref

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function pre_condition_for_get_hof_ver_path(ingress_6: Ref, path_3: Ref): Ref
  requires issubtype(typeof(ingress_6), bool())
  requires issubtype(typeof(path_3), SCIONPath())
  requires acc(SCIONPath_State(path_3), 1 / 10)
  requires SCIONPath_get_hof_idx(path_3) != null
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(!bool___unbox__(ingress_6) ==> int___lt__(int___add__(int___unbox__(SCIONPath_get_hof_idx(path_3)), 1), int___unbox__(SCIONPath_get_ofs_len(path_3))) && (issubtype(typeof(SCIONPath_ofs_get_by_idx(path_3, __prim__int___box__(int___add__(int___unbox__(SCIONPath_get_hof_idx(path_3)), 1)))), HopOpaqueField()) && SCIONPath_ofs_get_by_idx(path_3, __prim__int___box__(int___add__(int___unbox__(SCIONPath_get_hof_idx(path_3)), 1))) != SCIONPath_ofs_get_by_idx(path_3, SCIONPath_get_hof_idx(path_3))))
}

function Router_get_interface_if_id(self_4: Ref): Ref
  requires issubtype(typeof(self_4), Router())
  requires self_4 != null
  requires acc(SCIONElement_State(self_4), 1 / 10)
  ensures issubtype(typeof(result), int())


function Router_get_of_gen_key(self_16: Ref): Ref
  requires issubtype(typeof(self_16), Router())
  requires self_16 != null
  requires acc(SCIONElement_State(self_16), 1 / 10)
  ensures issubtype(typeof(result), bytes())


function OpaqueFieldList_contents(self_108: Ref): Ref
  requires issubtype(typeof(self_108), OpaqueFieldList())
  requires self_108 != null
  requires acc(self_108.OpaqueFieldList__order, 1 / 20) && issubtype(typeof(self_108.OpaqueFieldList__order), tuple(Seq(str()))) && (acc(self_108.OpaqueFieldList__labels, 1 / 20) && issubtype(typeof(self_108.OpaqueFieldList__labels), dict(str(), list(OpaqueField()))))
  requires acc(self_108.OpaqueFieldList__labels.dict_acc, 1 / 20) && acc(self_108.OpaqueFieldList__labels.dict_acc2, 1 / 20)
  ensures issubtype(typeof(result), PSeq(OpaqueField()))
  ensures int___eq__(__prim__int___box__(PSeq___len__(result)), OpaqueFieldList___len__(self_108))


function OpaqueFieldList___len__(self_109: Ref): Ref
  requires issubtype(typeof(self_109), OpaqueFieldList())
  requires self_109 != null
  requires acc(self_109.OpaqueFieldList__labels, 1 / 20) && issubtype(typeof(self_109.OpaqueFieldList__labels), dict(str(), list(OpaqueField())))
  requires acc(self_109.OpaqueFieldList__labels.dict_acc, 1 / 20) && acc(self_109.OpaqueFieldList__labels.dict_acc2, 1 / 20)
  ensures issubtype(typeof(result), int())
  ensures int___ge__(int___unbox__(result), 0)


function OpaqueFieldList_get_by_idx(self_113: Ref, idx_1: Ref): Ref
  requires issubtype(typeof(self_113), OpaqueFieldList())
  requires issubtype(typeof(idx_1), int())
  requires self_113 != null
  requires acc(OpaqueFieldList_State(self_113), 1 / 20)
  requires int___ge__(int___unbox__(idx_1), 0) && int___lt__(int___unbox__(idx_1), int___unbox__(OpaqueFieldList_get_len(self_113)))
  ensures issubtype(typeof(result), OpaqueField())
  ensures result == (unfolding acc(OpaqueFieldList_State(self_113), 1 / 20) in PSeq___getitem__(OpaqueFieldList_contents(self_113), idx_1))
  ensures PSeq___contains__((unfolding acc(OpaqueFieldList_State(self_113), 1 / 20) in OpaqueFieldList_contents(self_113)), result)


function OpaqueFieldList_get_len(self_114: Ref): Ref
  requires issubtype(typeof(self_114), OpaqueFieldList())
  requires self_114 != null
  requires acc(OpaqueFieldList_State(self_114), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueFieldList_State(self_114), 1 / 20) in OpaqueFieldList___len__(self_114))
}

function OpaqueFieldList_get_contents(self_115: Ref): Ref
  requires issubtype(typeof(self_115), OpaqueFieldList())
  requires self_115 != null
  requires acc(OpaqueFieldList_State(self_115), 1 / 20)
  ensures issubtype(typeof(result), PSeq(OpaqueField()))
{
  (unfolding acc(OpaqueFieldList_State(self_115), 1 / 20) in OpaqueFieldList_contents(self_115))
}

function OpaqueFieldList_get_iof_peer(self_116: Ref, iof_0: Ref): Ref
  requires issubtype(typeof(self_116), OpaqueFieldList())
  requires issubtype(typeof(iof_0), InfoOpaqueField())
  requires self_116 != null
  requires acc(OpaqueFieldList_State(self_116), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_116), iof_0)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_116), 1 / 10) in InfoOpaqueField_get_peer(iof_0))
}

function OpaqueFieldList_get_iof_shortcut(self_117: Ref, iof_1: Ref): Ref
  requires issubtype(typeof(self_117), OpaqueFieldList())
  requires issubtype(typeof(iof_1), InfoOpaqueField())
  requires self_117 != null
  requires acc(OpaqueFieldList_State(self_117), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_117), iof_1)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_117), 1 / 10) in InfoOpaqueField_get_shortcut(iof_1))
}

function OpaqueFieldList_get_iof_up_flag(self_118: Ref, iof_2: Ref): Ref
  requires issubtype(typeof(self_118), OpaqueFieldList())
  requires issubtype(typeof(iof_2), InfoOpaqueField())
  requires self_118 != null
  requires acc(OpaqueFieldList_State(self_118), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_118), iof_2)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_118), 1 / 10) in InfoOpaqueField_get_up_flag(iof_2))
}

function OpaqueFieldList_get_iof_hops(self_119: Ref, iof_3: Ref): Ref
  requires issubtype(typeof(self_119), OpaqueFieldList())
  requires issubtype(typeof(iof_3), InfoOpaqueField())
  requires self_119 != null
  requires acc(OpaqueFieldList_State(self_119), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_119), iof_3)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueFieldList_State(self_119), 1 / 10) in InfoOpaqueField_get_hops(iof_3))
}

function OpaqueFieldList_get_hof_xover(self_120: Ref, hof_3: Ref): Ref
  requires issubtype(typeof(self_120), OpaqueFieldList())
  requires issubtype(typeof(hof_3), HopOpaqueField())
  requires self_120 != null
  requires acc(OpaqueFieldList_State(self_120), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_120), hof_3)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_120), 1 / 10) in HopOpaqueField_get_xover(hof_3))
}

function HopOpaqueField_calc_mac(self_124: Ref, key_0: Ref, ts_0: Ref, prev_hof_2: Ref): Ref
  requires issubtype(typeof(self_124), HopOpaqueField())
  requires issubtype(typeof(key_0), bytes())
  requires issubtype(typeof(ts_0), int())
  requires prev_hof_2 == null || issubtype(typeof(prev_hof_2), HopOpaqueField())
  requires self_124 != null
  requires acc(OpaqueField_State(self_124), 1 / 10)
  requires prev_hof_2 != null ==> acc(OpaqueField_State(prev_hof_2), 1 / 10)
  ensures issubtype(typeof(result), bytes())


function HopOpaqueField_verify_mac(self_125: Ref, key_1: Ref, ts_1: Ref, prev_hof_3: Ref): Ref
  requires issubtype(typeof(self_125), HopOpaqueField())
  requires issubtype(typeof(key_1), bytes())
  requires issubtype(typeof(ts_1), int())
  requires prev_hof_3 == null || issubtype(typeof(prev_hof_3), HopOpaqueField())
  requires self_125 != null
  requires acc(OpaqueField_State(self_125), 1 / 10)
  requires prev_hof_3 != null ==> acc(OpaqueField_State(prev_hof_3), 1 / 10)
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(bytes___eq__(HopOpaqueField_get_mac(self_125), HopOpaqueField_calc_mac(self_125, key_1, ts_1, prev_hof_3)))
}

function HopOpaqueField_get_xover(self_126: Ref): Ref
  requires issubtype(typeof(self_126), HopOpaqueField())
  requires self_126 != null
  requires acc(OpaqueField_State(self_126), 1 / 20)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueField_State(self_126), 1 / 20) in self_126.HopOpaqueField_xover)
}

function HopOpaqueField_get_exp_time(self_129: Ref): Ref
  requires issubtype(typeof(self_129), HopOpaqueField())
  requires self_129 != null
  requires acc(OpaqueField_State(self_129), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueField_State(self_129), 1 / 20) in self_129.HopOpaqueField_exp_time)
}

function HopOpaqueField_get_egress_if(self_130: Ref): Ref
  requires issubtype(typeof(self_130), HopOpaqueField())
  requires self_130 != null
  requires acc(OpaqueField_State(self_130), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueField_State(self_130), 1 / 20) in self_130.HopOpaqueField_egress_if)
}

function HopOpaqueField_get_ingress_if(self_131: Ref): Ref
  requires issubtype(typeof(self_131), HopOpaqueField())
  requires self_131 != null
  requires acc(OpaqueField_State(self_131), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueField_State(self_131), 1 / 20) in self_131.HopOpaqueField_ingress_if)
}

function HopOpaqueField_get_mac(self_132: Ref): Ref
  requires issubtype(typeof(self_132), HopOpaqueField())
  requires self_132 != null
  requires acc(OpaqueField_State(self_132), 1 / 20)
  ensures issubtype(typeof(result), bytes())
{
  (unfolding acc(OpaqueField_State(self_132), 1 / 20) in self_132.HopOpaqueField_mac)
}

function InfoOpaqueField_get_up_flag(self_137: Ref): Ref
  requires issubtype(typeof(self_137), InfoOpaqueField())
  requires self_137 != null
  requires acc(OpaqueField_State(self_137), 1 / 20)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueField_State(self_137), 1 / 20) in self_137.InfoOpaqueField_up_flag)
}

function InfoOpaqueField_get_shortcut(self_138: Ref): Ref
  requires issubtype(typeof(self_138), InfoOpaqueField())
  requires self_138 != null
  requires acc(OpaqueField_State(self_138), 1 / 20)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueField_State(self_138), 1 / 20) in self_138.InfoOpaqueField_shortcut)
}

function InfoOpaqueField_get_peer(self_139: Ref): Ref
  requires issubtype(typeof(self_139), InfoOpaqueField())
  requires self_139 != null
  requires acc(OpaqueField_State(self_139), 1 / 20)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueField_State(self_139), 1 / 20) in self_139.InfoOpaqueField_peer)
}

function InfoOpaqueField_get_hops(self_140: Ref): Ref
  requires issubtype(typeof(self_140), InfoOpaqueField())
  requires self_140 != null
  requires acc(OpaqueField_State(self_140), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueField_State(self_140), 1 / 20) in self_140.InfoOpaqueField_hops)
}

function InfoOpaqueField_get_timestamp(self_141: Ref): Ref
  requires issubtype(typeof(self_141), InfoOpaqueField())
  requires self_141 != null
  requires acc(OpaqueField_State(self_141), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueField_State(self_141), 1 / 20) in self_141.InfoOpaqueField_timestamp)
}

function SCIONTime_get_time(cls_2: PyType): Ref
  requires issubtype(cls_2, SCIONTime())
  ensures issubtype(typeof(result), int())


function valid_hof(path_6: Ref, ingress_10: Ref, interface_if_id: Ref, of_gen_key: Ref): Ref
  requires issubtype(typeof(path_6), SCIONPath())
  requires issubtype(typeof(ingress_10), bool())
  requires issubtype(typeof(interface_if_id), int())
  requires issubtype(typeof(of_gen_key), bytes())
  requires acc(SCIONPath_State(path_6), 1 / 10)
  requires SCIONPath_get_iof_idx(path_6) != null
  requires SCIONPath_get_hof_idx(path_6) != null
  ensures issubtype(typeof(result), bool())
{
  __prim__bool___box__(!!int___eq__(SCIONPath_get_curr_if(path_6, ingress_10), interface_if_id) && bool___unbox__((let lambda726_38$hof == (SCIONPath_get_hof(path_6)) in (let lambda727_38$iof == (SCIONPath_get_iof(path_6)) in (let lambda728_51$ts == (SCIONPath_get_iof_timestamp(path_6, lambda727_38$iof)) in (let lambda729_47$prev_hof == (SCIONPath_get_hof_ver_pure(path_6)) in __prim__bool___box__(int___le__(int___unbox__(int___int__(SCIONTime_get_time(SCIONTime()))), int___add__(int___unbox__(lambda728_51$ts), int___mul__(int___unbox__(SCIONPath_get_hof_exp_time(path_6, lambda726_38$hof)), int___unbox__(EXP_TIME_UNIT())))) && bool___unbox__((unfolding acc(SCIONPath_State(path_6), 1 / 10) in (unfolding acc(OpaqueFieldList_State(path_6.SCIONPath__ofs), 1 / 10) in HopOpaqueField_verify_mac(lambda726_38$hof, of_gen_key, lambda728_51$ts, lambda729_47$prev_hof)))))))))))
}

function SCIONPath_get_iof(self_148: Ref): Ref
  requires issubtype(typeof(self_148), SCIONPath())
  requires self_148 != null
  requires acc(SCIONPath_State(self_148), 1 / 20)
  ensures result == null || issubtype(typeof(result), InfoOpaqueField())
  ensures SCIONPath_get_iof_idx(self_148) != null ==> result != null
  ensures result != null ==> PSeq___contains__(SCIONPath_get_ofs_contents(self_148), result)
{
  (let idx_8 == (SCIONPath_get_iof_idx(self_148)) in (let cond_1_0 == (__prim__bool___box__(idx_8 == null)) in (true && bool___unbox__(cond_1_0) ? null : object___cast__(InfoOpaqueField(), (unfolding acc(SCIONPath_State(self_148), 1 / 20) in OpaqueFieldList_get_by_idx(self_148.SCIONPath__ofs, idx_8))))))
}

function SCIONPath_get_hof(self_149: Ref): Ref
  requires issubtype(typeof(self_149), SCIONPath())
  requires self_149 != null
  requires acc(SCIONPath_State(self_149), 1 / 10)
  ensures result == null || issubtype(typeof(result), HopOpaqueField())
  ensures SCIONPath_get_hof_idx(self_149) != null ==> result != null
  ensures result != null ==> PSeq___contains__(SCIONPath_get_ofs_contents(self_149), result)
{
  (let idx_9 == (SCIONPath_get_hof_idx(self_149)) in (let cond_2_0 == (__prim__bool___box__(idx_9 == null)) in (true && bool___unbox__(cond_2_0) ? null : object___cast__(HopOpaqueField(), (unfolding acc(SCIONPath_State(self_149), 1 / 10) in OpaqueFieldList_get_by_idx(self_149.SCIONPath__ofs, idx_9))))))
}

function SCIONPath_get_curr_if(self_154: Ref, ingress_7: Ref): Ref
  requires issubtype(typeof(self_154), SCIONPath())
  requires issubtype(typeof(ingress_7), bool())
  requires self_154 != null
  requires acc(SCIONPath_State(self_154), 1 / 10)
  requires SCIONPath_get_iof_idx(self_154) != null
  requires SCIONPath_get_hof_idx(self_154) != null
  ensures issubtype(typeof(result), int())
  ensures SCIONPath_get_iof_idx(self_154) != null
  ensures SCIONPath_get_hof_idx(self_154) != null
{
  (let hof_33 == (SCIONPath_get_hof(self_154)) in (let iof_36 == (SCIONPath_get_iof(self_154)) in (let cond_7_0 == (__prim__bool___box__(bool___eq__(ingress_7, SCIONPath_get_iof_up_flag(self_154, iof_36)))) in (true && bool___unbox__(cond_7_0) ? SCIONPath_get_hof_egress_if(self_154, hof_33) : SCIONPath_get_hof_ingress_if(self_154, hof_33)))))
}

function SCIONPath_get_iof_idx(self_155: Ref): Ref
  requires issubtype(typeof(self_155), SCIONPath())
  requires self_155 != null
  requires acc(SCIONPath_State(self_155), 1 / 20)
  ensures result == null || issubtype(typeof(result), int())
  ensures result != null ==> int___ge__(int___unbox__(result), 0) && int___lt__(int___unbox__(result), int___unbox__(SCIONPath_get_ofs_len(self_155)))
{
  (unfolding acc(SCIONPath_State(self_155), 1 / 20) in self_155.SCIONPath__iof_idx)
}

function SCIONPath_get_hof_idx(self_156: Ref): Ref
  requires issubtype(typeof(self_156), SCIONPath())
  requires self_156 != null
  requires acc(SCIONPath_State(self_156), 1 / 20)
  ensures result == null || issubtype(typeof(result), int())
  ensures result != null ==> int___ge__(int___unbox__(result), 0) && int___lt__(int___unbox__(result), int___unbox__(SCIONPath_get_ofs_len(self_156)))
{
  (unfolding acc(SCIONPath_State(self_156), 1 / 20) in self_156.SCIONPath__hof_idx)
}

function SCIONPath_get_ofs_contents(self_157: Ref): Ref
  requires issubtype(typeof(self_157), SCIONPath())
  requires self_157 != null
  requires acc(SCIONPath_State(self_157), 1 / 20)
  ensures issubtype(typeof(result), PSeq(OpaqueField()))
{
  (unfolding acc(SCIONPath_State(self_157), 1 / 20) in SCIONPath_get_ofs_contents_1(self_157))
}

function SCIONPath_get_ofs_contents_1(self_158: Ref): Ref
  requires issubtype(typeof(self_158), SCIONPath())
  requires self_158 != null
  requires acc(self_158.SCIONPath__ofs, 1 / 20) && issubtype(typeof(self_158.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_158.SCIONPath__ofs), 1 / 20)
  ensures issubtype(typeof(result), PSeq(OpaqueField()))
{
  (unfolding acc(OpaqueFieldList_State(self_158.SCIONPath__ofs), 1 / 20) in OpaqueFieldList_contents(self_158.SCIONPath__ofs))
}

function SCIONPath_state_get_ofs_len(self_159: Ref): Ref
  requires issubtype(typeof(self_159), SCIONPath())
  requires self_159 != null
  requires acc(self_159.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_159.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_159.SCIONPath__ofs), 1 / 10)
  ensures issubtype(typeof(result), int())
{
  object___cast__(int(), (unfolding acc(OpaqueFieldList_State(self_159.SCIONPath__ofs), 1 / 10) in OpaqueFieldList___len__(self_159.SCIONPath__ofs)))
}

function SCIONPath_get_ofs_len(self_160: Ref): Ref
  requires issubtype(typeof(self_160), SCIONPath())
  requires self_160 != null
  requires acc(SCIONPath_State(self_160), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  object___cast__(int(), (unfolding acc(SCIONPath_State(self_160), 1 / 20) in SCIONPath_get_ofs_len_1(self_160)))
}

function SCIONPath_get_ofs_len_1(self_161: Ref): Ref
  requires issubtype(typeof(self_161), SCIONPath())
  requires self_161 != null
  requires acc(self_161.SCIONPath__ofs, 1 / 20) && issubtype(typeof(self_161.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_161.SCIONPath__ofs), 1 / 20)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueFieldList_State(self_161.SCIONPath__ofs), 1 / 20) in OpaqueFieldList___len__(self_161.SCIONPath__ofs))
}

function SCIONPath_get_iof_up_flag(self_165: Ref, iof_6: Ref): Ref
  requires issubtype(typeof(self_165), SCIONPath())
  requires issubtype(typeof(iof_6), InfoOpaqueField())
  requires self_165 != null
  requires acc(SCIONPath_State(self_165), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_165), iof_6)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(SCIONPath_State(self_165), 1 / 10) in SCIONPath_get_iof_up_flag_1(self_165, iof_6))
}

function SCIONPath_get_iof_up_flag_1(self_166: Ref, iof_7: Ref): Ref
  requires issubtype(typeof(self_166), SCIONPath())
  requires issubtype(typeof(iof_7), InfoOpaqueField())
  requires self_166 != null
  requires acc(self_166.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_166.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_166.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_166.SCIONPath__ofs), iof_7)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_166.SCIONPath__ofs), 1 / 10) in InfoOpaqueField_get_up_flag(iof_7))
}

function SCIONPath_get_iof_peer(self_167: Ref, iof_8: Ref): Ref
  requires issubtype(typeof(self_167), SCIONPath())
  requires issubtype(typeof(iof_8), InfoOpaqueField())
  requires self_167 != null
  requires acc(SCIONPath_State(self_167), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_167), iof_8)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(SCIONPath_State(self_167), 1 / 10) in SCIONPath_get_iof_peer_1(self_167, iof_8))
}

function SCIONPath_get_iof_peer_1(self_168: Ref, iof_9: Ref): Ref
  requires issubtype(typeof(self_168), SCIONPath())
  requires issubtype(typeof(iof_9), InfoOpaqueField())
  requires self_168 != null
  requires acc(self_168.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_168.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_168.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_168.SCIONPath__ofs), iof_9)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_168.SCIONPath__ofs), 1 / 10) in InfoOpaqueField_get_peer(iof_9))
}

function SCIONPath_get_iof_shortcut(self_169: Ref, iof_10: Ref): Ref
  requires issubtype(typeof(self_169), SCIONPath())
  requires issubtype(typeof(iof_10), InfoOpaqueField())
  requires self_169 != null
  requires acc(SCIONPath_State(self_169), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_169), iof_10)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(SCIONPath_State(self_169), 1 / 10) in SCIONPath_get_iof_shortcut_1(self_169, iof_10))
}

function SCIONPath_get_iof_shortcut_1(self_170: Ref, iof_11: Ref): Ref
  requires issubtype(typeof(self_170), SCIONPath())
  requires issubtype(typeof(iof_11), InfoOpaqueField())
  requires self_170 != null
  requires acc(self_170.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_170.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_170.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_170.SCIONPath__ofs), iof_11)
  ensures issubtype(typeof(result), bool())
{
  (unfolding acc(OpaqueFieldList_State(self_170.SCIONPath__ofs), 1 / 10) in InfoOpaqueField_get_shortcut(iof_11))
}

function SCIONPath_get_hof_ingress_if(self_173: Ref, hof_7: Ref): Ref
  requires issubtype(typeof(self_173), SCIONPath())
  requires issubtype(typeof(hof_7), HopOpaqueField())
  requires self_173 != null
  requires acc(SCIONPath_State(self_173), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_173), hof_7)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(SCIONPath_State(self_173), 1 / 10) in SCIONPath_get_hof_ingress_if_1(self_173, hof_7))
}

function SCIONPath_get_hof_ingress_if_1(self_174: Ref, hof_8: Ref): Ref
  requires issubtype(typeof(self_174), SCIONPath())
  requires issubtype(typeof(hof_8), HopOpaqueField())
  requires self_174 != null
  requires acc(self_174.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_174.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_174.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_174.SCIONPath__ofs), hof_8)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueFieldList_State(self_174.SCIONPath__ofs), 1 / 10) in HopOpaqueField_get_ingress_if(hof_8))
}

function SCIONPath_get_hof_egress_if(self_175: Ref, hof_9: Ref): Ref
  requires issubtype(typeof(self_175), SCIONPath())
  requires issubtype(typeof(hof_9), HopOpaqueField())
  requires self_175 != null
  requires acc(SCIONPath_State(self_175), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_175), hof_9)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(SCIONPath_State(self_175), 1 / 10) in SCIONPath_get_hof_egress_if_1(self_175, hof_9))
}

function SCIONPath_get_hof_egress_if_1(self_176: Ref, hof_10: Ref): Ref
  requires issubtype(typeof(self_176), SCIONPath())
  requires issubtype(typeof(hof_10), HopOpaqueField())
  requires self_176 != null
  requires acc(self_176.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_176.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_176.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_176.SCIONPath__ofs), hof_10)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueFieldList_State(self_176.SCIONPath__ofs), 1 / 10) in HopOpaqueField_get_egress_if(hof_10))
}

function SCIONPath_get_hof_exp_time(self_177: Ref, hof_11: Ref): Ref
  requires issubtype(typeof(self_177), SCIONPath())
  requires issubtype(typeof(hof_11), HopOpaqueField())
  requires self_177 != null
  requires acc(SCIONPath_State(self_177), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_177), hof_11)
  ensures issubtype(typeof(result), int())
  ensures PSeq___contains__(SCIONPath_get_ofs_contents(self_177), hof_11)
{
  (unfolding acc(SCIONPath_State(self_177), 1 / 10) in SCIONPath_get_hof_exp_time_1(self_177, hof_11))
}

function SCIONPath_get_hof_exp_time_1(self_178: Ref, hof_12: Ref): Ref
  requires issubtype(typeof(self_178), SCIONPath())
  requires issubtype(typeof(hof_12), HopOpaqueField())
  requires self_178 != null
  requires acc(self_178.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_178.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_178.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_178.SCIONPath__ofs), hof_12)
  ensures issubtype(typeof(result), int())
  ensures PSeq___contains__(OpaqueFieldList_get_contents(self_178.SCIONPath__ofs), hof_12)
{
  (unfolding acc(OpaqueFieldList_State(self_178.SCIONPath__ofs), 1 / 10) in HopOpaqueField_get_exp_time(hof_12))
}

function SCIONPath_get_iof_timestamp(self_183: Ref, iof_14: Ref): Ref
  requires issubtype(typeof(self_183), SCIONPath())
  requires issubtype(typeof(iof_14), InfoOpaqueField())
  requires self_183 != null
  requires acc(SCIONPath_State(self_183), 1 / 10)
  requires PSeq___contains__(SCIONPath_get_ofs_contents(self_183), iof_14)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(SCIONPath_State(self_183), 1 / 10) in SCIONPath_get_iof_timestamp_1(self_183, iof_14))
}

function SCIONPath_get_iof_timestamp_1(self_184: Ref, iof_15: Ref): Ref
  requires issubtype(typeof(self_184), SCIONPath())
  requires issubtype(typeof(iof_15), InfoOpaqueField())
  requires self_184 != null
  requires acc(self_184.SCIONPath__ofs, 1 / 10) && issubtype(typeof(self_184.SCIONPath__ofs), OpaqueFieldList())
  requires acc(OpaqueFieldList_State(self_184.SCIONPath__ofs), 1 / 10)
  requires PSeq___contains__(OpaqueFieldList_get_contents(self_184.SCIONPath__ofs), iof_15)
  ensures issubtype(typeof(result), int())
{
  (unfolding acc(OpaqueFieldList_State(self_184.SCIONPath__ofs), 1 / 10) in InfoOpaqueField_get_timestamp(iof_15))
}

function SCIONPath_ofs_get_by_idx(self_185: Ref, idx_4: Ref): Ref
  requires issubtype(typeof(self_185), SCIONPath())
  requires issubtype(typeof(idx_4), int())
  requires self_185 != null
  requires acc(SCIONPath_State(self_185), 1 / 10)
  requires int___ge__(int___unbox__(idx_4), 0) && int___lt__(int___unbox__(idx_4), int___unbox__(SCIONPath_get_ofs_len(self_185)))
  ensures issubtype(typeof(result), OpaqueField())
  ensures PSeq___contains__(SCIONPath_get_ofs_contents(self_185), result)
{
  (unfolding acc(SCIONPath_State(self_185), 1 / 10) in OpaqueFieldList_get_by_idx(self_185.SCIONPath__ofs, idx_4))
}

function SCIONPath_get_hof_ver_pure(self_186: Ref): Ref
  requires issubtype(typeof(self_186), SCIONPath())
  requires self_186 != null
  requires acc(SCIONPath_State(self_186), 1 / 10)
  requires SCIONPath_get_iof_idx(self_186) != null
  requires SCIONPath_get_hof_idx(self_186) != null
  ensures result == null || issubtype(typeof(result), HopOpaqueField())
  ensures SCIONPath_get_iof_idx(self_186) != null
  ensures SCIONPath_get_hof_idx(self_186) != null
  ensures result != null ==> PSeq___contains__(SCIONPath_get_ofs_contents(self_186), result)
  ensures result != null ==> result != SCIONPath_get_hof(self_186)


function MAX_SEGMENT_TTL(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(int___mul__(30, 60))
{
  __prim__int___box__(int___mul__(30, 60))
}

function EXP_TIME_UNIT(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(int___floordiv__(int___unbox__(MAX_SEGMENT_TTL()), 256))
{
  __prim__int___box__(int___floordiv__(int___unbox__(MAX_SEGMENT_TTL()), 256))
}

function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

function bool___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), bool())
  requires issubtype(typeof(other), bool())
{
  bool___unbox__(self) == bool___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool
{
  self >= other
}

function int___le__(self: Int, other: Int): Bool
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool
{
  self < other
}

function int___add__(self: Int, other: Int): Int
{
  self + other
}

function int___sub__(self: Int, other: Int): Int
{
  self - other
}

function int___mul__(self: Int, other: Int): Int
{
  self * other
}

function int___floordiv__(self: Int, other: Int): Int
  requires other != 0
{
  self / other
}

function int___int__(self: Ref): Ref
  requires issubtype(typeof(self), int())
  ensures result == self


function object___cast__(typ: PyType, obj: Ref): Ref
  requires issubtype(typeof(obj), typ)
  ensures result == obj
  ensures issubtype(typeof(obj), typ)


function bytes___len__(self: Ref): Int
  requires issubtype(typeof(self), bytes())
  ensures result >= 0
{
  |bytes___val__(self)|
}

function bytes___val__(self: Ref): Seq[Ref]


function bytes___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), bytes())
  ensures (bytes___val__(self) == bytes___val__(other)) == result
  ensures result ==> issubtype(typeof(other), bytes()) && bytes___len__(self) == bytes___len__(other)


function Level(r: Ref): Perm


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function PSeq___sil_seq__(box: Ref): Seq[Ref]
  requires issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))


function PSeq___contains__(self: Ref, item: Ref): Bool
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  ensures result == (item in PSeq___sil_seq__(self))
  ensures result ==> issubtype(typeof(item), PSeq_arg(typeof(self), 0))


function PSeq___getitem__(self: Ref, index: Ref): Ref
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  requires issubtype(typeof(index), int())
  requires (let ln == (PSeq___len__(self)) in (int___unbox__(index) < 0 ==> int___unbox__(index) >= -ln) && (int___unbox__(index) >= 0 ==> int___unbox__(index) < ln))
  ensures result == (int___unbox__(index) >= 0 ? PSeq___sil_seq__(self)[int___unbox__(index)] : PSeq___sil_seq__(self)[PSeq___len__(self) + int___unbox__(index)])
  ensures issubtype(typeof(result), PSeq_arg(typeof(self), 0))


function PSeq___len__(self: Ref): Int
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  ensures result == |PSeq___sil_seq__(self)|


function tuple___val__(self: Ref): Seq[Ref]


function tuple___create1__(arg0: Ref, t0: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  ensures typeof(result) == tuple(Seq(t0))
  ensures tuple_args(typeof(result)) == Seq(t0)
  ensures tuple___val__(result) == Seq(arg0)
  ensures tuple___len__(result) == 1 && tuple___getitem__(result, 0) == arg0


function tuple___create2__(arg0: Ref, arg1: Ref, t0: PyType, t1: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1))
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple___val__(result) == Seq(arg0, arg1)
  ensures tuple___len__(result) == 2 && (tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1)


function tuple___len__(self: Ref): Int
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)|


function tuple___getitem__(self: Ref, key: Int): Ref
  requires (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) + key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==> result == tuple___val__(self)[tuple___len__(self) + key]


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate SCIONElement_State(self_97: Ref) 

predicate State_abstract_rest_4(self_107: Ref) 

predicate OpaqueField_State(self_107: Ref) {
  true && issubtype(typeof(self_107), OpaqueField()) && ((issubtype(typeof(self_107), OpaqueField()) ==> true) && (issubtype(typeof(self_107), HopOpaqueField()) ==> acc(self_107.HopOpaqueField_xover, write) && issubtype(typeof(self_107.HopOpaqueField_xover), bool()) && (acc(self_107.HopOpaqueField_verify_only, write) && issubtype(typeof(self_107.HopOpaqueField_verify_only), bool()) && (acc(self_107.HopOpaqueField_forward_only, write) && issubtype(typeof(self_107.HopOpaqueField_forward_only), bool()) && (acc(self_107.HopOpaqueField_recurse, write) && issubtype(typeof(self_107.HopOpaqueField_recurse), bool()) && (acc(self_107.HopOpaqueField_exp_time, write) && issubtype(typeof(self_107.HopOpaqueField_exp_time), int()) && (acc(self_107.HopOpaqueField_ingress_if, write) && issubtype(typeof(self_107.HopOpaqueField_ingress_if), int()) && (acc(self_107.HopOpaqueField_egress_if, write) && issubtype(typeof(self_107.HopOpaqueField_egress_if), int()) && (acc(self_107.HopOpaqueField_mac, write) && issubtype(typeof(self_107.HopOpaqueField_mac), bytes()))))))))) && (issubtype(typeof(self_107), InfoOpaqueField()) ==> acc(self_107.InfoOpaqueField_up_flag, write) && issubtype(typeof(self_107.InfoOpaqueField_up_flag), bool()) && (acc(self_107.InfoOpaqueField_shortcut, write) && issubtype(typeof(self_107.InfoOpaqueField_shortcut), bool()) && (acc(self_107.InfoOpaqueField_peer, write) && issubtype(typeof(self_107.InfoOpaqueField_peer), bool()) && (acc(self_107.InfoOpaqueField_timestamp, write) && issubtype(typeof(self_107.InfoOpaqueField_timestamp), int()) && (acc(self_107.InfoOpaqueField_isd, write) && issubtype(typeof(self_107.InfoOpaqueField_isd), int()) && (acc(self_107.InfoOpaqueField_hops, write) && issubtype(typeof(self_107.InfoOpaqueField_hops), int()))))))) && (true && typeof(self_107) != OpaqueField() && typeof(self_107) != HopOpaqueField() && typeof(self_107) != InfoOpaqueField() ==> acc(State_abstract_rest_4(self_107), write)))
}

predicate State_abstract_rest_5(self_123: Ref) 

predicate OpaqueFieldList_State(self_123: Ref) {
  true && issubtype(typeof(self_123), OpaqueFieldList()) && ((issubtype(typeof(self_123), OpaqueFieldList()) ==> acc(self_123.OpaqueFieldList__order, write) && issubtype(typeof(self_123.OpaqueFieldList__order), tuple(Seq(str()))) && (acc(self_123.OpaqueFieldList__labels, write) && issubtype(typeof(self_123.OpaqueFieldList__labels), dict(str(), list(OpaqueField()))) && (acc(self_123.OpaqueFieldList__labels.dict_acc, write) && acc(self_123.OpaqueFieldList__labels.dict_acc2, write) && (true && (forall lambda36_40$e: Ref :: { (lambda36_40$e in PSeq___sil_seq__(OpaqueFieldList_contents(self_123))) } { (lambda36_40$e in PSeq___sil_seq__(OpaqueFieldList_contents(self_123))) } issubtype(typeof(lambda36_40$e), OpaqueField()) && (lambda36_40$e in PSeq___sil_seq__(OpaqueFieldList_contents(self_123))) ==> acc(OpaqueField_State(lambda36_40$e), write)))))) && (true && typeof(self_123) != OpaqueFieldList() ==> acc(State_abstract_rest_5(self_123), write)))
}

predicate State_abstract_rest_6(self_197: Ref) 

predicate SCIONPath_State(self_197: Ref) {
  true && issubtype(typeof(self_197), SCIONPath()) && ((issubtype(typeof(self_197), SCIONPath()) ==> acc(self_197.SCIONPath__ofs, write) && issubtype(typeof(self_197.SCIONPath__ofs), OpaqueFieldList()) && (acc(OpaqueFieldList_State(self_197.SCIONPath__ofs), write) && (acc(self_197.SCIONPath__hof_idx, write) && (self_197.SCIONPath__hof_idx == null || issubtype(typeof(self_197.SCIONPath__hof_idx), int())) && (acc(self_197.SCIONPath__iof_idx, write) && (self_197.SCIONPath__iof_idx == null || issubtype(typeof(self_197.SCIONPath__iof_idx), int())) && (self_197.SCIONPath__hof_idx != null && (self_197.SCIONPath__iof_idx != null && (acc(self_197.SCIONPath_interfaces, write) && issubtype(typeof(self_197.SCIONPath_interfaces), list(tuple(Seq(ASMarking(), int())))) && (acc(self_197.SCIONPath_interfaces.list_acc, write) && (acc(self_197.SCIONPath_mtu, write) && (self_197.SCIONPath_mtu == null || issubtype(typeof(self_197.SCIONPath_mtu), int())) && ((self_197.SCIONPath__hof_idx != null ==> int___ge__(int___unbox__(self_197.SCIONPath__hof_idx), 0) && (int___lt__(int___unbox__(self_197.SCIONPath__hof_idx), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__hof_idx)), HopOpaqueField()))) && ((self_197.SCIONPath__iof_idx != null ==> int___ge__(int___unbox__(self_197.SCIONPath__iof_idx), 0) && (int___lt__(int___unbox__(self_197.SCIONPath__iof_idx), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__iof_idx)), InfoOpaqueField()))) && ((self_197.SCIONPath__hof_idx != null && self_197.SCIONPath__iof_idx != null ==> bool___unbox__((let lambda60_94$iof == (object___cast__(InfoOpaqueField(), OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__iof_idx))) in __prim__bool___box__(!bool___unbox__(OpaqueFieldList_get_iof_peer(self_197.SCIONPath__ofs, lambda60_94$iof)) && (bool___unbox__(OpaqueFieldList_get_iof_up_flag(self_197.SCIONPath__ofs, lambda60_94$iof)) && (bool___unbox__((__prim__bool___box__(!bool___unbox__(OpaqueFieldList_get_hof_xover(self_197.SCIONPath__ofs, (object___cast__(HopOpaqueField(), OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__hof_idx))))) || bool___unbox__(OpaqueFieldList_get_iof_shortcut(self_197.SCIONPath__ofs, lambda60_94$iof))))) && !int___eq__(self_197.SCIONPath__hof_idx, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__iof_idx), int___unbox__(OpaqueFieldList_get_iof_hops(self_197.SCIONPath__ofs, lambda60_94$iof))))) ==> int___lt__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && (issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1)))), HopOpaqueField()) && OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1))) != OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__hof_idx)))))))) && (self_197.SCIONPath__hof_idx != null && (self_197.SCIONPath__iof_idx != null && int___lt__(int___unbox__(self_197.SCIONPath__hof_idx), int___sub__(int___unbox__(SCIONPath_state_get_ofs_len(self_197)), 1))) ==> int___lt__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && (issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1)))), HopOpaqueField()) && bool___unbox__((let lambda79_94$iof == (object___cast__(InfoOpaqueField(), OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__iof_idx))) in __prim__bool___box__(int___le__(int___sub__(int___unbox__(self_197.SCIONPath__hof_idx), int___unbox__(self_197.SCIONPath__iof_idx)), int___unbox__(OpaqueFieldList_get_iof_hops(self_197.SCIONPath__ofs, lambda79_94$iof)))))))))))))))))))) && (true && typeof(self_197) != SCIONPath() ==> acc(State_abstract_rest_6(self_197), write)))
}

method Router_verify_hof(_cthread_217: Ref, _caller_measures_217: Seq[Measure$], _residue_217: Perm, self_60: Ref, path: Ref, ingress_2: Ref) returns (_current_wait_level_217: Perm, _err: Ref)
  requires _cthread_217 != null
  requires issubtype(typeof(_cthread_217), Thread_0())
  requires issubtype(typeof(self_60), Router())
  requires issubtype(typeof(path), SCIONPath())
  requires issubtype(typeof(ingress_2), bool())
  requires self_60 != null
  requires acc(SCIONPath_State(path), 1 / 9)
  requires acc(SCIONElement_State(self_60), 1 / 9)
  requires SCIONPath_get_iof_idx(path) != null
  requires SCIONPath_get_hof_idx(path) != null
  requires bool___unbox__(pre_condition_for_get_hof_ver_path(ingress_2, path))
  requires [acc(MustTerminate(_cthread_217), write), true]
  requires [true, Measure$check(_caller_measures_217, _cthread_217, 5) || perm(MustTerminate(_cthread_217)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_217) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_217) && _residue_217 <= _current_wait_level_217), true]
  ensures _err == null ==> acc(SCIONPath_State(path), 1 / 9)
  ensures _err == null ==> acc(SCIONElement_State(self_60), 1 / 9)
  ensures _err == null ==> SCIONPath_get_iof_idx(path) != null
  ensures _err == null ==> SCIONPath_get_hof_idx(path) != null
  ensures _err == null ==> bool___unbox__(valid_hof(path, ingress_2, Router_get_interface_if_id(self_60), Router_get_of_gen_key(self_60)))
  ensures _err != null && issubtype(typeof(_err), SCIONBaseError()) ==> acc(SCIONPath_State(path), 1 / 9)
  ensures _err != null && issubtype(typeof(_err), SCIONBaseError()) ==> acc(SCIONElement_State(self_60), 1 / 9)
  ensures _err != null && issubtype(typeof(_err), SCIONBaseError()) ==> acc(_err.SCIONBaseException_args_, write) && issubtype(typeof(_err.SCIONBaseException_args_), tuple(Seq(object())))
  ensures _err != null && issubtype(typeof(_err), SCIONBaseError()) ==> SCIONPath_get_iof_idx(path) != null
  ensures _err != null && issubtype(typeof(_err), SCIONBaseError()) ==> SCIONPath_get_hof_idx(path) != null
  ensures _err != null && issubtype(typeof(_err), SCIONBaseError()) ==> !bool___unbox__(valid_hof(path, ingress_2, Router_get_interface_if_id(self_60), Router_get_of_gen_key(self_60)))
  ensures _err != null && issubtype(typeof(_err), SCIONIFVerificationError()) ==> int___eq__(__prim__int___box__(tuple___len__(_err.SCIONBaseException_args_)), __prim__int___box__(2))
  ensures _err != null && issubtype(typeof(_err), SCIONIFVerificationError()) ==> acc(SCIONPath_State(path), 1 / 9)
  ensures _err != null && issubtype(typeof(_err), SCIONOFVerificationError()) ==> int___eq__(__prim__int___box__(tuple___len__(_err.SCIONBaseException_args_)), __prim__int___box__(2))
  ensures _err != null && issubtype(typeof(_err), SCIONOFVerificationError()) ==> acc(SCIONPath_State(path), 1 / 9)
  ensures _err != null ==> issubtype(typeof(_err), SCIONBaseError()) || issubtype(typeof(_err), SCIONIFVerificationError()) || issubtype(typeof(_err), SCIONOFVerificationError())
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var iof: Ref
  var hack: Ref
  var ts: Ref
  var hof_0: Ref
  var prev_hof: Ref
  var self_360: Ref
  var path_11: Ref
  var ingress_11: Ref
  var get_hof_ver_res: Ref
  var SCIONIFVerificationError_res: Ref
  var SCIONOFVerificationError_res: Ref
  var SCIONOFExpiredError_res: Ref
  var _cwl_217: Perm
  var _method_measures_217: Seq[Measure$]
  _method_measures_217 := Seq(Measure$create(true, _cthread_217, 5))
  inhale typeof(self_60) == Router()
  _err := null
  self_360 := self_60
  path_11 := path
  ingress_11 := ingress_2
  iof := SCIONPath_get_iof(path_11)
  inhale _isDefined(6713193)
  hack := __prim__int___box__(int___floordiv__(int___unbox__(MAX_SEGMENT_TTL()), 2))
  inhale _isDefined(1801675112)
  ts := SCIONPath_get_iof_timestamp(path_11, _checkDefined(iof, 6713193))
  inhale _isDefined(29556)
  hof_0 := SCIONPath_get_hof(path_11)
  inhale _isDefined(207758978920)
  _cwl_217, get_hof_ver_res := SCIONPath_get_hof_ver(_cthread_217, _method_measures_217, _residue_217, path_11, ingress_11)
  prev_hof := get_hof_ver_res
  inhale _isDefined(7381233073501074032)
  if (!int___eq__(SCIONPath_get_curr_if(path_11, ingress_11), Router_get_interface_if_id(self_360))) {
    SCIONIFVerificationError_res := new()
    inhale typeof(SCIONIFVerificationError_res) == SCIONIFVerificationError()
    inhale acc(_MaySet(SCIONIFVerificationError_res, 2340446737858384733671959561063924865783486336333871924051), write)
    _cwl_217 := SCIONBaseException___init__(_cthread_217, _method_measures_217, _residue_217, SCIONIFVerificationError_res, tuple___create2__(_checkDefined(hof_0, 207758978920), _checkDefined(iof, 6713193), (issubtype(typeof(_checkDefined(hof_0, 207758978920)), HopOpaqueField()) ? HopOpaqueField() : NoneType()), (issubtype(typeof(_checkDefined(iof, 6713193)), InfoOpaqueField()) ? InfoOpaqueField() : NoneType()), 4))
    _err := SCIONIFVerificationError_res
    if (_err != null) {
      _err := _err
      goto __end
    }
  }
  if (int___le__(int___unbox__(int___int__(SCIONTime_get_time(SCIONTime()))), int___add__(int___unbox__(_checkDefined(ts, 29556)), int___mul__(int___unbox__(SCIONPath_get_hof_exp_time(path_11, _checkDefined(hof_0, 207758978920))), int___unbox__(EXP_TIME_UNIT()))))) {
    if (!bool___unbox__((unfolding acc(SCIONPath_State(path_11), 1 / 10) in (unfolding acc(OpaqueFieldList_State(path_11.SCIONPath__ofs), 1 / 10) in HopOpaqueField_verify_mac(_checkDefined(hof_0, 207758978920), Router_get_of_gen_key(self_360), _checkDefined(ts, 29556), _checkDefined(prev_hof, 7381233073501074032)))))) {
      SCIONOFVerificationError_res := new()
      inhale typeof(SCIONOFVerificationError_res) == SCIONOFVerificationError()
      inhale acc(_MaySet(SCIONOFVerificationError_res, 2340446737858384733671959561063924865783486336333871924051), write)
      _cwl_217 := SCIONBaseException___init__(_cthread_217, _method_measures_217, _residue_217, SCIONOFVerificationError_res, tuple___create2__(_checkDefined(hof_0, 207758978920), _checkDefined(prev_hof, 7381233073501074032), (issubtype(typeof(_checkDefined(hof_0, 207758978920)), HopOpaqueField()) ? HopOpaqueField() : NoneType()), (issubtype(typeof(_checkDefined(prev_hof, 7381233073501074032)), HopOpaqueField()) ? HopOpaqueField() : NoneType()), 5))
      _err := SCIONOFVerificationError_res
      if (_err != null) {
        _err := _err
        goto __end
      }
    }
  } else {
    SCIONOFExpiredError_res := new()
    inhale typeof(SCIONOFExpiredError_res) == SCIONOFExpiredError()
    inhale acc(_MaySet(SCIONOFExpiredError_res, 2340446737858384733671959561063924865783486336333871924051), write)
    _cwl_217 := SCIONBaseException___init__(_cthread_217, _method_measures_217, _residue_217, SCIONOFExpiredError_res, tuple___create1__(_checkDefined(hof_0, 207758978920), (issubtype(typeof(_checkDefined(hof_0, 207758978920)), HopOpaqueField()) ? HopOpaqueField() : NoneType()), 6))
    _err := SCIONOFExpiredError_res
    if (_err != null) {
      _err := _err
      goto __end
    }
  }
  goto __end
  label __end
}

method SCIONBaseException___init__(_cthread_256: Ref, _caller_measures_256: Seq[Measure$], _residue_256: Perm, self_86: Ref, args_4: Ref) returns (_current_wait_level_256: Perm)
  requires _cthread_256 != null
  requires issubtype(typeof(_cthread_256), Thread_0())
  requires self_86 != null
  requires acc(_MaySet(self_86, 2340446737858384733671959561063924865783486336333871924051), write)
  requires issubtype(typeof(self_86), SCIONBaseException())
  requires (forall i: Int :: { tuple_arg(typeof(args_4), i) } i >= 0 && i < |tuple_args(typeof(args_4))| ==> issubtype(tuple_arg(typeof(args_4), i), object()))
  requires self_86 != null
  requires [acc(MustTerminate(_cthread_256), write), true]
  requires [true, Measure$check(_caller_measures_256, _cthread_256, 1) || perm(MustTerminate(_cthread_256)) == none && ((forperm _r_84: Ref [MustInvokeBounded(_r_84)] :: false) && ((forperm _r_84: Ref [MustInvokeUnbounded(_r_84)] :: false) && ((forperm _r_84: Ref [_r_84.MustReleaseBounded] :: false) && (forperm _r_84: Ref [_r_84.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_83: Ref [_r_83.MustReleaseBounded] :: Level(_r_83) <= _current_wait_level_256) && ((forperm _r_83: Ref [_r_83.MustReleaseUnbounded] :: Level(_r_83) <= _current_wait_level_256) && _residue_256 <= _current_wait_level_256), true]
  ensures acc(self_86.SCIONBaseException_args_, write) && issubtype(typeof(self_86.SCIONBaseException_args_), tuple(Seq(object())))
  ensures int___eq__(__prim__int___box__(tuple___len__(self_86.SCIONBaseException_args_)), __prim__int___box__(tuple___len__(args_4)))
{
  var _cwl_256: Perm
  inhale typeof(self_86) == SCIONBaseException()
  inhale false
}

method SCIONPath_get_hof_ver(_cthread_373: Ref, _caller_measures_373: Seq[Measure$], _residue_373: Perm, self_190: Ref, ingress_8: Ref) returns (_current_wait_level_373: Perm, _res: Ref)
  requires _cthread_373 != null
  requires issubtype(typeof(_cthread_373), Thread_0())
  requires issubtype(typeof(self_190), SCIONPath())
  requires issubtype(typeof(ingress_8), bool())
  requires self_190 != null
  requires acc(SCIONPath_State(self_190), 1 / 10)
  requires SCIONPath_get_iof_idx(self_190) != null
  requires SCIONPath_get_hof_idx(self_190) != null
  requires !bool___unbox__(ingress_8) ==> int___lt__(int___add__(int___unbox__(SCIONPath_get_hof_idx(self_190)), 1), int___unbox__(SCIONPath_get_ofs_len(self_190))) && (issubtype(typeof(SCIONPath_ofs_get_by_idx(self_190, __prim__int___box__(int___add__(int___unbox__(SCIONPath_get_hof_idx(self_190)), 1)))), HopOpaqueField()) && SCIONPath_ofs_get_by_idx(self_190, __prim__int___box__(int___add__(int___unbox__(SCIONPath_get_hof_idx(self_190)), 1))) != SCIONPath_ofs_get_by_idx(self_190, SCIONPath_get_hof_idx(self_190)))
  requires [acc(MustTerminate(_cthread_373), write), true]
  requires [true, Measure$check(_caller_measures_373, _cthread_373, 3) || perm(MustTerminate(_cthread_373)) == none && ((forperm _r_150: Ref [MustInvokeBounded(_r_150)] :: false) && ((forperm _r_150: Ref [MustInvokeUnbounded(_r_150)] :: false) && ((forperm _r_150: Ref [_r_150.MustReleaseBounded] :: false) && (forperm _r_150: Ref [_r_150.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_149: Ref [_r_149.MustReleaseBounded] :: Level(_r_149) <= _current_wait_level_373) && ((forperm _r_149: Ref [_r_149.MustReleaseUnbounded] :: Level(_r_149) <= _current_wait_level_373) && _residue_373 <= _current_wait_level_373), true]
  ensures _res == null || issubtype(typeof(_res), HopOpaqueField())
  ensures acc(SCIONPath_State(self_190), 1 / 10)
  ensures SCIONPath_get_iof_idx(self_190) != null
  ensures SCIONPath_get_hof_idx(self_190) != null
  ensures _res != null ==> PSeq___contains__(SCIONPath_get_ofs_contents(self_190), _res)
  ensures _res != null ==> _res != SCIONPath_get_hof(self_190)
  ensures _res == SCIONPath_get_hof_ver_pure(self_190)
{
  var _cwl_373: Perm
  inhale typeof(self_190) == SCIONPath()
  _res := null
  inhale false
}

method State_Stateframe_check_5(self_107: Ref)
  requires true && issubtype(typeof(self_107), OpaqueField())
  requires issubtype(typeof(self_107), OpaqueField())
  requires true && true


method State_Stateframe_check_6(self_107: Ref)
  requires true && issubtype(typeof(self_107), OpaqueField())
  requires issubtype(typeof(self_107), HopOpaqueField())
  requires true && (acc(self_107.HopOpaqueField_xover, write) && issubtype(typeof(self_107.HopOpaqueField_xover), bool()) && (acc(self_107.HopOpaqueField_verify_only, write) && issubtype(typeof(self_107.HopOpaqueField_verify_only), bool()) && (acc(self_107.HopOpaqueField_forward_only, write) && issubtype(typeof(self_107.HopOpaqueField_forward_only), bool()) && (acc(self_107.HopOpaqueField_recurse, write) && issubtype(typeof(self_107.HopOpaqueField_recurse), bool()) && (acc(self_107.HopOpaqueField_exp_time, write) && issubtype(typeof(self_107.HopOpaqueField_exp_time), int()) && (acc(self_107.HopOpaqueField_ingress_if, write) && issubtype(typeof(self_107.HopOpaqueField_ingress_if), int()) && (acc(self_107.HopOpaqueField_egress_if, write) && issubtype(typeof(self_107.HopOpaqueField_egress_if), int()) && (acc(self_107.HopOpaqueField_mac, write) && issubtype(typeof(self_107.HopOpaqueField_mac), bytes())))))))))


method State_Stateframe_check_7(self_107: Ref)
  requires true && issubtype(typeof(self_107), OpaqueField())
  requires issubtype(typeof(self_107), InfoOpaqueField())
  requires true && (acc(self_107.InfoOpaqueField_up_flag, write) && issubtype(typeof(self_107.InfoOpaqueField_up_flag), bool()) && (acc(self_107.InfoOpaqueField_shortcut, write) && issubtype(typeof(self_107.InfoOpaqueField_shortcut), bool()) && (acc(self_107.InfoOpaqueField_peer, write) && issubtype(typeof(self_107.InfoOpaqueField_peer), bool()) && (acc(self_107.InfoOpaqueField_timestamp, write) && issubtype(typeof(self_107.InfoOpaqueField_timestamp), int()) && (acc(self_107.InfoOpaqueField_isd, write) && issubtype(typeof(self_107.InfoOpaqueField_isd), int()) && (acc(self_107.InfoOpaqueField_hops, write) && issubtype(typeof(self_107.InfoOpaqueField_hops), int())))))))


method State_Stateframe_check_8(self_123: Ref)
  requires true && issubtype(typeof(self_123), OpaqueFieldList())
  requires issubtype(typeof(self_123), OpaqueFieldList())
  requires true && (acc(self_123.OpaqueFieldList__order, write) && issubtype(typeof(self_123.OpaqueFieldList__order), tuple(Seq(str()))) && (acc(self_123.OpaqueFieldList__labels, write) && issubtype(typeof(self_123.OpaqueFieldList__labels), dict(str(), list(OpaqueField()))) && (acc(self_123.OpaqueFieldList__labels.dict_acc, write) && acc(self_123.OpaqueFieldList__labels.dict_acc2, write) && (true && (forall lambda36_40$e: Ref :: { (lambda36_40$e in PSeq___sil_seq__(OpaqueFieldList_contents(self_123))) } { (lambda36_40$e in PSeq___sil_seq__(OpaqueFieldList_contents(self_123))) } issubtype(typeof(lambda36_40$e), OpaqueField()) && (lambda36_40$e in PSeq___sil_seq__(OpaqueFieldList_contents(self_123))) ==> acc(OpaqueField_State(lambda36_40$e), write))))))


method State_Stateframe_check_9(self_197: Ref)
  requires true && issubtype(typeof(self_197), SCIONPath())
  requires issubtype(typeof(self_197), SCIONPath())
  requires true && (acc(self_197.SCIONPath__ofs, write) && issubtype(typeof(self_197.SCIONPath__ofs), OpaqueFieldList()) && (acc(OpaqueFieldList_State(self_197.SCIONPath__ofs), write) && (acc(self_197.SCIONPath__hof_idx, write) && (self_197.SCIONPath__hof_idx == null || issubtype(typeof(self_197.SCIONPath__hof_idx), int())) && (acc(self_197.SCIONPath__iof_idx, write) && (self_197.SCIONPath__iof_idx == null || issubtype(typeof(self_197.SCIONPath__iof_idx), int())) && (self_197.SCIONPath__hof_idx != null && (self_197.SCIONPath__iof_idx != null && (acc(self_197.SCIONPath_interfaces, write) && issubtype(typeof(self_197.SCIONPath_interfaces), list(tuple(Seq(ASMarking(), int())))) && (acc(self_197.SCIONPath_interfaces.list_acc, write) && (acc(self_197.SCIONPath_mtu, write) && (self_197.SCIONPath_mtu == null || issubtype(typeof(self_197.SCIONPath_mtu), int())) && ((self_197.SCIONPath__hof_idx != null ==> int___ge__(int___unbox__(self_197.SCIONPath__hof_idx), 0) && (int___lt__(int___unbox__(self_197.SCIONPath__hof_idx), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__hof_idx)), HopOpaqueField()))) && ((self_197.SCIONPath__iof_idx != null ==> int___ge__(int___unbox__(self_197.SCIONPath__iof_idx), 0) && (int___lt__(int___unbox__(self_197.SCIONPath__iof_idx), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__iof_idx)), InfoOpaqueField()))) && ((self_197.SCIONPath__hof_idx != null && self_197.SCIONPath__iof_idx != null ==> bool___unbox__((let lambda60_94$iof == (object___cast__(InfoOpaqueField(), OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__iof_idx))) in __prim__bool___box__(!bool___unbox__(OpaqueFieldList_get_iof_peer(self_197.SCIONPath__ofs, lambda60_94$iof)) && (bool___unbox__(OpaqueFieldList_get_iof_up_flag(self_197.SCIONPath__ofs, lambda60_94$iof)) && (bool___unbox__(( __prim__bool___box__(!bool___unbox__(OpaqueFieldList_get_hof_xover(self_197.SCIONPath__ofs, (object___cast__(HopOpaqueField(), OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__hof_idx))))) || bool___unbox__(OpaqueFieldList_get_iof_shortcut(self_197.SCIONPath__ofs, lambda60_94$iof))))) && !int___eq__(self_197.SCIONPath__hof_idx, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__iof_idx), int___unbox__(OpaqueFieldList_get_iof_hops(self_197.SCIONPath__ofs, lambda60_94$iof))))) ==> int___lt__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && (issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1)))), HopOpaqueField()) && OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1))) != OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__hof_idx)))))))) && (self_197.SCIONPath__hof_idx != null && (self_197.SCIONPath__iof_idx != null && int___lt__(int___unbox__(self_197.SCIONPath__hof_idx), int___sub__(int___unbox__(SCIONPath_state_get_ofs_len(self_197)), 1))) ==> int___lt__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1), int___unbox__(SCIONPath_state_get_ofs_len(self_197))) && (issubtype(typeof(OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, __prim__int___box__(int___add__(int___unbox__(self_197.SCIONPath__hof_idx), 1)))), HopOpaqueField()) && bool___unbox__((let lambda79_94$iof == (object___cast__(InfoOpaqueField(), OpaqueFieldList_get_by_idx(self_197.SCIONPath__ofs, self_197.SCIONPath__iof_idx))) in __prim__bool___box__(int___le__(int___sub__(int___unbox__(self_197.SCIONPath__hof_idx), int___unbox__(self_197.SCIONPath__iof_idx)), int___unbox__(OpaqueFieldList_get_iof_hops(self_197.SCIONPath__ofs, lambda79_94$iof))))))))))))))))))))
